/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.CartCouponAdd

class CartCouponAddTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of CartCouponAdd
        //val modelInstance = CartCouponAdd()

        // to test the property `code` - Coupon code
        should("test code") {
            // uncomment below to test the property
            //modelInstance.code shouldBe ("TODO")
        }

        // to test the property `actionType` - Coupon discount type
        should("test actionType") {
            // uncomment below to test the property
            //modelInstance.actionType shouldBe ("TODO")
        }

        // to test the property `actionApplyTo` - Defines where discount should be applied
        should("test actionApplyTo") {
            // uncomment below to test the property
            //modelInstance.actionApplyTo shouldBe ("TODO")
        }

        // to test the property `actionScope` - Specify how discount should be applied. If scope=matching_items, then discount will be applied to each of the items that match action conditions. Scope order means that discount will be applied once.
        should("test actionScope") {
            // uncomment below to test the property
            //modelInstance.actionScope shouldBe ("TODO")
        }

        // to test the property `actionAmount` - Defines the discount amount value.
        should("test actionAmount") {
            // uncomment below to test the property
            //modelInstance.actionAmount shouldBe ("TODO")
        }

        // to test the property `codes` - Entity codes
        should("test codes") {
            // uncomment below to test the property
            //modelInstance.codes shouldBe ("TODO")
        }

        // to test the property `name` - Coupon name
        should("test name") {
            // uncomment below to test the property
            //modelInstance.name shouldBe ("TODO")
        }

        // to test the property `dateStart` - Date start
        should("test dateStart") {
            // uncomment below to test the property
            //modelInstance.dateStart shouldBe ("TODO")
        }

        // to test the property `dateEnd` - Defines when discount code will be expired.
        should("test dateEnd") {
            // uncomment below to test the property
            //modelInstance.dateEnd shouldBe ("TODO")
        }

        // to test the property `usageLimit` - Usage limit for coupon.
        should("test usageLimit") {
            // uncomment below to test the property
            //modelInstance.usageLimit shouldBe ("TODO")
        }

        // to test the property `usageLimitPerCustomer` - Usage limit per customer.
        should("test usageLimitPerCustomer") {
            // uncomment below to test the property
            //modelInstance.usageLimitPerCustomer shouldBe ("TODO")
        }

        // to test the property `actionConditionEntity` - Defines entity for action condition.
        should("test actionConditionEntity") {
            // uncomment below to test the property
            //modelInstance.actionConditionEntity shouldBe ("TODO")
        }

        // to test the property `actionConditionKey` - Defines entity attribute code for action condition.
        should("test actionConditionKey") {
            // uncomment below to test the property
            //modelInstance.actionConditionKey shouldBe ("TODO")
        }

        // to test the property `actionConditionOperator` - Defines condition operator.
        should("test actionConditionOperator") {
            // uncomment below to test the property
            //modelInstance.actionConditionOperator shouldBe ("TODO")
        }

        // to test the property `actionConditionValue` - Defines condition attribute value/s. Can be comma separated string.
        should("test actionConditionValue") {
            // uncomment below to test the property
            //modelInstance.actionConditionValue shouldBe ("TODO")
        }

        // to test the property `includeTax` - Indicates whether to apply a discount for taxes.
        should("test includeTax") {
            // uncomment below to test the property
            //modelInstance.includeTax shouldBe ("TODO")
        }

        // to test the property `storeId` - Store Id
        should("test storeId") {
            // uncomment below to test the property
            //modelInstance.storeId shouldBe ("TODO")
        }

        // to test the property `freeCashOnDelivery` - Defines whether the coupon provides free cash on delivery
        should("test freeCashOnDelivery") {
            // uncomment below to test the property
            //modelInstance.freeCashOnDelivery shouldBe ("TODO")
        }

    }
}
