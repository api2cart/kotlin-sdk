/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.OrderAdd
import org.openapitools.client.models.OrderAddNoteAttributesInner
import org.openapitools.client.models.OrderAddOrderItemInner

class OrderAddTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of OrderAdd
        //val modelInstance = OrderAdd()

        // to test the property `orderStatus` - Defines order status.
        should("test orderStatus") {
            // uncomment below to test the property
            //modelInstance.orderStatus shouldBe ("TODO")
        }

        // to test the property `customerEmail` - Defines the customer specified by email for whom order has to be created
        should("test customerEmail") {
            // uncomment below to test the property
            //modelInstance.customerEmail shouldBe ("TODO")
        }

        // to test the property `billFirstName` - Specifies billing first name
        should("test billFirstName") {
            // uncomment below to test the property
            //modelInstance.billFirstName shouldBe ("TODO")
        }

        // to test the property `billLastName` - Specifies billing last name
        should("test billLastName") {
            // uncomment below to test the property
            //modelInstance.billLastName shouldBe ("TODO")
        }

        // to test the property `billAddress1` - Specifies first billing address
        should("test billAddress1") {
            // uncomment below to test the property
            //modelInstance.billAddress1 shouldBe ("TODO")
        }

        // to test the property `billCity` - Specifies billing city
        should("test billCity") {
            // uncomment below to test the property
            //modelInstance.billCity shouldBe ("TODO")
        }

        // to test the property `billPostcode` - Specifies billing postcode
        should("test billPostcode") {
            // uncomment below to test the property
            //modelInstance.billPostcode shouldBe ("TODO")
        }

        // to test the property `billState` - Specifies billing state code
        should("test billState") {
            // uncomment below to test the property
            //modelInstance.billState shouldBe ("TODO")
        }

        // to test the property `billCountry` - Specifies billing country code
        should("test billCountry") {
            // uncomment below to test the property
            //modelInstance.billCountry shouldBe ("TODO")
        }

        // to test the property `orderItem`
        should("test orderItem") {
            // uncomment below to test the property
            //modelInstance.orderItem shouldBe ("TODO")
        }

        // to test the property `id` - Defines order's id
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property `orderId` - Defines the order id if it is supported by the cart
        should("test orderId") {
            // uncomment below to test the property
            //modelInstance.orderId shouldBe ("TODO")
        }

        // to test the property `storeId` - Defines store id where the order should be assigned
        should("test storeId") {
            // uncomment below to test the property
            //modelInstance.storeId shouldBe ("TODO")
        }

        // to test the property `channelId` - Channel ID
        should("test channelId") {
            // uncomment below to test the property
            //modelInstance.channelId shouldBe ("TODO")
        }

        // to test the property `fulfillmentStatus` - Create order with fulfillment status
        should("test fulfillmentStatus") {
            // uncomment below to test the property
            //modelInstance.fulfillmentStatus shouldBe ("TODO")
        }

        // to test the property `financialStatus` - Create order with financial status
        should("test financialStatus") {
            // uncomment below to test the property
            //modelInstance.financialStatus shouldBe ("TODO")
        }

        // to test the property `customerFirstName` - Specifies customer's first name
        should("test customerFirstName") {
            // uncomment below to test the property
            //modelInstance.customerFirstName shouldBe ("TODO")
        }

        // to test the property `customerLastName` - Specifies customer’s last name
        should("test customerLastName") {
            // uncomment below to test the property
            //modelInstance.customerLastName shouldBe ("TODO")
        }

        // to test the property `customerPhone` - Specifies customer’s phone
        should("test customerPhone") {
            // uncomment below to test the property
            //modelInstance.customerPhone shouldBe ("TODO")
        }

        // to test the property `customerCountry` - Specifies customer's address ISO code or name of country
        should("test customerCountry") {
            // uncomment below to test the property
            //modelInstance.customerCountry shouldBe ("TODO")
        }

        // to test the property `customerBirthday` - Specifies customer’s birthday
        should("test customerBirthday") {
            // uncomment below to test the property
            //modelInstance.customerBirthday shouldBe ("TODO")
        }

        // to test the property `customerFax` - Specifies customer’s fax
        should("test customerFax") {
            // uncomment below to test the property
            //modelInstance.customerFax shouldBe ("TODO")
        }

        // to test the property `orderPaymentMethod` - Defines order payment method.<br/>Setting order_payment_method on Shopify will also change financial_status field value to 'paid'
        should("test orderPaymentMethod") {
            // uncomment below to test the property
            //modelInstance.orderPaymentMethod shouldBe ("TODO")
        }

        // to test the property `transactionId` - Payment transaction id
        should("test transactionId") {
            // uncomment below to test the property
            //modelInstance.transactionId shouldBe ("TODO")
        }

        // to test the property `currency` - Currency code of order
        should("test currency") {
            // uncomment below to test the property
            //modelInstance.currency shouldBe ("TODO")
        }

        // to test the property `date` - Specifies an order creation date in format Y-m-d H:i:s
        should("test date") {
            // uncomment below to test the property
            //modelInstance.date shouldBe ("TODO")
        }

        // to test the property `dateModified` - Specifies order's  modification date
        should("test dateModified") {
            // uncomment below to test the property
            //modelInstance.dateModified shouldBe ("TODO")
        }

        // to test the property `dateFinished` - Specifies order's  finished date
        should("test dateFinished") {
            // uncomment below to test the property
            //modelInstance.dateFinished shouldBe ("TODO")
        }

        // to test the property `billAddress2` - Specifies second billing address
        should("test billAddress2") {
            // uncomment below to test the property
            //modelInstance.billAddress2 shouldBe ("TODO")
        }

        // to test the property `billCompany` - Specifies billing company
        should("test billCompany") {
            // uncomment below to test the property
            //modelInstance.billCompany shouldBe ("TODO")
        }

        // to test the property `billPhone` - Specifies billing phone
        should("test billPhone") {
            // uncomment below to test the property
            //modelInstance.billPhone shouldBe ("TODO")
        }

        // to test the property `billFax` - Specifies billing fax
        should("test billFax") {
            // uncomment below to test the property
            //modelInstance.billFax shouldBe ("TODO")
        }

        // to test the property `shippFirstName` - Specifies shipping first name
        should("test shippFirstName") {
            // uncomment below to test the property
            //modelInstance.shippFirstName shouldBe ("TODO")
        }

        // to test the property `shippLastName` - Specifies shipping last name
        should("test shippLastName") {
            // uncomment below to test the property
            //modelInstance.shippLastName shouldBe ("TODO")
        }

        // to test the property `shippAddress1` - Specifies first shipping address
        should("test shippAddress1") {
            // uncomment below to test the property
            //modelInstance.shippAddress1 shouldBe ("TODO")
        }

        // to test the property `shippAddress2` - Specifies second address line of a shipping street address
        should("test shippAddress2") {
            // uncomment below to test the property
            //modelInstance.shippAddress2 shouldBe ("TODO")
        }

        // to test the property `shippCity` - Specifies shipping city
        should("test shippCity") {
            // uncomment below to test the property
            //modelInstance.shippCity shouldBe ("TODO")
        }

        // to test the property `shippPostcode` - Specifies shipping postcode
        should("test shippPostcode") {
            // uncomment below to test the property
            //modelInstance.shippPostcode shouldBe ("TODO")
        }

        // to test the property `shippState` - Specifies shipping state code
        should("test shippState") {
            // uncomment below to test the property
            //modelInstance.shippState shouldBe ("TODO")
        }

        // to test the property `shippCountry` - Specifies shipping country code
        should("test shippCountry") {
            // uncomment below to test the property
            //modelInstance.shippCountry shouldBe ("TODO")
        }

        // to test the property `shippCompany` - Specifies shipping company
        should("test shippCompany") {
            // uncomment below to test the property
            //modelInstance.shippCompany shouldBe ("TODO")
        }

        // to test the property `shippPhone` - Specifies shipping phone
        should("test shippPhone") {
            // uncomment below to test the property
            //modelInstance.shippPhone shouldBe ("TODO")
        }

        // to test the property `shippFax` - Specifies shipping fax
        should("test shippFax") {
            // uncomment below to test the property
            //modelInstance.shippFax shouldBe ("TODO")
        }

        // to test the property `subtotalPrice` - Total price of all ordered products multiplied by their number, excluding tax, shipping price and discounts
        should("test subtotalPrice") {
            // uncomment below to test the property
            //modelInstance.subtotalPrice shouldBe ("TODO")
        }

        // to test the property `taxPrice` - The value of tax cost for order
        should("test taxPrice") {
            // uncomment below to test the property
            //modelInstance.taxPrice shouldBe ("TODO")
        }

        // to test the property `totalPrice` - Defines order's total price
        should("test totalPrice") {
            // uncomment below to test the property
            //modelInstance.totalPrice shouldBe ("TODO")
        }

        // to test the property `totalPaid` - Defines total paid amount for the order
        should("test totalPaid") {
            // uncomment below to test the property
            //modelInstance.totalPaid shouldBe ("TODO")
        }

        // to test the property `totalWeight` - Defines the sum of all line item weights in grams for the order
        should("test totalWeight") {
            // uncomment below to test the property
            //modelInstance.totalWeight shouldBe ("TODO")
        }

        // to test the property `pricesIncTax` - Indicates whether prices and subtotal includes tax.
        should("test pricesIncTax") {
            // uncomment below to test the property
            //modelInstance.pricesIncTax shouldBe ("TODO")
        }

        // to test the property `shippingPrice` - Specifies order's shipping price
        should("test shippingPrice") {
            // uncomment below to test the property
            //modelInstance.shippingPrice shouldBe ("TODO")
        }

        // to test the property `shippingTax` - Specifies order's shipping price tax
        should("test shippingTax") {
            // uncomment below to test the property
            //modelInstance.shippingTax shouldBe ("TODO")
        }

        // to test the property `discount` - Specifies order's discount
        should("test discount") {
            // uncomment below to test the property
            //modelInstance.discount shouldBe ("TODO")
        }

        // to test the property `couponDiscount` - Specifies order's coupon discount
        should("test couponDiscount") {
            // uncomment below to test the property
            //modelInstance.couponDiscount shouldBe ("TODO")
        }

        // to test the property `giftCertificateDiscount` - Discounts for order with gift certificates
        should("test giftCertificateDiscount") {
            // uncomment below to test the property
            //modelInstance.giftCertificateDiscount shouldBe ("TODO")
        }

        // to test the property `orderShippingMethod` - Defines order shipping method
        should("test orderShippingMethod") {
            // uncomment below to test the property
            //modelInstance.orderShippingMethod shouldBe ("TODO")
        }

        // to test the property `carrierId` - Defines tracking carrier id
        should("test carrierId") {
            // uncomment below to test the property
            //modelInstance.carrierId shouldBe ("TODO")
        }

        // to test the property `warehouseId` - This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
        should("test warehouseId") {
            // uncomment below to test the property
            //modelInstance.warehouseId shouldBe ("TODO")
        }

        // to test the property `coupons` - Coupons that will be applied to order
        should("test coupons") {
            // uncomment below to test the property
            //modelInstance.coupons shouldBe ("TODO")
        }

        // to test the property `tags` - Order tags
        should("test tags") {
            // uncomment below to test the property
            //modelInstance.tags shouldBe ("TODO")
        }

        // to test the property `comment` - Specifies order comment
        should("test comment") {
            // uncomment below to test the property
            //modelInstance.comment shouldBe ("TODO")
        }

        // to test the property `adminComment` - Specifies admin's order comment
        should("test adminComment") {
            // uncomment below to test the property
            //modelInstance.adminComment shouldBe ("TODO")
        }

        // to test the property `adminPrivateComment` - Specifies private admin's order comment
        should("test adminPrivateComment") {
            // uncomment below to test the property
            //modelInstance.adminPrivateComment shouldBe ("TODO")
        }

        // to test the property `sendNotifications` - Send notifications to customer after order was created
        should("test sendNotifications") {
            // uncomment below to test the property
            //modelInstance.sendNotifications shouldBe ("TODO")
        }

        // to test the property `sendAdminNotifications` - Notify admin when new order was created.
        should("test sendAdminNotifications") {
            // uncomment below to test the property
            //modelInstance.sendAdminNotifications shouldBe ("TODO")
        }

        // to test the property `externalSource` - Identifying the system used to generate the order
        should("test externalSource") {
            // uncomment below to test the property
            //modelInstance.externalSource shouldBe ("TODO")
        }

        // to test the property `inventoryBehaviour` - The behaviour to use when updating inventory.<hr><div style=\"font-style:normal\">Values description:<div style=\"margin-left: 2%; padding-top: 2%\"><div style=\"font-size:85%\"><b>bypass</b> = Do not claim inventory </br></br><b>decrement_ignoring_policy</b> = Ignore the product's </br> inventory policy and claim amounts</br></br><b>decrement_obeying_policy</b> =  Obey the product's </br> inventory policy.</br></br></div></div></div>
        should("test inventoryBehaviour") {
            // uncomment below to test the property
            //modelInstance.inventoryBehaviour shouldBe ("TODO")
        }

        // to test the property `createInvoice` - Defines whether the invoice is created automatically along with the order
        should("test createInvoice") {
            // uncomment below to test the property
            //modelInstance.createInvoice shouldBe ("TODO")
        }

        // to test the property `noteAttributes` - Defines note attributes
        should("test noteAttributes") {
            // uncomment below to test the property
            //modelInstance.noteAttributes shouldBe ("TODO")
        }

        // to test the property `clearCache` - Is cache clear required
        should("test clearCache") {
            // uncomment below to test the property
            //modelInstance.clearCache shouldBe ("TODO")
        }

        // to test the property `origin` - The source of the order
        should("test origin") {
            // uncomment below to test the property
            //modelInstance.origin shouldBe ("TODO")
        }

    }
}
