/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.ProductUpdateBatchPayloadInner
import org.openapitools.client.models.ProductUpdateBatchPayloadInnerAdvancedPricesInner
import org.openapitools.client.models.ProductUpdateBatchPayloadInnerImagesInner

class ProductUpdateBatchPayloadInnerTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ProductUpdateBatchPayloadInner
        //val modelInstance = ProductUpdateBatchPayloadInner()

        // to test the property `id`
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property `name`
        should("test name") {
            // uncomment below to test the property
            //modelInstance.name shouldBe ("TODO")
        }

        // to test the property `description`
        should("test description") {
            // uncomment below to test the property
            //modelInstance.description shouldBe ("TODO")
        }

        // to test the property `shortDescription`
        should("test shortDescription") {
            // uncomment below to test the property
            //modelInstance.shortDescription shouldBe ("TODO")
        }

        // to test the property `sku`
        should("test sku") {
            // uncomment below to test the property
            //modelInstance.sku shouldBe ("TODO")
        }

        // to test the property `model`
        should("test model") {
            // uncomment below to test the property
            //modelInstance.model shouldBe ("TODO")
        }

        // to test the property `price`
        should("test price") {
            // uncomment below to test the property
            //modelInstance.price shouldBe ("TODO")
        }

        // to test the property `specialPrice`
        should("test specialPrice") {
            // uncomment below to test the property
            //modelInstance.specialPrice shouldBe ("TODO")
        }

        // to test the property `spriceCreate`
        should("test spriceCreate") {
            // uncomment below to test the property
            //modelInstance.spriceCreate shouldBe ("TODO")
        }

        // to test the property `spriceExpire`
        should("test spriceExpire") {
            // uncomment below to test the property
            //modelInstance.spriceExpire shouldBe ("TODO")
        }

        // to test the property `costPrice`
        should("test costPrice") {
            // uncomment below to test the property
            //modelInstance.costPrice shouldBe ("TODO")
        }

        // to test the property `oldPrice`
        should("test oldPrice") {
            // uncomment below to test the property
            //modelInstance.oldPrice shouldBe ("TODO")
        }

        // to test the property `fixedCostShippingPrice`
        should("test fixedCostShippingPrice") {
            // uncomment below to test the property
            //modelInstance.fixedCostShippingPrice shouldBe ("TODO")
        }

        // to test the property `advancedPrices` - If an empty array is passed, all entries will be deleted when the 'nested_items_update_behaviour' parameter is set to 'replace'.
        should("test advancedPrices") {
            // uncomment below to test the property
            //modelInstance.advancedPrices shouldBe ("TODO")
        }

        // to test the property `quantity`
        should("test quantity") {
            // uncomment below to test the property
            //modelInstance.quantity shouldBe ("TODO")
        }

        // to test the property `increaseQuantity`
        should("test increaseQuantity") {
            // uncomment below to test the property
            //modelInstance.increaseQuantity shouldBe ("TODO")
        }

        // to test the property `reduceQuantity`
        should("test reduceQuantity") {
            // uncomment below to test the property
            //modelInstance.reduceQuantity shouldBe ("TODO")
        }

        // to test the property `reserveQuantity`
        should("test reserveQuantity") {
            // uncomment below to test the property
            //modelInstance.reserveQuantity shouldBe ("TODO")
        }

        // to test the property `storeId`
        should("test storeId") {
            // uncomment below to test the property
            //modelInstance.storeId shouldBe ("TODO")
        }

        // to test the property `langId`
        should("test langId") {
            // uncomment below to test the property
            //modelInstance.langId shouldBe ("TODO")
        }

        // to test the property `status`
        should("test status") {
            // uncomment below to test the property
            //modelInstance.status shouldBe ("TODO")
        }

        // to test the property `type`
        should("test type") {
            // uncomment below to test the property
            //modelInstance.type shouldBe ("TODO")
        }

        // to test the property `condition`
        should("test condition") {
            // uncomment below to test the property
            //modelInstance.condition shouldBe ("TODO")
        }

        // to test the property `visible`
        should("test visible") {
            // uncomment below to test the property
            //modelInstance.visible shouldBe ("TODO")
        }

        // to test the property `availableForView`
        should("test availableForView") {
            // uncomment below to test the property
            //modelInstance.availableForView shouldBe ("TODO")
        }

        // to test the property `availableForSale`
        should("test availableForSale") {
            // uncomment below to test the property
            //modelInstance.availableForSale shouldBe ("TODO")
        }

        // to test the property `availFrom`
        should("test availFrom") {
            // uncomment below to test the property
            //modelInstance.availFrom shouldBe ("TODO")
        }

        // to test the property `weight`
        should("test weight") {
            // uncomment below to test the property
            //modelInstance.weight shouldBe ("TODO")
        }

        // to test the property `length`
        should("test length") {
            // uncomment below to test the property
            //modelInstance.length shouldBe ("TODO")
        }

        // to test the property `width`
        should("test width") {
            // uncomment below to test the property
            //modelInstance.width shouldBe ("TODO")
        }

        // to test the property `height`
        should("test height") {
            // uncomment below to test the property
            //modelInstance.height shouldBe ("TODO")
        }

        // to test the property `dimensionsUnit`
        should("test dimensionsUnit") {
            // uncomment below to test the property
            //modelInstance.dimensionsUnit shouldBe ("TODO")
        }

        // to test the property `weightUnit`
        should("test weightUnit") {
            // uncomment below to test the property
            //modelInstance.weightUnit shouldBe ("TODO")
        }

        // to test the property `manageStock`
        should("test manageStock") {
            // uncomment below to test the property
            //modelInstance.manageStock shouldBe ("TODO")
        }

        // to test the property `inStock`
        should("test inStock") {
            // uncomment below to test the property
            //modelInstance.inStock shouldBe ("TODO")
        }

        // to test the property `backorderStatus`
        should("test backorderStatus") {
            // uncomment below to test the property
            //modelInstance.backorderStatus shouldBe ("TODO")
        }

        // to test the property `isFreeShipping`
        should("test isFreeShipping") {
            // uncomment below to test the property
            //modelInstance.isFreeShipping shouldBe ("TODO")
        }

        // to test the property `isVirtual`
        should("test isVirtual") {
            // uncomment below to test the property
            //modelInstance.isVirtual shouldBe ("TODO")
        }

        // to test the property `taxable`
        should("test taxable") {
            // uncomment below to test the property
            //modelInstance.taxable shouldBe ("TODO")
        }

        // to test the property `downloadable`
        should("test downloadable") {
            // uncomment below to test the property
            //modelInstance.downloadable shouldBe ("TODO")
        }

        // to test the property `warehouseId`
        should("test warehouseId") {
            // uncomment below to test the property
            //modelInstance.warehouseId shouldBe ("TODO")
        }

        // to test the property `taxClassId`
        should("test taxClassId") {
            // uncomment below to test the property
            //modelInstance.taxClassId shouldBe ("TODO")
        }

        // to test the property `categoriesIds`
        should("test categoriesIds") {
            // uncomment below to test the property
            //modelInstance.categoriesIds shouldBe ("TODO")
        }

        // to test the property `metaTitle`
        should("test metaTitle") {
            // uncomment below to test the property
            //modelInstance.metaTitle shouldBe ("TODO")
        }

        // to test the property `metaDescription`
        should("test metaDescription") {
            // uncomment below to test the property
            //modelInstance.metaDescription shouldBe ("TODO")
        }

        // to test the property `metaKeywords`
        should("test metaKeywords") {
            // uncomment below to test the property
            //modelInstance.metaKeywords shouldBe ("TODO")
        }

        // to test the property `url`
        should("test url") {
            // uncomment below to test the property
            //modelInstance.url shouldBe ("TODO")
        }

        // to test the property `seoUrl`
        should("test seoUrl") {
            // uncomment below to test the property
            //modelInstance.seoUrl shouldBe ("TODO")
        }

        // to test the property `manufacturer`
        should("test manufacturer") {
            // uncomment below to test the property
            //modelInstance.manufacturer shouldBe ("TODO")
        }

        // to test the property `manufacturerId`
        should("test manufacturerId") {
            // uncomment below to test the property
            //modelInstance.manufacturerId shouldBe ("TODO")
        }

        // to test the property `mpn`
        should("test mpn") {
            // uncomment below to test the property
            //modelInstance.mpn shouldBe ("TODO")
        }

        // to test the property `gtin`
        should("test gtin") {
            // uncomment below to test the property
            //modelInstance.gtin shouldBe ("TODO")
        }

        // to test the property `upc`
        should("test upc") {
            // uncomment below to test the property
            //modelInstance.upc shouldBe ("TODO")
        }

        // to test the property `isbn`
        should("test isbn") {
            // uncomment below to test the property
            //modelInstance.isbn shouldBe ("TODO")
        }

        // to test the property `ean`
        should("test ean") {
            // uncomment below to test the property
            //modelInstance.ean shouldBe ("TODO")
        }

        // to test the property `barcode`
        should("test barcode") {
            // uncomment below to test the property
            //modelInstance.barcode shouldBe ("TODO")
        }

        // to test the property `images` - Property 'nested_items_update_behaviour' does not apply. Specified items will be added to existing product images
        should("test images") {
            // uncomment below to test the property
            //modelInstance.images shouldBe ("TODO")
        }

        // to test the property `relatedProductsIds` - If an empty array is passed, all entries will be deleted when the 'nested_items_update_behaviour' parameter is set to 'replace'.
        should("test relatedProductsIds") {
            // uncomment below to test the property
            //modelInstance.relatedProductsIds shouldBe ("TODO")
        }

        // to test the property `upSellProductsIds` - If an empty array is passed, all entries will be deleted when the 'nested_items_update_behaviour' parameter is set to 'replace'.
        should("test upSellProductsIds") {
            // uncomment below to test the property
            //modelInstance.upSellProductsIds shouldBe ("TODO")
        }

        // to test the property `crossSellProductsIds` - If an empty array is passed, all entries will be deleted when the 'nested_items_update_behaviour' parameter is set to 'replace'.
        should("test crossSellProductsIds") {
            // uncomment below to test the property
            //modelInstance.crossSellProductsIds shouldBe ("TODO")
        }

        // to test the property `tags`
        should("test tags") {
            // uncomment below to test the property
            //modelInstance.tags shouldBe ("TODO")
        }

        // to test the property `searchKeywords`
        should("test searchKeywords") {
            // uncomment below to test the property
            //modelInstance.searchKeywords shouldBe ("TODO")
        }

        // to test the property `harmonizedSystemCode`
        should("test harmonizedSystemCode") {
            // uncomment below to test the property
            //modelInstance.harmonizedSystemCode shouldBe ("TODO")
        }

    }
}
