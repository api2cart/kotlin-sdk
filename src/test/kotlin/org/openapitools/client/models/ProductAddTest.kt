/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.ProductAdd
import org.openapitools.client.models.ProductAddBestOffer
import org.openapitools.client.models.ProductAddCertificationsInner
import org.openapitools.client.models.ProductAddFilesInner
import org.openapitools.client.models.ProductAddGroupPricesInner
import org.openapitools.client.models.ProductAddLogisticInfoInner
import org.openapitools.client.models.ProductAddManufacturerInfo
import org.openapitools.client.models.ProductAddPackageDetails
import org.openapitools.client.models.ProductAddSalesTax
import org.openapitools.client.models.ProductAddSellerProfiles
import org.openapitools.client.models.ProductAddShippingDetailsInner
import org.openapitools.client.models.ProductAddSizeChart
import org.openapitools.client.models.ProductAddSpecificsInner
import org.openapitools.client.models.ProductAddTierPricesInner

class ProductAddTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ProductAdd
        //val modelInstance = ProductAdd()

        // to test the property `name` - Defines product's name that has to be added
        should("test name") {
            // uncomment below to test the property
            //modelInstance.name shouldBe ("TODO")
        }

        // to test the property `model` - Defines product's model that has to be added
        should("test model") {
            // uncomment below to test the property
            //modelInstance.model shouldBe ("TODO")
        }

        // to test the property `description` - Defines product's description that has to be added
        should("test description") {
            // uncomment below to test the property
            //modelInstance.description shouldBe ("TODO")
        }

        // to test the property `price` - Defines product's price that has to be added
        should("test price") {
            // uncomment below to test the property
            //modelInstance.price shouldBe ("TODO")
        }

        // to test the property `sku` - Defines product's sku that has to be added
        should("test sku") {
            // uncomment below to test the property
            //modelInstance.sku shouldBe ("TODO")
        }

        // to test the property `oldPrice` - Defines product's old price
        should("test oldPrice") {
            // uncomment below to test the property
            //modelInstance.oldPrice shouldBe ("TODO")
        }

        // to test the property `specialPrice` - Defines product's model that has to be added
        should("test specialPrice") {
            // uncomment below to test the property
            //modelInstance.specialPrice shouldBe ("TODO")
        }

        // to test the property `costPrice` - Defines new product's cost price
        should("test costPrice") {
            // uncomment below to test the property
            //modelInstance.costPrice shouldBe ("TODO")
        }

        // to test the property `fixedCostShippingPrice` - Specifies product's fixed cost shipping price
        should("test fixedCostShippingPrice") {
            // uncomment below to test the property
            //modelInstance.fixedCostShippingPrice shouldBe ("TODO")
        }

        // to test the property `spriceCreate` - Defines the date of special price creation
        should("test spriceCreate") {
            // uncomment below to test the property
            //modelInstance.spriceCreate shouldBe ("TODO")
        }

        // to test the property `spriceModified` - Defines the date of special price modification
        should("test spriceModified") {
            // uncomment below to test the property
            //modelInstance.spriceModified shouldBe ("TODO")
        }

        // to test the property `spriceExpire` - Defines the term of special price offer duration
        should("test spriceExpire") {
            // uncomment below to test the property
            //modelInstance.spriceExpire shouldBe ("TODO")
        }

        // to test the property `tierPrices` - Defines product's tier prices
        should("test tierPrices") {
            // uncomment below to test the property
            //modelInstance.tierPrices shouldBe ("TODO")
        }

        // to test the property `groupPrices` - Defines product's group prices
        should("test groupPrices") {
            // uncomment below to test the property
            //modelInstance.groupPrices shouldBe ("TODO")
        }

        // to test the property `availableForView` - Specifies the set of visible/invisible products for users
        should("test availableForView") {
            // uncomment below to test the property
            //modelInstance.availableForView shouldBe ("TODO")
        }

        // to test the property `availableForSale` - Specifies the set of visible/invisible products for sale
        should("test availableForSale") {
            // uncomment below to test the property
            //modelInstance.availableForSale shouldBe ("TODO")
        }

        // to test the property `weight` - Weight
        should("test weight") {
            // uncomment below to test the property
            //modelInstance.weight shouldBe ("TODO")
        }

        // to test the property `width` - Defines product's width
        should("test width") {
            // uncomment below to test the property
            //modelInstance.width shouldBe ("TODO")
        }

        // to test the property `height` - Defines product's height
        should("test height") {
            // uncomment below to test the property
            //modelInstance.height shouldBe ("TODO")
        }

        // to test the property `length` - Defines product's length
        should("test length") {
            // uncomment below to test the property
            //modelInstance.length shouldBe ("TODO")
        }

        // to test the property `weightUnit` - Weight Unit
        should("test weightUnit") {
            // uncomment below to test the property
            //modelInstance.weightUnit shouldBe ("TODO")
        }

        // to test the property `dimensionsUnit` - Weight Unit
        should("test dimensionsUnit") {
            // uncomment below to test the property
            //modelInstance.dimensionsUnit shouldBe ("TODO")
        }

        // to test the property `shortDescription` - Defines short description
        should("test shortDescription") {
            // uncomment below to test the property
            //modelInstance.shortDescription shouldBe ("TODO")
        }

        // to test the property `warehouseId` - This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
        should("test warehouseId") {
            // uncomment below to test the property
            //modelInstance.warehouseId shouldBe ("TODO")
        }

        // to test the property `backorderStatus` - Set backorder status
        should("test backorderStatus") {
            // uncomment below to test the property
            //modelInstance.backorderStatus shouldBe ("TODO")
        }

        // to test the property `quantity` - Defines product's quantity that has to be added
        should("test quantity") {
            // uncomment below to test the property
            //modelInstance.quantity shouldBe ("TODO")
        }

        // to test the property `downloadable` - Defines whether the product is downloadable
        should("test downloadable") {
            // uncomment below to test the property
            //modelInstance.downloadable shouldBe ("TODO")
        }

        // to test the property `wholesalePrice` - Defines product's sale price
        should("test wholesalePrice") {
            // uncomment below to test the property
            //modelInstance.wholesalePrice shouldBe ("TODO")
        }

        // to test the property `createdAt` - Defines the date of entity creation
        should("test createdAt") {
            // uncomment below to test the property
            //modelInstance.createdAt shouldBe ("TODO")
        }

        // to test the property `manufacturer` - Defines product's manufacturer
        should("test manufacturer") {
            // uncomment below to test the property
            //modelInstance.manufacturer shouldBe ("TODO")
        }

        // to test the property `manufacturerId` - Defines product's manufacturer by manufacturer_id
        should("test manufacturerId") {
            // uncomment below to test the property
            //modelInstance.manufacturerId shouldBe ("TODO")
        }

        // to test the property `categoriesIds` - Defines product add that is specified by comma-separated categories id
        should("test categoriesIds") {
            // uncomment below to test the property
            //modelInstance.categoriesIds shouldBe ("TODO")
        }

        // to test the property `relatedProductsIds` - Defines product's related products ids that has to be added
        should("test relatedProductsIds") {
            // uncomment below to test the property
            //modelInstance.relatedProductsIds shouldBe ("TODO")
        }

        // to test the property `upSellProductsIds` - Defines product's up-sell products ids that has to be added
        should("test upSellProductsIds") {
            // uncomment below to test the property
            //modelInstance.upSellProductsIds shouldBe ("TODO")
        }

        // to test the property `crossSellProductsIds` - Defines product's cross-sell products ids that has to be added
        should("test crossSellProductsIds") {
            // uncomment below to test the property
            //modelInstance.crossSellProductsIds shouldBe ("TODO")
        }

        // to test the property `taxClassId` - Defines tax classes where entity has to be added
        should("test taxClassId") {
            // uncomment below to test the property
            //modelInstance.taxClassId shouldBe ("TODO")
        }

        // to test the property `type` - Defines product's type
        should("test type") {
            // uncomment below to test the property
            //modelInstance.type shouldBe ("TODO")
        }

        // to test the property `metaTitle` - Defines unique meta title for each entity
        should("test metaTitle") {
            // uncomment below to test the property
            //modelInstance.metaTitle shouldBe ("TODO")
        }

        // to test the property `metaKeywords` - Defines unique meta keywords for each entity
        should("test metaKeywords") {
            // uncomment below to test the property
            //modelInstance.metaKeywords shouldBe ("TODO")
        }

        // to test the property `metaDescription` - Defines unique meta description of a entity
        should("test metaDescription") {
            // uncomment below to test the property
            //modelInstance.metaDescription shouldBe ("TODO")
        }

        // to test the property `url` - Defines unique product's URL
        should("test url") {
            // uncomment below to test the property
            //modelInstance.url shouldBe ("TODO")
        }

        // to test the property `langId` - Language id
        should("test langId") {
            // uncomment below to test the property
            //modelInstance.langId shouldBe ("TODO")
        }

        // to test the property `storesIds` - Assign product to the stores that is specified by comma-separated stores' id
        should("test storesIds") {
            // uncomment below to test the property
            //modelInstance.storesIds shouldBe ("TODO")
        }

        // to test the property `categoryId` - Defines product add that is specified by category id
        should("test categoryId") {
            // uncomment below to test the property
            //modelInstance.categoryId shouldBe ("TODO")
        }

        // to test the property `viewedCount` - Specifies the number of product's reviews
        should("test viewedCount") {
            // uncomment below to test the property
            //modelInstance.viewedCount shouldBe ("TODO")
        }

        // to test the property `orderedCount` - Defines how many times the product was ordered
        should("test orderedCount") {
            // uncomment below to test the property
            //modelInstance.orderedCount shouldBe ("TODO")
        }

        // to test the property `attributeSetName` - Defines product’s attribute set name in Magento
        should("test attributeSetName") {
            // uncomment below to test the property
            //modelInstance.attributeSetName shouldBe ("TODO")
        }

        // to test the property `attributeName` - Defines product’s attribute name separated with a comma in Magento
        should("test attributeName") {
            // uncomment below to test the property
            //modelInstance.attributeName shouldBe ("TODO")
        }

        // to test the property `shippingTemplateId` - The numeric ID of the shipping template associated with the products in Etsy. You can find possible values in the \"cart.info\" API method response, in the field shipping_zones[]->id.
        should("test shippingTemplateId") {
            // uncomment below to test the property
            //modelInstance.shippingTemplateId shouldBe ("TODO")
        }

        // to test the property `productionPartnerIds` - Defines product's production partner ids that has to be added
        should("test productionPartnerIds") {
            // uncomment below to test the property
            //modelInstance.productionPartnerIds shouldBe ("TODO")
        }

        // to test the property `condition` - The human-readable label for the condition (e.g., \"New\").
        should("test condition") {
            // uncomment below to test the property
            //modelInstance.condition shouldBe ("TODO")
        }

        // to test the property `listingDuration` - Describes the number of days the seller wants the listing to be active. Look at cart.info method response for allowed values.
        should("test listingDuration") {
            // uncomment below to test the property
            //modelInstance.listingDuration shouldBe ("TODO")
        }

        // to test the property `listingType` - Indicates the selling format of the marketplace listing.
        should("test listingType") {
            // uncomment below to test the property
            //modelInstance.listingType shouldBe ("TODO")
        }

        // to test the property `paymentMethods` - Identifies the payment method (such as PayPal) that the seller will accept when the buyer pays for the item. Look at cart.info method response for allowed values.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">payment_methods[0] = string</br>payment_methods[1] = string</br></code></div></div>
        should("test paymentMethods") {
            // uncomment below to test the property
            //modelInstance.paymentMethods shouldBe ("TODO")
        }

        // to test the property `returnAccepted` - Indicates whether the seller allows the buyer to return the item.
        should("test returnAccepted") {
            // uncomment below to test the property
            //modelInstance.returnAccepted shouldBe ("TODO")
        }

        // to test the property `shippingDetails` - The shipping details, including flat and calculated shipping costs and shipping insurance costs. Look at cart.info method response for allowed values.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">shipping_details[0][<b>shipping_type</b>] = string </br>shipping_details[0][<b>shipping_service</b>] = string</br>shipping_details[0][<b>shipping_cost</b>] = decimal</br>shipping_details[1][<b>shipping_type</b>] = string </br>shipping_details[1][<b>shipping_service</b>] = string</br>shipping_details[1][<b>shipping_cost</b>] = decimal</br></code></div></div>
        should("test shippingDetails") {
            // uncomment below to test the property
            //modelInstance.shippingDetails shouldBe ("TODO")
        }

        // to test the property `paypalEmail` - Valid PayPal email address for the PayPal account that the seller will use if they offer PayPal as a payment method for the listing.
        should("test paypalEmail") {
            // uncomment below to test the property
            //modelInstance.paypalEmail shouldBe ("TODO")
        }

        // to test the property `sellerProfiles`
        should("test sellerProfiles") {
            // uncomment below to test the property
            //modelInstance.sellerProfiles shouldBe ("TODO")
        }

        // to test the property `packageDetails`
        should("test packageDetails") {
            // uncomment below to test the property
            //modelInstance.packageDetails shouldBe ("TODO")
        }

        // to test the property `bestOffer`
        should("test bestOffer") {
            // uncomment below to test the property
            //modelInstance.bestOffer shouldBe ("TODO")
        }

        // to test the property `salesTax`
        should("test salesTax") {
            // uncomment below to test the property
            //modelInstance.salesTax shouldBe ("TODO")
        }

        // to test the property `barcode` - A barcode is a unique code composed of numbers used as a product identifier.
        should("test barcode") {
            // uncomment below to test the property
            //modelInstance.barcode shouldBe ("TODO")
        }

        // to test the property `upc` - Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products.
        should("test upc") {
            // uncomment below to test the property
            //modelInstance.upc shouldBe ("TODO")
        }

        // to test the property `ean` - European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products.
        should("test ean") {
            // uncomment below to test the property
            //modelInstance.ean shouldBe ("TODO")
        }

        // to test the property `isbn` - International Standard Book Number. An ISBN is a unique identifier for books.
        should("test isbn") {
            // uncomment below to test the property
            //modelInstance.isbn shouldBe ("TODO")
        }

        // to test the property `specifics` - An array of Item Specific Name/Value pairs used by the seller to provide descriptive details of an item in a structured manner.         The list of possible specifications can be obtained using the category.info method (additional_fields->product_specifics).         <b>The structure of the parameter is different for specific platforms.</b>
        should("test specifics") {
            // uncomment below to test the property
            //modelInstance.specifics shouldBe ("TODO")
        }

        // to test the property `imageUrl` - Image Url
        should("test imageUrl") {
            // uncomment below to test the property
            //modelInstance.imageUrl shouldBe ("TODO")
        }

        // to test the property `imageName` - Defines image's name
        should("test imageName") {
            // uncomment below to test the property
            //modelInstance.imageName shouldBe ("TODO")
        }

        // to test the property `additionalImageUrls` - Image Url
        should("test additionalImageUrls") {
            // uncomment below to test the property
            //modelInstance.additionalImageUrls shouldBe ("TODO")
        }

        // to test the property `reservePrice` - Defines reserve price value
        should("test reservePrice") {
            // uncomment below to test the property
            //modelInstance.reservePrice shouldBe ("TODO")
        }

        // to test the property `buyitnowPrice` - Defines buy it now value
        should("test buyitnowPrice") {
            // uncomment below to test the property
            //modelInstance.buyitnowPrice shouldBe ("TODO")
        }

        // to test the property `conditionDescription` - Detailed description of the product condition.
        should("test conditionDescription") {
            // uncomment below to test the property
            //modelInstance.conditionDescription shouldBe ("TODO")
        }

        // to test the property `auctionConfidentialityLevel` - This allows buyers to remain anonymous when the bid or buy an item.
        should("test auctionConfidentialityLevel") {
            // uncomment below to test the property
            //modelInstance.auctionConfidentialityLevel shouldBe ("TODO")
        }

        // to test the property `logisticInfo` - Defines product's logistic channel settings
        should("test logisticInfo") {
            // uncomment below to test the property
            //modelInstance.logisticInfo shouldBe ("TODO")
        }

        // to test the property `availFrom` - Allows to schedule a time in the future that the item becomes available. The value should be greater than the current date and time.
        should("test availFrom") {
            // uncomment below to test the property
            //modelInstance.availFrom shouldBe ("TODO")
        }

        // to test the property `tags` - Product tags
        should("test tags") {
            // uncomment below to test the property
            //modelInstance.tags shouldBe ("TODO")
        }

        // to test the property `clearCache` - Is cache clear required
        should("test clearCache") {
            // uncomment below to test the property
            //modelInstance.clearCache shouldBe ("TODO")
        }

        // to test the property `asin` - Amazon Standard Identification Number.
        should("test asin") {
            // uncomment below to test the property
            //modelInstance.asin shouldBe ("TODO")
        }

        // to test the property `gtin` - Global Trade Item Number. An GTIN is an identifier for trade items.
        should("test gtin") {
            // uncomment below to test the property
            //modelInstance.gtin shouldBe ("TODO")
        }

        // to test the property `mpn` - Manufacturer Part Number. A MPN is an identifier of a particular part design or material used.
        should("test mpn") {
            // uncomment below to test the property
            //modelInstance.mpn shouldBe ("TODO")
        }

        // to test the property `taxable` - Specifies whether a tax is charged
        should("test taxable") {
            // uncomment below to test the property
            //modelInstance.taxable shouldBe ("TODO")
        }

        // to test the property `visible` - Set visibility status
        should("test visible") {
            // uncomment below to test the property
            //modelInstance.visible shouldBe ("TODO")
        }

        // to test the property `status` - Defines product's status
        should("test status") {
            // uncomment below to test the property
            //modelInstance.status shouldBe ("TODO")
        }

        // to test the property `seoUrl` - Defines unique URL for SEO
        should("test seoUrl") {
            // uncomment below to test the property
            //modelInstance.seoUrl shouldBe ("TODO")
        }

        // to test the property `productClass` - A categorization for the product
        should("test productClass") {
            // uncomment below to test the property
            //modelInstance.productClass shouldBe ("TODO")
        }

        // to test the property `productType` - A categorization for the product
        should("test productType") {
            // uncomment below to test the property
            //modelInstance.productType shouldBe ("TODO")
        }

        // to test the property `marketplaceItemProperties` - String containing the JSON representation of the supplied data
        should("test marketplaceItemProperties") {
            // uncomment below to test the property
            //modelInstance.marketplaceItemProperties shouldBe ("TODO")
        }

        // to test the property `manageStock` - Defines inventory tracking for product
        should("test manageStock") {
            // uncomment below to test the property
            //modelInstance.manageStock shouldBe ("TODO")
        }

        // to test the property `harmonizedSystemCode` - Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes
        should("test harmonizedSystemCode") {
            // uncomment below to test the property
            //modelInstance.harmonizedSystemCode shouldBe ("TODO")
        }

        // to test the property `countryOfOrigin` - The country where the inventory item was made
        should("test countryOfOrigin") {
            // uncomment below to test the property
            //modelInstance.countryOfOrigin shouldBe ("TODO")
        }

        // to test the property `files` - File Url
        should("test files") {
            // uncomment below to test the property
            //modelInstance.files shouldBe ("TODO")
        }

        // to test the property `searchKeywords` - Defines unique search keywords
        should("test searchKeywords") {
            // uncomment below to test the property
            //modelInstance.searchKeywords shouldBe ("TODO")
        }

        // to test the property `storeId` - Store Id
        should("test storeId") {
            // uncomment below to test the property
            //modelInstance.storeId shouldBe ("TODO")
        }

        // to test the property `brandName` - Defines product brand name
        should("test brandName") {
            // uncomment below to test the property
            //modelInstance.brandName shouldBe ("TODO")
        }

        // to test the property `isVirtual` - Defines whether the product is virtual
        should("test isVirtual") {
            // uncomment below to test the property
            //modelInstance.isVirtual shouldBe ("TODO")
        }

        // to test the property `isFreeShipping` - Specifies product's free shipping flag that has to be added
        should("test isFreeShipping") {
            // uncomment below to test the property
            //modelInstance.isFreeShipping shouldBe ("TODO")
        }

        // to test the property `inStock` - Set stock status
        should("test inStock") {
            // uncomment below to test the property
            //modelInstance.inStock shouldBe ("TODO")
        }

        // to test the property `deliveryCode` - The delivery promise that applies to offer
        should("test deliveryCode") {
            // uncomment below to test the property
            //modelInstance.deliveryCode shouldBe ("TODO")
        }

        // to test the property `productReference` - Groups all variations, that you want to combine into one product.
        should("test productReference") {
            // uncomment below to test the property
            //modelInstance.productReference shouldBe ("TODO")
        }

        // to test the property `deliveryType` - Defines the type of the delivery.
        should("test deliveryType") {
            // uncomment below to test the property
            //modelInstance.deliveryType shouldBe ("TODO")
        }

        // to test the property `deliveryTime` - Defines delivery time in days.
        should("test deliveryTime") {
            // uncomment below to test the property
            //modelInstance.deliveryTime shouldBe ("TODO")
        }

        // to test the property `sizeChart`
        should("test sizeChart") {
            // uncomment below to test the property
            //modelInstance.sizeChart shouldBe ("TODO")
        }

        // to test the property `certifications` - An array of product certifications. The list of possible certifications can be obtained using the \"<i>category.info</i>\" method (<i>additional_fields->rules->product_certifications</i>).
        should("test certifications") {
            // uncomment below to test the property
            //modelInstance.certifications shouldBe ("TODO")
        }

        // to test the property `deliveryOptionIds` - Defines delivery options for product by ids.
        should("test deliveryOptionIds") {
            // uncomment below to test the property
            //modelInstance.deliveryOptionIds shouldBe ("TODO")
        }

        // to test the property `manufacturerInfo`
        should("test manufacturerInfo") {
            // uncomment below to test the property
            //modelInstance.manufacturerInfo shouldBe ("TODO")
        }

        // to test the property `whenMade` - An enumerated string for the era in which the maker made the product.
        should("test whenMade") {
            // uncomment below to test the property
            //modelInstance.whenMade shouldBe ("TODO")
        }

        // to test the property `isSupply` - If true, it indicates the product as a supply, otherwise it indicates that it is a finished product.
        should("test isSupply") {
            // uncomment below to test the property
            //modelInstance.isSupply shouldBe ("TODO")
        }

        // to test the property `materials` - A list of material strings for materials used in the product.
        should("test materials") {
            // uncomment below to test the property
            //modelInstance.materials shouldBe ("TODO")
        }

        // to test the property `autoRenew` - When true, automatically renews a listing upon its expiration.
        should("test autoRenew") {
            // uncomment below to test the property
            //modelInstance.autoRenew shouldBe ("TODO")
        }

        // to test the property `allowDisplayCondition` - Flag used to determine whether the product condition is shown to the customer on the product page.
        should("test allowDisplayCondition") {
            // uncomment below to test the property
            //modelInstance.allowDisplayCondition shouldBe ("TODO")
        }

        // to test the property `minOrderQuantity` - The minimum quantity an order must contain, to be eligible to purchase this product.
        should("test minOrderQuantity") {
            // uncomment below to test the property
            //modelInstance.minOrderQuantity shouldBe ("TODO")
        }

        // to test the property `maxOrderQuantity` - The maximum quantity an order can contain when purchasing the product.
        should("test maxOrderQuantity") {
            // uncomment below to test the property
            //modelInstance.maxOrderQuantity shouldBe ("TODO")
        }

    }
}
