/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.CartCreate
import org.openapitools.client.models.AccountCartAddHybrisWebsitesInner

class CartCreateTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of CartCreate
        //val modelInstance = CartCreate()

        // to test the property `cartId` - Storeâ€™s identifier which you can get from cart_list method
        should("test cartId") {
            // uncomment below to test the property
            //modelInstance.cartId shouldBe ("TODO")
        }

        // to test the property `storeId` - Store Id
        should("test storeId") {
            // uncomment below to test the property
            //modelInstance.storeId shouldBe ("TODO")
        }

        // to test the property `wixAppId` - Wix App ID
        should("test wixAppId") {
            // uncomment below to test the property
            //modelInstance.wixAppId shouldBe ("TODO")
        }

        // to test the property `wixAppSecretKey` - Wix App Secret Key
        should("test wixAppSecretKey") {
            // uncomment below to test the property
            //modelInstance.wixAppSecretKey shouldBe ("TODO")
        }

        // to test the property `storeUrl` - A web address of a store that you would like to connect to API2Cart
        should("test storeUrl") {
            // uncomment below to test the property
            //modelInstance.storeUrl shouldBe ("TODO")
        }

        // to test the property `bridgeUrl` - This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)
        should("test bridgeUrl") {
            // uncomment below to test the property
            //modelInstance.bridgeUrl shouldBe ("TODO")
        }

        // to test the property `storeRoot` - Absolute path to the store root directory (used with \"bridge_url\" parameter)
        should("test storeRoot") {
            // uncomment below to test the property
            //modelInstance.storeRoot shouldBe ("TODO")
        }

        // to test the property `storeKey` - Set this parameter if bridge is already uploaded to store
        should("test storeKey") {
            // uncomment below to test the property
            //modelInstance.storeKey shouldBe ("TODO")
        }

        // to test the property `sharedSecret` - Shared secret
        should("test sharedSecret") {
            // uncomment below to test the property
            //modelInstance.sharedSecret shouldBe ("TODO")
        }

        // to test the property `validateVersion` - Specify if api2cart should validate cart version
        should("test validateVersion") {
            // uncomment below to test the property
            //modelInstance.validateVersion shouldBe ("TODO")
        }

        // to test the property `verify` - Enables or disables cart's verification
        should("test verify") {
            // uncomment below to test the property
            //modelInstance.verify shouldBe ("TODO")
        }

        // to test the property `dbTablesPrefix` - DB tables prefix
        should("test dbTablesPrefix") {
            // uncomment below to test the property
            //modelInstance.dbTablesPrefix shouldBe ("TODO")
        }

        // to test the property `userAgent` - This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store's firewall may block specific values.
        should("test userAgent") {
            // uncomment below to test the property
            //modelInstance.userAgent shouldBe ("TODO")
        }

        // to test the property `ftpHost` - FTP connection host
        should("test ftpHost") {
            // uncomment below to test the property
            //modelInstance.ftpHost shouldBe ("TODO")
        }

        // to test the property `ftpUser` - FTP User
        should("test ftpUser") {
            // uncomment below to test the property
            //modelInstance.ftpUser shouldBe ("TODO")
        }

        // to test the property `ftpPassword` - FTP Password
        should("test ftpPassword") {
            // uncomment below to test the property
            //modelInstance.ftpPassword shouldBe ("TODO")
        }

        // to test the property `ftpPort` - FTP Port
        should("test ftpPort") {
            // uncomment below to test the property
            //modelInstance.ftpPort shouldBe ("TODO")
        }

        // to test the property `ftpStoreDir` - FTP Store dir
        should("test ftpStoreDir") {
            // uncomment below to test the property
            //modelInstance.ftpStoreDir shouldBe ("TODO")
        }

        // to test the property `apiKey3dcart` - 3DCart API Key
        should("test apiKey3dcart") {
            // uncomment below to test the property
            //modelInstance.apiKey3dcart shouldBe ("TODO")
        }

        // to test the property `adminAccount` - It's a BigCommerce account for which API is enabled
        should("test adminAccount") {
            // uncomment below to test the property
            //modelInstance.adminAccount shouldBe ("TODO")
        }

        // to test the property `apiPath` - BigCommerce API URL
        should("test apiPath") {
            // uncomment below to test the property
            //modelInstance.apiPath shouldBe ("TODO")
        }

        // to test the property `apiKeyBigcommerce` - Bigcommerce API Key
        should("test apiKeyBigcommerce") {
            // uncomment below to test the property
            //modelInstance.apiKeyBigcommerce shouldBe ("TODO")
        }

        // to test the property `clientId` - Client ID of the requesting app
        should("test clientId") {
            // uncomment below to test the property
            //modelInstance.clientId shouldBe ("TODO")
        }

        // to test the property `accessToken` - Access token authorizing the app to access resources on behalf of a user
        should("test accessToken") {
            // uncomment below to test the property
            //modelInstance.accessToken shouldBe ("TODO")
        }

        // to test the property `context` - API Path section unique to the store
        should("test context") {
            // uncomment below to test the property
            //modelInstance.context shouldBe ("TODO")
        }

        // to test the property `accessToken` - Access token authorizing the app to access resources on behalf of a user
        should("test accessToken") {
            // uncomment below to test the property
            //modelInstance.accessToken shouldBe ("TODO")
        }

        // to test the property `apiKeyShopify` - Shopify API Key
        should("test apiKeyShopify") {
            // uncomment below to test the property
            //modelInstance.apiKeyShopify shouldBe ("TODO")
        }

        // to test the property `apiPassword` - Shopify API Password
        should("test apiPassword") {
            // uncomment below to test the property
            //modelInstance.apiPassword shouldBe ("TODO")
        }

        // to test the property `accessTokenShopify` - Access token authorizing the app to access resources on behalf of a user
        should("test accessTokenShopify") {
            // uncomment below to test the property
            //modelInstance.accessTokenShopify shouldBe ("TODO")
        }

        // to test the property `apiKey` - Neto API Key
        should("test apiKey") {
            // uncomment below to test the property
            //modelInstance.apiKey shouldBe ("TODO")
        }

        // to test the property `apiUsername` - Neto User Name
        should("test apiUsername") {
            // uncomment below to test the property
            //modelInstance.apiUsername shouldBe ("TODO")
        }

        // to test the property `encryptedPassword` - Volusion API Password
        should("test encryptedPassword") {
            // uncomment below to test the property
            //modelInstance.encryptedPassword shouldBe ("TODO")
        }

        // to test the property `login` - It's a Volusion account for which API is enabled
        should("test login") {
            // uncomment below to test the property
            //modelInstance.login shouldBe ("TODO")
        }

        // to test the property `apiUserAdnsf` - It's a AspDotNetStorefront account for which API is available
        should("test apiUserAdnsf") {
            // uncomment below to test the property
            //modelInstance.apiUserAdnsf shouldBe ("TODO")
        }

        // to test the property `apiPass` - AspDotNetStorefront API Password
        should("test apiPass") {
            // uncomment below to test the property
            //modelInstance.apiPass shouldBe ("TODO")
        }

        // to test the property `privateKey` - 3DCart Application Private Key
        should("test privateKey") {
            // uncomment below to test the property
            //modelInstance.privateKey shouldBe ("TODO")
        }

        // to test the property `appToken` - 3DCart Token from Application
        should("test appToken") {
            // uncomment below to test the property
            //modelInstance.appToken shouldBe ("TODO")
        }

        // to test the property `etsyKeystring` - Etsy keystring
        should("test etsyKeystring") {
            // uncomment below to test the property
            //modelInstance.etsyKeystring shouldBe ("TODO")
        }

        // to test the property `etsySharedSecret` - Etsy shared secret
        should("test etsySharedSecret") {
            // uncomment below to test the property
            //modelInstance.etsySharedSecret shouldBe ("TODO")
        }

        // to test the property `tokenSecret` - Secret token authorizing the app to access resources on behalf of a user
        should("test tokenSecret") {
            // uncomment below to test the property
            //modelInstance.tokenSecret shouldBe ("TODO")
        }

        // to test the property `etsyClientId` - Etsy Client Id
        should("test etsyClientId") {
            // uncomment below to test the property
            //modelInstance.etsyClientId shouldBe ("TODO")
        }

        // to test the property `etsyRefreshToken` - Etsy Refresh token
        should("test etsyRefreshToken") {
            // uncomment below to test the property
            //modelInstance.etsyRefreshToken shouldBe ("TODO")
        }

        // to test the property `ebayClientId` - Application ID (AppID).
        should("test ebayClientId") {
            // uncomment below to test the property
            //modelInstance.ebayClientId shouldBe ("TODO")
        }

        // to test the property `ebayClientSecret` - Shared Secret from eBay application
        should("test ebayClientSecret") {
            // uncomment below to test the property
            //modelInstance.ebayClientSecret shouldBe ("TODO")
        }

        // to test the property `ebayRuname` - The RuName value that eBay assigns to your application.
        should("test ebayRuname") {
            // uncomment below to test the property
            //modelInstance.ebayRuname shouldBe ("TODO")
        }

        // to test the property `ebayAccessToken` - Used to authenticate API requests.
        should("test ebayAccessToken") {
            // uncomment below to test the property
            //modelInstance.ebayAccessToken shouldBe ("TODO")
        }

        // to test the property `ebayRefreshToken` - Used to renew the access token.
        should("test ebayRefreshToken") {
            // uncomment below to test the property
            //modelInstance.ebayRefreshToken shouldBe ("TODO")
        }

        // to test the property `ebayEnvironment` - eBay environment
        should("test ebayEnvironment") {
            // uncomment below to test the property
            //modelInstance.ebayEnvironment shouldBe ("TODO")
        }

        // to test the property `ebaySiteId` - eBay global ID
        should("test ebaySiteId") {
            // uncomment below to test the property
            //modelInstance.ebaySiteId shouldBe ("TODO")
        }

        // to test the property `dwClientId` - Demandware client id
        should("test dwClientId") {
            // uncomment below to test the property
            //modelInstance.dwClientId shouldBe ("TODO")
        }

        // to test the property `dwApiPass` - Demandware api password
        should("test dwApiPass") {
            // uncomment below to test the property
            //modelInstance.dwApiPass shouldBe ("TODO")
        }

        // to test the property `demandwareUserName` - Demandware user name
        should("test demandwareUserName") {
            // uncomment below to test the property
            //modelInstance.demandwareUserName shouldBe ("TODO")
        }

        // to test the property `demandwareUserPassword` - Demandware user password
        should("test demandwareUserPassword") {
            // uncomment below to test the property
            //modelInstance.demandwareUserPassword shouldBe ("TODO")
        }

        // to test the property `sellerId` - Seller Id
        should("test sellerId") {
            // uncomment below to test the property
            //modelInstance.sellerId shouldBe ("TODO")
        }

        // to test the property `environment` - 
        should("test environment") {
            // uncomment below to test the property
            //modelInstance.environment shouldBe ("TODO")
        }

        // to test the property `hybrisClientId` - Omni Commerce Connector Client ID
        should("test hybrisClientId") {
            // uncomment below to test the property
            //modelInstance.hybrisClientId shouldBe ("TODO")
        }

        // to test the property `hybrisClientSecret` - Omni Commerce Connector Client Secret
        should("test hybrisClientSecret") {
            // uncomment below to test the property
            //modelInstance.hybrisClientSecret shouldBe ("TODO")
        }

        // to test the property `hybrisUsername` - User Name
        should("test hybrisUsername") {
            // uncomment below to test the property
            //modelInstance.hybrisUsername shouldBe ("TODO")
        }

        // to test the property `hybrisPassword` - User password
        should("test hybrisPassword") {
            // uncomment below to test the property
            //modelInstance.hybrisPassword shouldBe ("TODO")
        }

        // to test the property `hybrisWebsites` - Websites to stores mapping data
        should("test hybrisWebsites") {
            // uncomment below to test the property
            //modelInstance.hybrisWebsites shouldBe ("TODO")
        }

        // to test the property `walmartClientId` - Walmart client ID. For the region 'ca' use Consumer ID
        should("test walmartClientId") {
            // uncomment below to test the property
            //modelInstance.walmartClientId shouldBe ("TODO")
        }

        // to test the property `walmartClientSecret` - Walmart client secret. For the region 'ca' use Private Key
        should("test walmartClientSecret") {
            // uncomment below to test the property
            //modelInstance.walmartClientSecret shouldBe ("TODO")
        }

        // to test the property `walmartEnvironment` - Walmart environment
        should("test walmartEnvironment") {
            // uncomment below to test the property
            //modelInstance.walmartEnvironment shouldBe ("TODO")
        }

        // to test the property `walmartChannelType` - Walmart WM_CONSUMER.CHANNEL.TYPE header
        should("test walmartChannelType") {
            // uncomment below to test the property
            //modelInstance.walmartChannelType shouldBe ("TODO")
        }

        // to test the property `walmartRegion` - Walmart region
        should("test walmartRegion") {
            // uncomment below to test the property
            //modelInstance.walmartRegion shouldBe ("TODO")
        }

        // to test the property `lightspeedApiKey` - LightSpeed api key
        should("test lightspeedApiKey") {
            // uncomment below to test the property
            //modelInstance.lightspeedApiKey shouldBe ("TODO")
        }

        // to test the property `lightspeedApiSecret` - LightSpeed api secret
        should("test lightspeedApiSecret") {
            // uncomment below to test the property
            //modelInstance.lightspeedApiSecret shouldBe ("TODO")
        }

        // to test the property `shoplazzaAccessToken` - Access token authorizing the app to access resources on behalf of a user
        should("test shoplazzaAccessToken") {
            // uncomment below to test the property
            //modelInstance.shoplazzaAccessToken shouldBe ("TODO")
        }

        // to test the property `shoplazzaSharedSecret` - Shared secret
        should("test shoplazzaSharedSecret") {
            // uncomment below to test the property
            //modelInstance.shoplazzaSharedSecret shouldBe ("TODO")
        }

        // to test the property `shopwareAccessKey` - Shopware access key
        should("test shopwareAccessKey") {
            // uncomment below to test the property
            //modelInstance.shopwareAccessKey shouldBe ("TODO")
        }

        // to test the property `shopwareApiKey` - Shopware api key
        should("test shopwareApiKey") {
            // uncomment below to test the property
            //modelInstance.shopwareApiKey shouldBe ("TODO")
        }

        // to test the property `shopwareApiSecret` - Shopware client secret access key
        should("test shopwareApiSecret") {
            // uncomment below to test the property
            //modelInstance.shopwareApiSecret shouldBe ("TODO")
        }

        // to test the property `commercehqApiKey` - CommerceHQ api key
        should("test commercehqApiKey") {
            // uncomment below to test the property
            //modelInstance.commercehqApiKey shouldBe ("TODO")
        }

        // to test the property `commercehqApiPassword` - CommerceHQ api password
        should("test commercehqApiPassword") {
            // uncomment below to test the property
            //modelInstance.commercehqApiPassword shouldBe ("TODO")
        }

        // to test the property ``3dcartPrivateKey`` - 3DCart Private Key
        should("test `3dcartPrivateKey`") {
            // uncomment below to test the property
            //modelInstance.`3dcartPrivateKey` shouldBe ("TODO")
        }

        // to test the property ``3dcartAccessToken`` - 3DCart Token
        should("test `3dcartAccessToken`") {
            // uncomment below to test the property
            //modelInstance.`3dcartAccessToken` shouldBe ("TODO")
        }

        // to test the property `wcConsumerKey` - Woocommerce consumer key
        should("test wcConsumerKey") {
            // uncomment below to test the property
            //modelInstance.wcConsumerKey shouldBe ("TODO")
        }

        // to test the property `wcConsumerSecret` - Woocommerce consumer secret
        should("test wcConsumerSecret") {
            // uncomment below to test the property
            //modelInstance.wcConsumerSecret shouldBe ("TODO")
        }

        // to test the property `magentoConsumerKey` - Magento Consumer Key
        should("test magentoConsumerKey") {
            // uncomment below to test the property
            //modelInstance.magentoConsumerKey shouldBe ("TODO")
        }

        // to test the property `magentoConsumerSecret` - Magento Consumer Secret
        should("test magentoConsumerSecret") {
            // uncomment below to test the property
            //modelInstance.magentoConsumerSecret shouldBe ("TODO")
        }

        // to test the property `magentoAccessToken` - Magento Access Token
        should("test magentoAccessToken") {
            // uncomment below to test the property
            //modelInstance.magentoAccessToken shouldBe ("TODO")
        }

        // to test the property `magentoTokenSecret` - Magento Token Secret
        should("test magentoTokenSecret") {
            // uncomment below to test the property
            //modelInstance.magentoTokenSecret shouldBe ("TODO")
        }

        // to test the property `prestashopWebserviceKey` - Prestashop webservice key
        should("test prestashopWebserviceKey") {
            // uncomment below to test the property
            //modelInstance.prestashopWebserviceKey shouldBe ("TODO")
        }

        // to test the property `wixInstanceId` - Wix Instance ID
        should("test wixInstanceId") {
            // uncomment below to test the property
            //modelInstance.wixInstanceId shouldBe ("TODO")
        }

        // to test the property `wixRefreshToken` - Wix refresh token
        should("test wixRefreshToken") {
            // uncomment below to test the property
            //modelInstance.wixRefreshToken shouldBe ("TODO")
        }

        // to test the property `mercadoLibreAppId` - Mercado Libre App ID
        should("test mercadoLibreAppId") {
            // uncomment below to test the property
            //modelInstance.mercadoLibreAppId shouldBe ("TODO")
        }

        // to test the property `mercadoLibreAppSecretKey` - Mercado Libre App Secret Key
        should("test mercadoLibreAppSecretKey") {
            // uncomment below to test the property
            //modelInstance.mercadoLibreAppSecretKey shouldBe ("TODO")
        }

        // to test the property `mercadoLibreRefreshToken` - Mercado Libre Refresh Token
        should("test mercadoLibreRefreshToken") {
            // uncomment below to test the property
            //modelInstance.mercadoLibreRefreshToken shouldBe ("TODO")
        }

        // to test the property `zidClientId` - Zid Client ID
        should("test zidClientId") {
            // uncomment below to test the property
            //modelInstance.zidClientId shouldBe ("TODO")
        }

        // to test the property `zidClientSecret` - Zid Client Secret
        should("test zidClientSecret") {
            // uncomment below to test the property
            //modelInstance.zidClientSecret shouldBe ("TODO")
        }

        // to test the property `zidAccessToken` - Zid Access Token
        should("test zidAccessToken") {
            // uncomment below to test the property
            //modelInstance.zidAccessToken shouldBe ("TODO")
        }

        // to test the property `zidAuthorization` - Zid Authorization
        should("test zidAuthorization") {
            // uncomment below to test the property
            //modelInstance.zidAuthorization shouldBe ("TODO")
        }

        // to test the property `zidRefreshToken` - Zid refresh token
        should("test zidRefreshToken") {
            // uncomment below to test the property
            //modelInstance.zidRefreshToken shouldBe ("TODO")
        }

        // to test the property `flipkartClientId` - Flipkart Client ID
        should("test flipkartClientId") {
            // uncomment below to test the property
            //modelInstance.flipkartClientId shouldBe ("TODO")
        }

        // to test the property `flipkartClientSecret` - Flipkart Client Secret
        should("test flipkartClientSecret") {
            // uncomment below to test the property
            //modelInstance.flipkartClientSecret shouldBe ("TODO")
        }

        // to test the property `allegroClientId` - Allegro Client ID
        should("test allegroClientId") {
            // uncomment below to test the property
            //modelInstance.allegroClientId shouldBe ("TODO")
        }

        // to test the property `allegroClientSecret` - Allegro Client Secret
        should("test allegroClientSecret") {
            // uncomment below to test the property
            //modelInstance.allegroClientSecret shouldBe ("TODO")
        }

        // to test the property `allegroAccessToken` - Allegro Access Token
        should("test allegroAccessToken") {
            // uncomment below to test the property
            //modelInstance.allegroAccessToken shouldBe ("TODO")
        }

        // to test the property `allegroRefreshToken` - Allegro Refresh Token
        should("test allegroRefreshToken") {
            // uncomment below to test the property
            //modelInstance.allegroRefreshToken shouldBe ("TODO")
        }

        // to test the property `allegroEnvironment` - Allegro Environment
        should("test allegroEnvironment") {
            // uncomment below to test the property
            //modelInstance.allegroEnvironment shouldBe ("TODO")
        }

    }
}
