/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.apis.ProductApi
import org.openapitools.client.models.AccountConfigUpdate200Response
import org.openapitools.client.models.AttributeDelete200Response
import org.openapitools.client.models.AttributeValueDelete200Response
import org.openapitools.client.models.CartConfigUpdate200Response
import org.openapitools.client.models.CartValidate200Response
import org.openapitools.client.models.CategoryAddBatch200Response
import org.openapitools.client.models.CustomerDelete200Response
import org.openapitools.client.models.ModelResponseProductAttributeList
import org.openapitools.client.models.ModelResponseProductBrandList
import org.openapitools.client.models.ModelResponseProductChildItemList
import org.openapitools.client.models.ModelResponseProductCurrencyList
import org.openapitools.client.models.ModelResponseProductList
import org.openapitools.client.models.ModelResponseProductOptionList
import org.openapitools.client.models.ModelResponseProductReviewList
import org.openapitools.client.models.ProductAdd
import org.openapitools.client.models.ProductAdd200Response
import org.openapitools.client.models.ProductAddBatch
import org.openapitools.client.models.ProductAttributeValueSet200Response
import org.openapitools.client.models.ProductAttributeValueUnset200Response
import org.openapitools.client.models.ProductChildItemFind200Response
import org.openapitools.client.models.ProductChildItemInfo200Response
import org.openapitools.client.models.ProductCount200Response
import org.openapitools.client.models.ProductCurrencyAdd200Response
import org.openapitools.client.models.ProductDeleteBatch
import org.openapitools.client.models.ProductFind200Response
import org.openapitools.client.models.ProductImageAdd
import org.openapitools.client.models.ProductImageAdd200Response
import org.openapitools.client.models.ProductImageUpdate200Response
import org.openapitools.client.models.ProductInfo200Response
import org.openapitools.client.models.ProductManufacturerAdd200Response
import org.openapitools.client.models.ProductOptionAdd
import org.openapitools.client.models.ProductOptionAdd200Response
import org.openapitools.client.models.ProductOptionAssign200Response
import org.openapitools.client.models.ProductOptionValueAdd200Response
import org.openapitools.client.models.ProductOptionValueAssign200Response
import org.openapitools.client.models.ProductPriceAdd
import org.openapitools.client.models.ProductPriceUpdate
import org.openapitools.client.models.ProductTaxAdd
import org.openapitools.client.models.ProductTaxAdd200Response
import org.openapitools.client.models.ProductUpdate
import org.openapitools.client.models.ProductUpdateBatch
import org.openapitools.client.models.ProductVariantAdd
import org.openapitools.client.models.ProductVariantAdd200Response
import org.openapitools.client.models.ProductVariantAddBatch
import org.openapitools.client.models.ProductVariantCount200Response
import org.openapitools.client.models.ProductVariantDeleteBatch
import org.openapitools.client.models.ProductVariantImageAdd
import org.openapitools.client.models.ProductVariantImageAdd200Response
import org.openapitools.client.models.ProductVariantList200Response
import org.openapitools.client.models.ProductVariantPriceAdd
import org.openapitools.client.models.ProductVariantPriceUpdate
import org.openapitools.client.models.ProductVariantUpdate
import org.openapitools.client.models.ProductVariantUpdateBatch

class ProductApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ProductApi
        //val apiInstance = ProductApi()

        // to test productAdd
        should("test productAdd") {
            // uncomment below to test productAdd
            //val productAdd : ProductAdd =  // ProductAdd | 
            //val result : ProductAdd200Response = apiInstance.productAdd(productAdd)
            //result shouldBe ("TODO")
        }

        // to test productAddBatch
        should("test productAddBatch") {
            // uncomment below to test productAddBatch
            //val productAddBatch : ProductAddBatch =  // ProductAddBatch | 
            //val result : CategoryAddBatch200Response = apiInstance.productAddBatch(productAddBatch)
            //result shouldBe ("TODO")
        }

        // to test productAttributeList
        should("test productAttributeList") {
            // uncomment below to test productAttributeList
            //val productId : kotlin.String = 10 // kotlin.String | Retrieves attributes specified by product id
            //val attributeId : kotlin.String = 156 // kotlin.String | Retrieves info for specified attribute_id
            //val variantId : kotlin.String = 45 // kotlin.String | Defines product's variants specified by variant id
            //val pageCursor : kotlin.String =  // kotlin.String | Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
            //val start : kotlin.Int = 0 // kotlin.Int | This parameter sets the number from which you want to get entities
            //val count : kotlin.Int = 20 // kotlin.Int | This parameter sets the entity amount that has to be retrieved. Max allowed count=250
            //val attributeGroupId : kotlin.String = 202 // kotlin.String | Filter by attribute_group_id
            //val setName : kotlin.String = Shoes // kotlin.String | Retrieves attributes specified by set_name in Magento
            //val langId : kotlin.String = 3 // kotlin.String | Retrieves attributes specified by language id
            //val storeId : kotlin.String = 1 // kotlin.String | Retrieves attributes specified by store id
            //val sortBy : kotlin.String = value // kotlin.String | Set field to sort by
            //val sortDirection : kotlin.String = asc // kotlin.String | Set sorting direction
            //val params : kotlin.String = attribute_id,name // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val responseFields : kotlin.String = {pagination,result{attribute}} // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val exclude : kotlin.String = attribute_id,name // kotlin.String | Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
            //val result : ModelResponseProductAttributeList = apiInstance.productAttributeList(productId, attributeId, variantId, pageCursor, start, count, attributeGroupId, setName, langId, storeId, sortBy, sortDirection, params, responseFields, exclude)
            //result shouldBe ("TODO")
        }

        // to test productAttributeValueSet
        should("test productAttributeValueSet") {
            // uncomment below to test productAttributeValueSet
            //val productId : kotlin.String = 10 // kotlin.String | Defines product id where the attribute should be added
            //val attributeId : kotlin.String = 156 // kotlin.String | Filter by attribute_id
            //val attributeGroupId : kotlin.String = 202 // kotlin.String | Filter by attribute_group_id
            //val attributeName : kotlin.String = Color // kotlin.String | Define attribute name
            //val `value` : kotlin.String = Red // kotlin.String | Define attribute value
            //val valueId : kotlin.Int = 22 // kotlin.Int | Define attribute value id
            //val langId : kotlin.String = 3 // kotlin.String | Language id
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val result : ProductAttributeValueSet200Response = apiInstance.productAttributeValueSet(productId, attributeId, attributeGroupId, attributeName, `value`, valueId, langId, storeId)
            //result shouldBe ("TODO")
        }

        // to test productAttributeValueUnset
        should("test productAttributeValueUnset") {
            // uncomment below to test productAttributeValueUnset
            //val productId : kotlin.String = 10 // kotlin.String | Product id
            //val attributeId : kotlin.String = 156 // kotlin.String | Attribute Id
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val includeDefault : kotlin.Boolean = true // kotlin.Boolean | Boolean, whether or not to unset default value of the attribute, if applicable
            //val reindex : kotlin.Boolean = false // kotlin.Boolean | Is reindex required
            //val clearCache : kotlin.Boolean = false // kotlin.Boolean | Is cache clear required
            //val result : ProductAttributeValueUnset200Response = apiInstance.productAttributeValueUnset(productId, attributeId, storeId, includeDefault, reindex, clearCache)
            //result shouldBe ("TODO")
        }

        // to test productBrandList
        should("test productBrandList") {
            // uncomment below to test productBrandList
            //val start : kotlin.Int = 0 // kotlin.Int | This parameter sets the number from which you want to get entities
            //val count : kotlin.Int = 20 // kotlin.Int | This parameter sets the entity amount that has to be retrieved. Max allowed count=250
            //val pageCursor : kotlin.String =  // kotlin.String | Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
            //val params : kotlin.String = id,model,price,images // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val brandIds : kotlin.String = 4,5 // kotlin.String | Retrieves brands specified by brand ids
            //val exclude : kotlin.String = false // kotlin.String | Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
            //val categoryId : kotlin.String = 6 // kotlin.String | Retrieves product brands specified by category id
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val langId : kotlin.String = 3 // kotlin.String | Language id
            //val createdFrom : kotlin.String = 2010-07-29 13:45:52 // kotlin.String | Retrieve entities from their creation date
            //val createdTo : kotlin.String = 2100-08-29 13:45:52 // kotlin.String | Retrieve entities to their creation date
            //val modifiedFrom : kotlin.String = 2010-07-29 13:45:52 // kotlin.String | Retrieve entities from their modification date
            //val modifiedTo : kotlin.String = 2100-08-29 13:45:52 // kotlin.String | Retrieve entities to their modification date
            //val parentId : kotlin.String = 6 // kotlin.String | Retrieves brands specified by parent id
            //val responseFields : kotlin.String = {return_code,return_message,pagination,result} // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val findWhere : kotlin.String = name // kotlin.String | Entity search that is specified by the comma-separated unique fields
            //val findValue : kotlin.String = Phone // kotlin.String | Entity search that is specified by some value
            //val result : ModelResponseProductBrandList = apiInstance.productBrandList(start, count, pageCursor, params, brandIds, exclude, categoryId, storeId, langId, createdFrom, createdTo, modifiedFrom, modifiedTo, parentId, responseFields, findWhere, findValue)
            //result shouldBe ("TODO")
        }

        // to test productChildItemFind
        should("test productChildItemFind") {
            // uncomment below to test productChildItemFind
            //val findValue : kotlin.String = bundled-item-123- // kotlin.String | Entity search that is specified by some value
            //val findWhere : kotlin.String = sku // kotlin.String | Entity search that is specified by the comma-separated unique fields
            //val findParams : kotlin.String = regex // kotlin.String | Entity search that is specified by comma-separated parameters
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val result : ProductChildItemFind200Response = apiInstance.productChildItemFind(findValue, findWhere, findParams, storeId)
            //result shouldBe ("TODO")
        }

        // to test productChildItemInfo
        should("test productChildItemInfo") {
            // uncomment below to test productChildItemInfo
            //val productId : kotlin.String = 10 // kotlin.String | Filter by parent product id
            //val id : kotlin.String = 10 // kotlin.String | Entity id
            //val params : kotlin.String = id,model,price,images // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val responseFields : kotlin.String = {result{id,parent_id,sku,upc,images,combination}} // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val exclude : kotlin.String = false // kotlin.String | Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val langId : kotlin.String = 3 // kotlin.String | Language id
            //val currencyId : kotlin.String = usd // kotlin.String | Currency Id
            //val useLatestApiVersion : kotlin.Boolean = true // kotlin.Boolean | Use the latest platform API version
            //val result : ProductChildItemInfo200Response = apiInstance.productChildItemInfo(productId, id, params, responseFields, exclude, storeId, langId, currencyId, useLatestApiVersion)
            //result shouldBe ("TODO")
        }

        // to test productChildItemList
        should("test productChildItemList") {
            // uncomment below to test productChildItemList
            //val pageCursor : kotlin.String =  // kotlin.String | Used to retrieve products child items via cursor-based pagination (it can't be used with any other filtering parameter)
            //val start : kotlin.Int = 0 // kotlin.Int | This parameter sets the number from which you want to get entities
            //val count : kotlin.Int = 20 // kotlin.Int | This parameter sets the entity amount that has to be retrieved. Max allowed count=250
            //val params : kotlin.String = id,model,price,images // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val responseFields : kotlin.String = {result{children{id,parent_id,sku,upc,images,combination}}} // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val exclude : kotlin.String = false // kotlin.String | Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
            //val createdFrom : kotlin.String = 2010-07-29 13:45:52 // kotlin.String | Retrieve entities from their creation date
            //val createdTo : kotlin.String = 2100-08-29 13:45:52 // kotlin.String | Retrieve entities to their creation date
            //val modifiedFrom : kotlin.String = 2010-07-29 13:45:52 // kotlin.String | Retrieve entities from their modification date
            //val modifiedTo : kotlin.String = 2100-08-29 13:45:52 // kotlin.String | Retrieve entities to their modification date
            //val productId : kotlin.String = 10 // kotlin.String | Filter by parent product id
            //val productIds : kotlin.String = 4,5 // kotlin.String | Filter by parent product ids
            //val sku : kotlin.String = bag_01 // kotlin.String | Filter by products variant's sku
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val langId : kotlin.String = 3 // kotlin.String | Language id
            //val currencyId : kotlin.String = usd // kotlin.String | Currency Id
            //val availSale : kotlin.Boolean = false // kotlin.Boolean | Specifies the set of available/not available products for sale
            //val findValue : kotlin.String = bundled-item-123- // kotlin.String | Entity search that is specified by some value
            //val findWhere : kotlin.String = sku // kotlin.String | Child products search that is specified by field
            //val reportRequestId : kotlin.String = 105245017661 // kotlin.String | Report request id
            //val disableReportCache : kotlin.Boolean = false // kotlin.Boolean | Disable report cache for current request
            //val useLatestApiVersion : kotlin.Boolean = true // kotlin.Boolean | Use the latest platform API version
            //val returnGlobal : kotlin.Boolean = false // kotlin.Boolean | Determines the type of products to be returned. If set to 'true', only global products will be returned; if set to 'false', only local products will be returned.
            //val result : ModelResponseProductChildItemList = apiInstance.productChildItemList(pageCursor, start, count, params, responseFields, exclude, createdFrom, createdTo, modifiedFrom, modifiedTo, productId, productIds, sku, storeId, langId, currencyId, availSale, findValue, findWhere, reportRequestId, disableReportCache, useLatestApiVersion, returnGlobal)
            //result shouldBe ("TODO")
        }

        // to test productCount
        should("test productCount") {
            // uncomment below to test productCount
            //val categoryId : kotlin.String = 6 // kotlin.String | Counts products specified by category id
            //val createdFrom : kotlin.String = 2010-07-29 13:45:52 // kotlin.String | Retrieve entities from their creation date
            //val createdTo : kotlin.String = 2100-08-29 13:45:52 // kotlin.String | Retrieve entities to their creation date
            //val modifiedFrom : kotlin.String = 2010-07-29 13:45:52 // kotlin.String | Retrieve entities from their modification date
            //val modifiedTo : kotlin.String = 2100-08-29 13:45:52 // kotlin.String | Retrieve entities to their modification date
            //val availView : kotlin.Boolean = true // kotlin.Boolean | Specifies the set of visible/invisible products
            //val availSale : kotlin.Boolean = false // kotlin.Boolean | Specifies the set of available/not available products for sale
            //val storeId : kotlin.String = 1 // kotlin.String | Counts products specified by store id
            //val langId : kotlin.String = 3 // kotlin.String | Counts products specified by language id
            //val productIds : kotlin.String = 4,5 // kotlin.String | Counts products specified by product ids
            //val sinceId : kotlin.String = 56 // kotlin.String | Retrieve entities starting from the specified id.
            //val reportRequestId : kotlin.String = 105245017661 // kotlin.String | Report request id
            //val disableReportCache : kotlin.Boolean = false // kotlin.Boolean | Disable report cache for current request
            //val brandName : kotlin.String = Abidas // kotlin.String | Retrieves brands specified by brand name
            //val productAttributes : kotlin.collections.List<kotlin.String> = product_attributes[0][attribute_id]=132&product_attributes[0][values][0]=custom value 1&product_attributes[0][values][1]=custom value 2 // kotlin.collections.List<kotlin.String> | Defines product attributes
            //val status : kotlin.String = disabled // kotlin.String | Defines product's status
            //val type : kotlin.String = simple // kotlin.String | Defines products's type
            //val findValue : kotlin.String = Phone // kotlin.String | Entity search that is specified by some value
            //val findWhere : kotlin.String = name // kotlin.String | Counts products that are searched specified by field
            //val useLatestApiVersion : kotlin.Boolean = true // kotlin.Boolean | Use the latest platform API version
            //val returnGlobal : kotlin.Boolean = false // kotlin.Boolean | Determines the type of products to be returned. If set to 'true', only global products will be returned; if set to 'false', only local products will be returned.
            //val categoriesIds : kotlin.String = 23,56 // kotlin.String | Defines product add that is specified by comma-separated categories id
            //val result : ProductCount200Response = apiInstance.productCount(categoryId, createdFrom, createdTo, modifiedFrom, modifiedTo, availView, availSale, storeId, langId, productIds, sinceId, reportRequestId, disableReportCache, brandName, productAttributes, status, type, findValue, findWhere, useLatestApiVersion, returnGlobal, categoriesIds)
            //result shouldBe ("TODO")
        }

        // to test productCurrencyAdd
        should("test productCurrencyAdd") {
            // uncomment below to test productCurrencyAdd
            //val iso3 : kotlin.String = USD // kotlin.String | Specifies standardized currency code
            //val rate : java.math.BigDecimal = 1 // java.math.BigDecimal | Defines the numerical identifier against to the major currency
            //val name : kotlin.String = US Dollar // kotlin.String | Defines currency's name
            //val avail : kotlin.Boolean = false // kotlin.Boolean | Specifies whether the currency is available
            //val symbolLeft : kotlin.String = $ // kotlin.String | Defines the symbol that is located before the currency
            //val symbolRight : kotlin.String = грн // kotlin.String | Defines the symbol that is located after the currency
            //val default : kotlin.Boolean = true // kotlin.Boolean | Specifies currency's default meaning
            //val result : ProductCurrencyAdd200Response = apiInstance.productCurrencyAdd(iso3, rate, name, avail, symbolLeft, symbolRight, default)
            //result shouldBe ("TODO")
        }

        // to test productCurrencyList
        should("test productCurrencyList") {
            // uncomment below to test productCurrencyList
            //val start : kotlin.Int = 0 // kotlin.Int | This parameter sets the number from which you want to get entities
            //val count : kotlin.Int = 20 // kotlin.Int | This parameter sets the entity amount that has to be retrieved. Max allowed count=250
            //val params : kotlin.String = name,iso3,default,avail // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val pageCursor : kotlin.String =  // kotlin.String | Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
            //val exclude : kotlin.String = name,iso3,default,avail // kotlin.String | Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
            //val responseFields : kotlin.String = {return_message,pagination,result{currency}} // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val default : kotlin.Boolean = true // kotlin.Boolean | Specifies the set of default/not default currencies
            //val avail : kotlin.Boolean = false // kotlin.Boolean | Specifies the set of available/not available currencies
            //val result : ModelResponseProductCurrencyList = apiInstance.productCurrencyList(start, count, params, pageCursor, exclude, responseFields, default, avail)
            //result shouldBe ("TODO")
        }

        // to test productDelete
        should("test productDelete") {
            // uncomment below to test productDelete
            //val id : kotlin.String = 10 // kotlin.String | Product id that will be removed
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val result : CustomerDelete200Response = apiInstance.productDelete(id, storeId)
            //result shouldBe ("TODO")
        }

        // to test productDeleteBatch
        should("test productDeleteBatch") {
            // uncomment below to test productDeleteBatch
            //val productDeleteBatch : ProductDeleteBatch =  // ProductDeleteBatch | 
            //val result : CategoryAddBatch200Response = apiInstance.productDeleteBatch(productDeleteBatch)
            //result shouldBe ("TODO")
        }

        // to test productFields
        should("test productFields") {
            // uncomment below to test productFields
            //val result : CartConfigUpdate200Response = apiInstance.productFields()
            //result shouldBe ("TODO")
        }

        // to test productFind
        should("test productFind") {
            // uncomment below to test productFind
            //val findValue : kotlin.String = Simple // kotlin.String | Entity search that is specified by some value
            //val findWhere : kotlin.String = name // kotlin.String | Entity search that is specified by the comma-separated unique fields
            //val findParams : kotlin.String = regex // kotlin.String | Entity search that is specified by comma-separated parameters
            //val findWhat : kotlin.String = each // kotlin.String | Parameter's value specifies the entity that has to be found
            //val langId : kotlin.String = 3 // kotlin.String | Search products specified by language id
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val result : ProductFind200Response = apiInstance.productFind(findValue, findWhere, findParams, findWhat, langId, storeId)
            //result shouldBe ("TODO")
        }

        // to test productImageAdd
        should("test productImageAdd") {
            // uncomment below to test productImageAdd
            //val productImageAdd : ProductImageAdd =  // ProductImageAdd | 
            //val result : ProductImageAdd200Response = apiInstance.productImageAdd(productImageAdd)
            //result shouldBe ("TODO")
        }

        // to test productImageDelete
        should("test productImageDelete") {
            // uncomment below to test productImageDelete
            //val productId : kotlin.String = 10 // kotlin.String | Defines product id where the image should be deleted
            //val id : kotlin.String = 10 // kotlin.String | Entity id
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val result : AttributeDelete200Response = apiInstance.productImageDelete(productId, id, storeId)
            //result shouldBe ("TODO")
        }

        // to test productImageUpdate
        should("test productImageUpdate") {
            // uncomment below to test productImageUpdate
            //val productId : kotlin.String = 10 // kotlin.String | Defines product id where the image should be updated
            //val id : kotlin.String = 10 // kotlin.String | Defines image update specified by image id
            //val variantIds : kotlin.String = 1,2,3,4,5 // kotlin.String | Defines product's variants ids
            //val imageName : kotlin.String = data/product/main/product_69_bag-gray.png // kotlin.String | Defines image's name
            //val type : kotlin.String = thumbnail // kotlin.String | Defines image's types that are specified by comma-separated list
            //val label : kotlin.String = This cool image // kotlin.String | Defines alternative text that has to be attached to the picture
            //val position : kotlin.Int = 5 // kotlin.Int | Defines image’s position in the list
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val langId : kotlin.String = 3 // kotlin.String | Language id
            //val hidden : kotlin.Boolean = true // kotlin.Boolean | Define is hide image
            //val result : ProductImageUpdate200Response = apiInstance.productImageUpdate(productId, id, variantIds, imageName, type, label, position, storeId, langId, hidden)
            //result shouldBe ("TODO")
        }

        // to test productInfo
        should("test productInfo") {
            // uncomment below to test productInfo
            //val id : kotlin.String = 10 // kotlin.String | Retrieves product's info specified by product id
            //val params : kotlin.String = id,model,price,images // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val responseFields : kotlin.String = {result{id,name,price,images}} // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val exclude : kotlin.String = false // kotlin.String | Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
            //val storeId : kotlin.String = 1 // kotlin.String | Retrieves product info specified by store id
            //val langId : kotlin.String = 3 // kotlin.String | Retrieves product info specified by language id
            //val currencyId : kotlin.String = usd // kotlin.String | Currency Id
            //val reportRequestId : kotlin.String = 105245017661 // kotlin.String | Report request id
            //val disableReportCache : kotlin.Boolean = false // kotlin.Boolean | Disable report cache for current request
            //val useLatestApiVersion : kotlin.Boolean = true // kotlin.Boolean | Use the latest platform API version
            //val result : ProductInfo200Response = apiInstance.productInfo(id, params, responseFields, exclude, storeId, langId, currencyId, reportRequestId, disableReportCache, useLatestApiVersion)
            //result shouldBe ("TODO")
        }

        // to test productList
        should("test productList") {
            // uncomment below to test productList
            //val pageCursor : kotlin.String =  // kotlin.String | Used to retrieve products via cursor-based pagination (it can't be used with any other filtering parameter)
            //val start : kotlin.Int = 0 // kotlin.Int | This parameter sets the number from which you want to get entities
            //val count : kotlin.Int = 20 // kotlin.Int | This parameter sets the entity amount that has to be retrieved. Max allowed count=250
            //val params : kotlin.String = id,model,price,images // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val responseFields : kotlin.String = {return_code,pagination,result{product{id,name,price,images}}} // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val exclude : kotlin.String = false // kotlin.String | Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
            //val categoryId : kotlin.String = 6 // kotlin.String | Retrieves products specified by category id
            //val createdFrom : kotlin.String = 2010-07-29 13:45:52 // kotlin.String | Retrieve entities from their creation date
            //val createdTo : kotlin.String = 2100-08-29 13:45:52 // kotlin.String | Retrieve entities to their creation date
            //val modifiedFrom : kotlin.String = 2010-07-29 13:45:52 // kotlin.String | Retrieve entities from their modification date
            //val modifiedTo : kotlin.String = 2100-08-29 13:45:52 // kotlin.String | Retrieve entities to their modification date
            //val availView : kotlin.Boolean = true // kotlin.Boolean | Specifies the set of visible/invisible products
            //val availSale : kotlin.Boolean = false // kotlin.Boolean | Specifies the set of available/not available products for sale
            //val storeId : kotlin.String = 1 // kotlin.String | Retrieves products specified by store id
            //val langId : kotlin.String = 3 // kotlin.String | Retrieves products specified by language id
            //val currencyId : kotlin.String = usd // kotlin.String | Currency Id
            //val productIds : kotlin.String = 4,5 // kotlin.String | Retrieves products specified by product ids
            //val sinceId : kotlin.String = 56 // kotlin.String | Retrieve entities starting from the specified id.
            //val reportRequestId : kotlin.String = 105245017661 // kotlin.String | Report request id
            //val disableReportCache : kotlin.Boolean = false // kotlin.Boolean | Disable report cache for current request
            //val sortBy : kotlin.String = value_id // kotlin.String | Set field to sort by
            //val sortDirection : kotlin.String = asc // kotlin.String | Set sorting direction
            //val sku : kotlin.String = bag_01 // kotlin.String | Filter by product's sku
            //val disableCache : kotlin.Boolean = false // kotlin.Boolean | Disable cache for current request
            //val brandName : kotlin.String = Abidas // kotlin.String | Retrieves brands specified by brand name
            //val productAttributes : kotlin.collections.List<kotlin.String> = product_attributes[0][attribute_id]=132&product_attributes[0][values][0]=custom value 1&product_attributes[0][values][1]=custom value 2 // kotlin.collections.List<kotlin.String> | Defines product attributes
            //val status : kotlin.String = disabled // kotlin.String | Defines product's status
            //val type : kotlin.String = simple // kotlin.String | Defines products's type
            //val findValue : kotlin.String = Phone // kotlin.String | Entity search that is specified by some value
            //val findWhere : kotlin.String = name // kotlin.String | Product search that is specified by field
            //val useLatestApiVersion : kotlin.Boolean = true // kotlin.Boolean | Use the latest platform API version
            //val returnGlobal : kotlin.Boolean = false // kotlin.Boolean | Determines the type of products to be returned. If set to 'true', only global products will be returned; if set to 'false', only local products will be returned.
            //val categoriesIds : kotlin.String = 23,56 // kotlin.String | Retrieves products specified by categories ids
            //val result : ModelResponseProductList = apiInstance.productList(pageCursor, start, count, params, responseFields, exclude, categoryId, createdFrom, createdTo, modifiedFrom, modifiedTo, availView, availSale, storeId, langId, currencyId, productIds, sinceId, reportRequestId, disableReportCache, sortBy, sortDirection, sku, disableCache, brandName, productAttributes, status, type, findValue, findWhere, useLatestApiVersion, returnGlobal, categoriesIds)
            //result shouldBe ("TODO")
        }

        // to test productManufacturerAdd
        should("test productManufacturerAdd") {
            // uncomment below to test productManufacturerAdd
            //val productId : kotlin.String = 10 // kotlin.String | Defines products specified by product id
            //val manufacturer : kotlin.String = Samsung // kotlin.String | Defines product’s manufacturer's name
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val result : ProductManufacturerAdd200Response = apiInstance.productManufacturerAdd(productId, manufacturer, storeId)
            //result shouldBe ("TODO")
        }

        // to test productOptionAdd
        should("test productOptionAdd") {
            // uncomment below to test productOptionAdd
            //val productOptionAdd : ProductOptionAdd =  // ProductOptionAdd | 
            //val result : ProductOptionAdd200Response = apiInstance.productOptionAdd(productOptionAdd)
            //result shouldBe ("TODO")
        }

        // to test productOptionAssign
        should("test productOptionAssign") {
            // uncomment below to test productOptionAssign
            //val productId : kotlin.String = 10 // kotlin.String | Defines product id where the option should be assigned
            //val optionId : kotlin.String = 5 // kotlin.String | Defines option id which has to be assigned
            //val required : kotlin.Boolean = true // kotlin.Boolean | Defines if the option is required
            //val sortOrder : kotlin.Int = 2 // kotlin.Int | Sort number in the list
            //val optionValues : kotlin.String = green,black,yellow // kotlin.String | Defines option values that has to be assigned
            //val clearCache : kotlin.Boolean = false // kotlin.Boolean | Is cache clear required
            //val result : ProductOptionAssign200Response = apiInstance.productOptionAssign(productId, optionId, required, sortOrder, optionValues, clearCache)
            //result shouldBe ("TODO")
        }

        // to test productOptionDelete
        should("test productOptionDelete") {
            // uncomment below to test productOptionDelete
            //val optionId : kotlin.String = 5 // kotlin.String | Defines option id that should be deleted
            //val productId : kotlin.String = 10 // kotlin.String | Defines product id where the option should be deleted
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val result : AttributeDelete200Response = apiInstance.productOptionDelete(optionId, productId, storeId)
            //result shouldBe ("TODO")
        }

        // to test productOptionList
        should("test productOptionList") {
            // uncomment below to test productOptionList
            //val start : kotlin.Int = 0 // kotlin.Int | This parameter sets the number from which you want to get entities
            //val count : kotlin.Int = 20 // kotlin.Int | This parameter sets the entity amount that has to be retrieved. Max allowed count=250
            //val params : kotlin.String = id,name,sort_order // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val exclude : kotlin.String = id,name,sort_order // kotlin.String | Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
            //val responseFields : kotlin.String = {return_code,return_message,pagination,result} // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val productId : kotlin.String = 10 // kotlin.String | Retrieves products' options specified by product id
            //val langId : kotlin.String = 3 // kotlin.String | Language id
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val result : ModelResponseProductOptionList = apiInstance.productOptionList(start, count, params, exclude, responseFields, productId, langId, storeId)
            //result shouldBe ("TODO")
        }

        // to test productOptionValueAdd
        should("test productOptionValueAdd") {
            // uncomment below to test productOptionValueAdd
            //val productId : kotlin.String = 10 // kotlin.String | Defines product id where the option value should be added
            //val optionId : kotlin.String = 5 // kotlin.String | Defines option id where the value has to be added
            //val optionValue : kotlin.String = green // kotlin.String | Defines option value that has to be added
            //val sortOrder : kotlin.Int = 2 // kotlin.Int | Sort number in the list
            //val displayValue : kotlin.String = value // kotlin.String | Defines the value that will be displayed for the option value
            //val isDefault : kotlin.Boolean = true // kotlin.Boolean | Defines as a default
            //val clearCache : kotlin.Boolean = false // kotlin.Boolean | Is cache clear required
            //val result : ProductOptionValueAdd200Response = apiInstance.productOptionValueAdd(productId, optionId, optionValue, sortOrder, displayValue, isDefault, clearCache)
            //result shouldBe ("TODO")
        }

        // to test productOptionValueAssign
        should("test productOptionValueAssign") {
            // uncomment below to test productOptionValueAssign
            //val productOptionId : kotlin.Int = 5 // kotlin.Int | Defines product's option id where the value has to be assigned
            //val optionValueId : kotlin.String = 45 // kotlin.String | Defines value id that has to be assigned
            //val clearCache : kotlin.Boolean = false // kotlin.Boolean | Is cache clear required
            //val result : ProductOptionValueAssign200Response = apiInstance.productOptionValueAssign(productOptionId, optionValueId, clearCache)
            //result shouldBe ("TODO")
        }

        // to test productOptionValueDelete
        should("test productOptionValueDelete") {
            // uncomment below to test productOptionValueDelete
            //val optionId : kotlin.String = 5 // kotlin.String | Defines option id where the value should be deleted
            //val optionValueId : kotlin.String = 45 // kotlin.String | Defines option value id that should be deleted
            //val productId : kotlin.String = 10 // kotlin.String | Defines product id where the option value should be deleted
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val result : AttributeDelete200Response = apiInstance.productOptionValueDelete(optionId, optionValueId, productId, storeId)
            //result shouldBe ("TODO")
        }

        // to test productOptionValueUpdate
        should("test productOptionValueUpdate") {
            // uncomment below to test productOptionValueUpdate
            //val productId : kotlin.String = 10 // kotlin.String | Defines product id where the option value should be updated
            //val optionId : kotlin.String = 5 // kotlin.String | Defines option id where the value has to be updated
            //val optionValueId : kotlin.String = 45 // kotlin.String | Defines value id that has to be assigned
            //val optionValue : kotlin.String = green // kotlin.String | Defines option value that has to be added
            //val price : java.math.BigDecimal = 99.9 // java.math.BigDecimal | Defines new product option price
            //val quantity : java.math.BigDecimal = 6 // java.math.BigDecimal | Defines new products' options quantity
            //val displayValue : kotlin.String = value // kotlin.String | Defines the value that will be displayed for the option value
            //val clearCache : kotlin.Boolean = false // kotlin.Boolean | Is cache clear required
            //val result : AccountConfigUpdate200Response = apiInstance.productOptionValueUpdate(productId, optionId, optionValueId, optionValue, price, quantity, displayValue, clearCache)
            //result shouldBe ("TODO")
        }

        // to test productPriceAdd
        should("test productPriceAdd") {
            // uncomment below to test productPriceAdd
            //val productPriceAdd : ProductPriceAdd =  // ProductPriceAdd | 
            //val result : CartValidate200Response = apiInstance.productPriceAdd(productPriceAdd)
            //result shouldBe ("TODO")
        }

        // to test productPriceDelete
        should("test productPriceDelete") {
            // uncomment below to test productPriceDelete
            //val productId : kotlin.String = 10 // kotlin.String | Defines the product where the price has to be deleted
            //val groupPrices : kotlin.String = group_prices=5,8,9 // kotlin.String | Defines product's group prices
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val result : AttributeDelete200Response = apiInstance.productPriceDelete(productId, groupPrices, storeId)
            //result shouldBe ("TODO")
        }

        // to test productPriceUpdate
        should("test productPriceUpdate") {
            // uncomment below to test productPriceUpdate
            //val productPriceUpdate : ProductPriceUpdate =  // ProductPriceUpdate | 
            //val result : AccountConfigUpdate200Response = apiInstance.productPriceUpdate(productPriceUpdate)
            //result shouldBe ("TODO")
        }

        // to test productReviewList
        should("test productReviewList") {
            // uncomment below to test productReviewList
            //val productId : kotlin.String = 10 // kotlin.String | Product id
            //val start : kotlin.Int = 0 // kotlin.Int | This parameter sets the number from which you want to get entities
            //val pageCursor : kotlin.String =  // kotlin.String | Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
            //val count : kotlin.Int = 20 // kotlin.Int | This parameter sets the entity amount that has to be retrieved. Max allowed count=250
            //val ids : kotlin.String = 24,25 // kotlin.String | Retrieves reviews specified by ids
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val status : kotlin.String = disabled // kotlin.String | Defines status
            //val params : kotlin.String = id,model,price,images // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val exclude : kotlin.String = false // kotlin.String | Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
            //val responseFields : kotlin.String = {return_code,return_message,pagination,result} // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val result : ModelResponseProductReviewList = apiInstance.productReviewList(productId, start, pageCursor, count, ids, storeId, status, params, exclude, responseFields)
            //result shouldBe ("TODO")
        }

        // to test productStoreAssign
        should("test productStoreAssign") {
            // uncomment below to test productStoreAssign
            //val productId : kotlin.String = 10 // kotlin.String | Defines id of the product which should be assigned to a store
            //val storeId : kotlin.String = 1 // kotlin.String | Defines id of the store product should be assigned to
            //val result : AccountConfigUpdate200Response = apiInstance.productStoreAssign(productId, storeId)
            //result shouldBe ("TODO")
        }

        // to test productTaxAdd
        should("test productTaxAdd") {
            // uncomment below to test productTaxAdd
            //val productTaxAdd : ProductTaxAdd =  // ProductTaxAdd | 
            //val result : ProductTaxAdd200Response = apiInstance.productTaxAdd(productTaxAdd)
            //result shouldBe ("TODO")
        }

        // to test productUpdate
        should("test productUpdate") {
            // uncomment below to test productUpdate
            //val productUpdate : ProductUpdate =  // ProductUpdate | 
            //val result : AccountConfigUpdate200Response = apiInstance.productUpdate(productUpdate)
            //result shouldBe ("TODO")
        }

        // to test productUpdateBatch
        should("test productUpdateBatch") {
            // uncomment below to test productUpdateBatch
            //val productUpdateBatch : ProductUpdateBatch =  // ProductUpdateBatch | 
            //val result : CategoryAddBatch200Response = apiInstance.productUpdateBatch(productUpdateBatch)
            //result shouldBe ("TODO")
        }

        // to test productVariantAdd
        should("test productVariantAdd") {
            // uncomment below to test productVariantAdd
            //val productVariantAdd : ProductVariantAdd =  // ProductVariantAdd | 
            //val result : ProductVariantAdd200Response = apiInstance.productVariantAdd(productVariantAdd)
            //result shouldBe ("TODO")
        }

        // to test productVariantAddBatch
        should("test productVariantAddBatch") {
            // uncomment below to test productVariantAddBatch
            //val productVariantAddBatch : ProductVariantAddBatch =  // ProductVariantAddBatch | 
            //val result : CategoryAddBatch200Response = apiInstance.productVariantAddBatch(productVariantAddBatch)
            //result shouldBe ("TODO")
        }

        // to test productVariantCount
        should("test productVariantCount") {
            // uncomment below to test productVariantCount
            //val productId : kotlin.String = 10 // kotlin.String | Retrieves products' variants specified by product id
            //val createdFrom : kotlin.String = 2010-07-29 13:45:52 // kotlin.String | Retrieve entities from their creation date
            //val createdTo : kotlin.String = 2100-08-29 13:45:52 // kotlin.String | Retrieve entities to their creation date
            //val modifiedFrom : kotlin.String = 2010-07-29 13:45:52 // kotlin.String | Retrieve entities from their modification date
            //val modifiedTo : kotlin.String = 2100-08-29 13:45:52 // kotlin.String | Retrieve entities to their modification date
            //val categoryId : kotlin.String = 6 // kotlin.String | Counts products’ variants specified by category id
            //val storeId : kotlin.String = 1 // kotlin.String | Retrieves variants specified by store id
            //val result : ProductVariantCount200Response = apiInstance.productVariantCount(productId, createdFrom, createdTo, modifiedFrom, modifiedTo, categoryId, storeId)
            //result shouldBe ("TODO")
        }

        // to test productVariantDelete
        should("test productVariantDelete") {
            // uncomment below to test productVariantDelete
            //val id : kotlin.String = 10 // kotlin.String | Defines variant removal, specified by variant id
            //val productId : kotlin.String = 10 // kotlin.String | Defines product's id where the variant has to be deleted
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val result : AttributeValueDelete200Response = apiInstance.productVariantDelete(id, productId, storeId)
            //result shouldBe ("TODO")
        }

        // to test productVariantDeleteBatch
        should("test productVariantDeleteBatch") {
            // uncomment below to test productVariantDeleteBatch
            //val productVariantDeleteBatch : ProductVariantDeleteBatch =  // ProductVariantDeleteBatch | 
            //val result : CategoryAddBatch200Response = apiInstance.productVariantDeleteBatch(productVariantDeleteBatch)
            //result shouldBe ("TODO")
        }

        // to test productVariantImageAdd
        should("test productVariantImageAdd") {
            // uncomment below to test productVariantImageAdd
            //val productVariantImageAdd : ProductVariantImageAdd =  // ProductVariantImageAdd | 
            //val result : ProductVariantImageAdd200Response = apiInstance.productVariantImageAdd(productVariantImageAdd)
            //result shouldBe ("TODO")
        }

        // to test productVariantImageDelete
        should("test productVariantImageDelete") {
            // uncomment below to test productVariantImageDelete
            //val productId : kotlin.String = 10 // kotlin.String | Defines product id where the variant image should be deleted
            //val productVariantId : kotlin.String = 45 // kotlin.String | Defines product's variants specified by variant id
            //val id : kotlin.String = 10 // kotlin.String | Entity id
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val result : AttributeDelete200Response = apiInstance.productVariantImageDelete(productId, productVariantId, id, storeId)
            //result shouldBe ("TODO")
        }

        // to test productVariantInfo
        should("test productVariantInfo") {
            // uncomment below to test productVariantInfo
            //val id : kotlin.String = 10 // kotlin.String | Retrieves variant's info specified by variant id
            //val params : kotlin.String = id,model,price,images // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val exclude : kotlin.String = false // kotlin.String | Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
            //val storeId : kotlin.String = 1 // kotlin.String | Retrieves variant info specified by store id
            //val result : ProductInfo200Response = apiInstance.productVariantInfo(id, params, exclude, storeId)
            //result shouldBe ("TODO")
        }

        // to test productVariantList
        should("test productVariantList") {
            // uncomment below to test productVariantList
            //val start : kotlin.Int = 0 // kotlin.Int | This parameter sets the number from which you want to get entities
            //val count : kotlin.Int = 20 // kotlin.Int | This parameter sets the entity amount that has to be retrieved. Max allowed count=250
            //val params : kotlin.String = id,model,price,images // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val exclude : kotlin.String = false // kotlin.String | Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
            //val createdFrom : kotlin.String = 2010-07-29 13:45:52 // kotlin.String | Retrieve entities from their creation date
            //val createdTo : kotlin.String = 2100-08-29 13:45:52 // kotlin.String | Retrieve entities to their creation date
            //val modifiedFrom : kotlin.String = 2010-07-29 13:45:52 // kotlin.String | Retrieve entities from their modification date
            //val modifiedTo : kotlin.String = 2100-08-29 13:45:52 // kotlin.String | Retrieve entities to their modification date
            //val categoryId : kotlin.String = 6 // kotlin.String | Retrieves products’ variants specified by category id
            //val productId : kotlin.String = 10 // kotlin.String | Retrieves products' variants specified by product id
            //val storeId : kotlin.String = 1 // kotlin.String | Retrieves variants specified by store id
            //val result : ProductVariantList200Response = apiInstance.productVariantList(start, count, params, exclude, createdFrom, createdTo, modifiedFrom, modifiedTo, categoryId, productId, storeId)
            //result shouldBe ("TODO")
        }

        // to test productVariantPriceAdd
        should("test productVariantPriceAdd") {
            // uncomment below to test productVariantPriceAdd
            //val productVariantPriceAdd : ProductVariantPriceAdd =  // ProductVariantPriceAdd | 
            //val result : CartValidate200Response = apiInstance.productVariantPriceAdd(productVariantPriceAdd)
            //result shouldBe ("TODO")
        }

        // to test productVariantPriceDelete
        should("test productVariantPriceDelete") {
            // uncomment below to test productVariantPriceDelete
            //val id : kotlin.String = 10 // kotlin.String | Defines the variant where the price has to be deleted
            //val productId : kotlin.String = 10 // kotlin.String | Product id
            //val groupPrices : kotlin.String = group_prices=6,8,9 // kotlin.String | Defines variants's group prices
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val result : AttributeDelete200Response = apiInstance.productVariantPriceDelete(id, productId, groupPrices, storeId)
            //result shouldBe ("TODO")
        }

        // to test productVariantPriceUpdate
        should("test productVariantPriceUpdate") {
            // uncomment below to test productVariantPriceUpdate
            //val productVariantPriceUpdate : ProductVariantPriceUpdate =  // ProductVariantPriceUpdate | 
            //val result : AccountConfigUpdate200Response = apiInstance.productVariantPriceUpdate(productVariantPriceUpdate)
            //result shouldBe ("TODO")
        }

        // to test productVariantUpdate
        should("test productVariantUpdate") {
            // uncomment below to test productVariantUpdate
            //val productVariantUpdate : ProductVariantUpdate =  // ProductVariantUpdate | 
            //val result : AccountConfigUpdate200Response = apiInstance.productVariantUpdate(productVariantUpdate)
            //result shouldBe ("TODO")
        }

        // to test productVariantUpdateBatch
        should("test productVariantUpdateBatch") {
            // uncomment below to test productVariantUpdateBatch
            //val productVariantUpdateBatch : ProductVariantUpdateBatch =  // ProductVariantUpdateBatch | 
            //val result : CategoryAddBatch200Response = apiInstance.productVariantUpdateBatch(productVariantUpdateBatch)
            //result shouldBe ("TODO")
        }

    }
}
