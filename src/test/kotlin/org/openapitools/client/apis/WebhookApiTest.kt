/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.apis.WebhookApi
import org.openapitools.client.models.AttributeDelete200Response
import org.openapitools.client.models.BasketLiveShippingServiceCreate200Response
import org.openapitools.client.models.ProductImageUpdate200Response
import org.openapitools.client.models.WebhookCount200Response
import org.openapitools.client.models.WebhookEvents200Response
import org.openapitools.client.models.WebhookList200Response

class WebhookApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of WebhookApi
        //val apiInstance = WebhookApi()

        // to test webhookCount
        should("test webhookCount") {
            // uncomment below to test webhookCount
            //val entity : kotlin.String = product // kotlin.String | The entity you want to filter webhooks by (e.g. order or product)
            //val action : kotlin.String = add // kotlin.String | The action you want to filter webhooks by (e.g. order or product)
            //val active : kotlin.Boolean = true // kotlin.Boolean | The webhook status you want to filter webhooks by
            //val result : WebhookCount200Response = apiInstance.webhookCount(entity, action, active)
            //result shouldBe ("TODO")
        }

        // to test webhookCreate
        should("test webhookCreate") {
            // uncomment below to test webhookCreate
            //val entity : kotlin.String = product // kotlin.String | Specify the entity that you want to enable webhooks for (e.g product, order, customer, category)
            //val action : kotlin.String = add // kotlin.String | Specify what action (event) will trigger the webhook (e.g add, delete, or update)
            //val paramCallback : kotlin.String = https://example.com/callback // kotlin.String | Callback url that returns shipping rates. It should be able to accept POST requests with json data.
            //val label : kotlin.String = Super webhook // kotlin.String | The name you give to the webhook
            //val fields : kotlin.String = id, name, description // kotlin.String | Fields the webhook should send
            //val active : kotlin.Boolean = true // kotlin.Boolean | Webhook status
            //val langId : kotlin.String = 3 // kotlin.String | Language id
            //val storeId : kotlin.String = 1 // kotlin.String | Defines store id where the webhook should be assigned
            //val result : BasketLiveShippingServiceCreate200Response = apiInstance.webhookCreate(entity, action, paramCallback, label, fields, active, langId, storeId)
            //result shouldBe ("TODO")
        }

        // to test webhookDelete
        should("test webhookDelete") {
            // uncomment below to test webhookDelete
            //val id : kotlin.String = 25 // kotlin.String | Webhook id
            //val result : AttributeDelete200Response = apiInstance.webhookDelete(id)
            //result shouldBe ("TODO")
        }

        // to test webhookEvents
        should("test webhookEvents") {
            // uncomment below to test webhookEvents
            //val result : WebhookEvents200Response = apiInstance.webhookEvents()
            //result shouldBe ("TODO")
        }

        // to test webhookList
        should("test webhookList") {
            // uncomment below to test webhookList
            //val start : kotlin.Int = 0 // kotlin.Int | This parameter sets the number from which you want to get entities
            //val count : kotlin.Int = 20 // kotlin.Int | This parameter sets the entity amount that has to be retrieved. Max allowed count=250
            //val entity : kotlin.String = product // kotlin.String | The entity you want to filter webhooks by (e.g. order or product)
            //val action : kotlin.String = add // kotlin.String | The action you want to filter webhooks by (e.g. add, update, or delete)
            //val active : kotlin.Boolean = true // kotlin.Boolean | The webhook status you want to filter webhooks by
            //val ids : kotlin.String = 3,14,25 // kotlin.String | List of —Åomma-separated webhook ids
            //val params : kotlin.String = id,entity,callback,fields // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val result : WebhookList200Response = apiInstance.webhookList(start, count, entity, action, active, ids, params)
            //result shouldBe ("TODO")
        }

        // to test webhookUpdate
        should("test webhookUpdate") {
            // uncomment below to test webhookUpdate
            //val id : kotlin.String = 25 // kotlin.String | Webhook id
            //val paramCallback : kotlin.String = https://example.com/callback // kotlin.String | Callback url that returns shipping rates. It should be able to accept POST requests with json data.
            //val label : kotlin.String = Super webhook // kotlin.String | The name you give to the webhook
            //val fields : kotlin.String = id, name, description // kotlin.String | Fields the webhook should send
            //val active : kotlin.Boolean = true // kotlin.Boolean | Webhook status
            //val langId : kotlin.String = 3 // kotlin.String | Language id
            //val result : ProductImageUpdate200Response = apiInstance.webhookUpdate(id, paramCallback, label, fields, active, langId)
            //result shouldBe ("TODO")
        }

    }
}
