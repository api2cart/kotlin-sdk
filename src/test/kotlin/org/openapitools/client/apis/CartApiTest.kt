/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.apis.CartApi
import org.openapitools.client.models.AccountCartAdd200Response
import org.openapitools.client.models.AttributeAdd200Response
import org.openapitools.client.models.AttributeDelete200Response
import org.openapitools.client.models.BasketLiveShippingServiceDelete200Response
import org.openapitools.client.models.CartBridge200Response
import org.openapitools.client.models.CartCatalogPriceRulesCount200Response
import org.openapitools.client.models.CartClearCache200Response
import org.openapitools.client.models.CartConfig200Response
import org.openapitools.client.models.CartConfigUpdate
import org.openapitools.client.models.CartConfigUpdate200Response
import org.openapitools.client.models.CartCouponAdd
import org.openapitools.client.models.CartCouponAdd200Response
import org.openapitools.client.models.CartCouponCount200Response
import org.openapitools.client.models.CartCreate
import org.openapitools.client.models.CartDelete200Response
import org.openapitools.client.models.CartDisconnect200Response
import org.openapitools.client.models.CartGiftcardAdd200Response
import org.openapitools.client.models.CartGiftcardCount200Response
import org.openapitools.client.models.CartInfo200Response
import org.openapitools.client.models.CartList200Response
import org.openapitools.client.models.CartMethods200Response
import org.openapitools.client.models.CartPluginList200Response
import org.openapitools.client.models.CartScriptAdd200Response
import org.openapitools.client.models.CartValidate200Response
import org.openapitools.client.models.ModelResponseCartCatalogPriceRulesList
import org.openapitools.client.models.ModelResponseCartCouponList
import org.openapitools.client.models.ModelResponseCartGiftCardList
import org.openapitools.client.models.ModelResponseCartMetaDataList
import org.openapitools.client.models.ModelResponseCartScriptList
import org.openapitools.client.models.ModelResponseCartShippingZonesList

class CartApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of CartApi
        //val apiInstance = CartApi()

        // to test cartBridge
        should("test cartBridge") {
            // uncomment below to test cartBridge
            //val result : CartBridge200Response = apiInstance.cartBridge()
            //result shouldBe ("TODO")
        }

        // to test cartCatalogPriceRulesCount
        should("test cartCatalogPriceRulesCount") {
            // uncomment below to test cartCatalogPriceRulesCount
            //val result : CartCatalogPriceRulesCount200Response = apiInstance.cartCatalogPriceRulesCount()
            //result shouldBe ("TODO")
        }

        // to test cartCatalogPriceRulesList
        should("test cartCatalogPriceRulesList") {
            // uncomment below to test cartCatalogPriceRulesList
            //val start : kotlin.Int = 0 // kotlin.Int | This parameter sets the number from which you want to get entities
            //val count : kotlin.Int = 20 // kotlin.Int | This parameter sets the entity amount that has to be retrieved. Max allowed count=250
            //val pageCursor : kotlin.String =  // kotlin.String | Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
            //val ids : kotlin.String = 24,25 // kotlin.String | Retrieves  catalog_price_rules by ids
            //val responseFields : kotlin.String = {result{catalog_price_rules_count,catalog_price_rules{id,type,name,avail,usage_count,actions,conditions}}} // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val params : kotlin.String = id,model,price,images // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val exclude : kotlin.String = false // kotlin.String | Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
            //val result : ModelResponseCartCatalogPriceRulesList = apiInstance.cartCatalogPriceRulesList(start, count, pageCursor, ids, responseFields, params, exclude)
            //result shouldBe ("TODO")
        }

        // to test cartClearCache
        should("test cartClearCache") {
            // uncomment below to test cartClearCache
            //val cacheType : kotlin.String = storage_cache // kotlin.String | Defines which cache should be cleared.
            //val result : CartClearCache200Response = apiInstance.cartClearCache(cacheType)
            //result shouldBe ("TODO")
        }

        // to test cartConfig
        should("test cartConfig") {
            // uncomment below to test cartConfig
            //val params : kotlin.String = store_name,store_url,db_prefix // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val exclude : kotlin.String = store_name,store_url,db_prefix // kotlin.String | Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
            //val result : CartConfig200Response = apiInstance.cartConfig(params, exclude)
            //result shouldBe ("TODO")
        }

        // to test cartConfigUpdate
        should("test cartConfigUpdate") {
            // uncomment below to test cartConfigUpdate
            //val cartConfigUpdate : CartConfigUpdate =  // CartConfigUpdate | 
            //val result : CartConfigUpdate200Response = apiInstance.cartConfigUpdate(cartConfigUpdate)
            //result shouldBe ("TODO")
        }

        // to test cartCouponAdd
        should("test cartCouponAdd") {
            // uncomment below to test cartCouponAdd
            //val cartCouponAdd : CartCouponAdd =  // CartCouponAdd | 
            //val result : CartCouponAdd200Response = apiInstance.cartCouponAdd(cartCouponAdd)
            //result shouldBe ("TODO")
        }

        // to test cartCouponConditionAdd
        should("test cartCouponConditionAdd") {
            // uncomment below to test cartCouponConditionAdd
            //val couponId : kotlin.String = 45845 // kotlin.String | Coupon Id
            //val entity : kotlin.String = order // kotlin.String | Defines condition entity type
            //val key : kotlin.String = subtotal // kotlin.String | Defines condition entity attribute key
            //val `operator` : kotlin.String = == // kotlin.String | Defines condition operator
            //val `value` : kotlin.String = 2 // kotlin.String | Defines condition value, can be comma separated according to the operator.
            //val target : kotlin.String = coupon_action // kotlin.String | Defines condition operator
            //val includeTax : kotlin.Boolean = true // kotlin.Boolean | Indicates whether to apply a discount for taxes.
            //val includeShipping : kotlin.Boolean = true // kotlin.Boolean | Indicates whether to apply a discount for shipping.
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val result : BasketLiveShippingServiceDelete200Response = apiInstance.cartCouponConditionAdd(couponId, entity, key, `operator`, `value`, target, includeTax, includeShipping, storeId)
            //result shouldBe ("TODO")
        }

        // to test cartCouponCount
        should("test cartCouponCount") {
            // uncomment below to test cartCouponCount
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val avail : kotlin.Boolean = false // kotlin.Boolean | Defines category's visibility status
            //val dateStartFrom : kotlin.String = 2016-12-29 16:44:30 // kotlin.String | Filter entity by date_start (greater or equal)
            //val dateStartTo : kotlin.String = 2016-12-29 16:44:30 // kotlin.String | Filter entity by date_start (less or equal)
            //val dateEndFrom : kotlin.String = 2016-12-29 16:44:30 // kotlin.String | Filter entity by date_end (greater or equal)
            //val dateEndTo : kotlin.String = 2016-12-29 16:44:30 // kotlin.String | Filter entity by date_end (less or equal)
            //val result : CartCouponCount200Response = apiInstance.cartCouponCount(storeId, avail, dateStartFrom, dateStartTo, dateEndFrom, dateEndTo)
            //result shouldBe ("TODO")
        }

        // to test cartCouponDelete
        should("test cartCouponDelete") {
            // uncomment below to test cartCouponDelete
            //val id : kotlin.String = 10 // kotlin.String | Entity id
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val result : AttributeDelete200Response = apiInstance.cartCouponDelete(id, storeId)
            //result shouldBe ("TODO")
        }

        // to test cartCouponList
        should("test cartCouponList") {
            // uncomment below to test cartCouponList
            //val start : kotlin.Int = 0 // kotlin.Int | This parameter sets the number from which you want to get entities
            //val count : kotlin.Int = 20 // kotlin.Int | This parameter sets the entity amount that has to be retrieved. Max allowed count=250
            //val pageCursor : kotlin.String =  // kotlin.String | Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
            //val couponsIds : kotlin.String = 1,2,3 // kotlin.String | Filter coupons by ids
            //val storeId : kotlin.String = 1 // kotlin.String | Filter coupons by store id
            //val langId : kotlin.String = 3 // kotlin.String | Language id
            //val avail : kotlin.Boolean = false // kotlin.Boolean | Filter coupons by avail status
            //val dateStartFrom : kotlin.String = 2016-12-29 16:44:30 // kotlin.String | Filter entity by date_start (greater or equal)
            //val dateStartTo : kotlin.String = 2016-12-29 16:44:30 // kotlin.String | Filter entity by date_start (less or equal)
            //val dateEndFrom : kotlin.String = 2016-12-29 16:44:30 // kotlin.String | Filter entity by date_end (greater or equal)
            //val dateEndTo : kotlin.String = 2016-12-29 16:44:30 // kotlin.String | Filter entity by date_end (less or equal)
            //val responseFields : kotlin.String = {pagination,result{coupon_count,coupon{id,code,name,conditions,actions{scope,amount,conditions{id,value,sub-conditions}},date_start,avail}}} // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val params : kotlin.String = id,code,type,amount // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val exclude : kotlin.String = usage_history,type // kotlin.String | Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
            //val result : ModelResponseCartCouponList = apiInstance.cartCouponList(start, count, pageCursor, couponsIds, storeId, langId, avail, dateStartFrom, dateStartTo, dateEndFrom, dateEndTo, responseFields, params, exclude)
            //result shouldBe ("TODO")
        }

        // to test cartCreate
        should("test cartCreate") {
            // uncomment below to test cartCreate
            //val cartCreate : CartCreate =  // CartCreate | 
            //val result : AccountCartAdd200Response = apiInstance.cartCreate(cartCreate)
            //result shouldBe ("TODO")
        }

        // to test cartDelete
        should("test cartDelete") {
            // uncomment below to test cartDelete
            //val deleteBridge : kotlin.Boolean = true // kotlin.Boolean | Identifies if there is a necessity to delete bridge
            //val result : CartDelete200Response = apiInstance.cartDelete(deleteBridge)
            //result shouldBe ("TODO")
        }

        // to test cartDisconnect
        should("test cartDisconnect") {
            // uncomment below to test cartDisconnect
            //val deleteBridge : kotlin.Boolean = true // kotlin.Boolean | Identifies if there is a necessity to delete bridge
            //val result : CartDisconnect200Response = apiInstance.cartDisconnect(deleteBridge)
            //result shouldBe ("TODO")
        }

        // to test cartGiftcardAdd
        should("test cartGiftcardAdd") {
            // uncomment below to test cartGiftcardAdd
            //val amount : java.math.BigDecimal = 15.5 // java.math.BigDecimal | Defines the gift card amount value.
            //val code : kotlin.String = GFT1 A4S5 AA11 RD61 // kotlin.String | Gift card code
            //val ownerEmail : kotlin.String = jubari@hannsgroup.com // kotlin.String | Gift card owner email
            //val recipientEmail : kotlin.String = jubari@hannsgroup.com // kotlin.String | Gift card recipient email
            //val recipientName : kotlin.String = John Doe // kotlin.String | Gift card recipient name
            //val ownerName : kotlin.String = John Doe // kotlin.String | Gift card owner name
            //val result : CartGiftcardAdd200Response = apiInstance.cartGiftcardAdd(amount, code, ownerEmail, recipientEmail, recipientName, ownerName)
            //result shouldBe ("TODO")
        }

        // to test cartGiftcardCount
        should("test cartGiftcardCount") {
            // uncomment below to test cartGiftcardCount
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val result : CartGiftcardCount200Response = apiInstance.cartGiftcardCount(storeId)
            //result shouldBe ("TODO")
        }

        // to test cartGiftcardDelete
        should("test cartGiftcardDelete") {
            // uncomment below to test cartGiftcardDelete
            //val id : kotlin.String = 10 // kotlin.String | Entity id
            //val result : AttributeDelete200Response = apiInstance.cartGiftcardDelete(id)
            //result shouldBe ("TODO")
        }

        // to test cartGiftcardList
        should("test cartGiftcardList") {
            // uncomment below to test cartGiftcardList
            //val start : kotlin.Int = 0 // kotlin.Int | This parameter sets the number from which you want to get entities
            //val count : kotlin.Int = 20 // kotlin.Int | This parameter sets the entity amount that has to be retrieved. Max allowed count=250
            //val pageCursor : kotlin.String =  // kotlin.String | Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val responseFields : kotlin.String = {pagination,result{gift_card{id,code,amount,status}}} // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val params : kotlin.String = id,model,price,images // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val exclude : kotlin.String = false // kotlin.String | Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
            //val result : ModelResponseCartGiftCardList = apiInstance.cartGiftcardList(start, count, pageCursor, storeId, responseFields, params, exclude)
            //result shouldBe ("TODO")
        }

        // to test cartInfo
        should("test cartInfo") {
            // uncomment below to test cartInfo
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val responseFields : kotlin.String = {result{name,url,stores_info{store_id,name,currency{id,iso3},store_owner_info}}} // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val params : kotlin.String = name,url // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val exclude : kotlin.String = name,url // kotlin.String | Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
            //val result : CartInfo200Response = apiInstance.cartInfo(storeId, responseFields, params, exclude)
            //result shouldBe ("TODO")
        }

        // to test cartList
        should("test cartList") {
            // uncomment below to test cartList
            //val result : CartList200Response = apiInstance.cartList()
            //result shouldBe ("TODO")
        }

        // to test cartMetaDataList
        should("test cartMetaDataList") {
            // uncomment below to test cartMetaDataList
            //val entityId : kotlin.String = 1 // kotlin.String | Entity Id
            //val count : kotlin.Int = 20 // kotlin.Int | This parameter sets the entity amount that has to be retrieved. Max allowed count=250
            //val pageCursor : kotlin.String =  // kotlin.String | Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
            //val entity : kotlin.String = order // kotlin.String | Entity
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val langId : kotlin.String = 3 // kotlin.String | Language id
            //val key : kotlin.String = subtotal // kotlin.String | Key
            //val responseFields : kotlin.String = {result{items{key,value}}} // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val params : kotlin.String = id,model,price,images // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val exclude : kotlin.String = false // kotlin.String | Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
            //val result : ModelResponseCartMetaDataList = apiInstance.cartMetaDataList(entityId, count, pageCursor, entity, storeId, langId, key, responseFields, params, exclude)
            //result shouldBe ("TODO")
        }

        // to test cartMetaDataSet
        should("test cartMetaDataSet") {
            // uncomment below to test cartMetaDataSet
            //val entityId : kotlin.String = 1 // kotlin.String | Entity Id
            //val key : kotlin.String = subtotal // kotlin.String | Key
            //val `value` : kotlin.String = 2 // kotlin.String | Value
            //val namespace : kotlin.String = order // kotlin.String | Metafield namespace
            //val entity : kotlin.String = order // kotlin.String | Entity
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val langId : kotlin.String = 3 // kotlin.String | Language id
            //val result : AttributeAdd200Response = apiInstance.cartMetaDataSet(entityId, key, `value`, namespace, entity, storeId, langId)
            //result shouldBe ("TODO")
        }

        // to test cartMetaDataUnset
        should("test cartMetaDataUnset") {
            // uncomment below to test cartMetaDataUnset
            //val entityId : kotlin.String = 1 // kotlin.String | Entity Id
            //val key : kotlin.String = subtotal // kotlin.String | Key
            //val id : kotlin.String = 10 // kotlin.String | Entity id
            //val entity : kotlin.String = order // kotlin.String | Entity
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val result : BasketLiveShippingServiceDelete200Response = apiInstance.cartMetaDataUnset(entityId, key, id, entity, storeId)
            //result shouldBe ("TODO")
        }

        // to test cartMethods
        should("test cartMethods") {
            // uncomment below to test cartMethods
            //val result : CartMethods200Response = apiInstance.cartMethods()
            //result shouldBe ("TODO")
        }

        // to test cartPluginList
        should("test cartPluginList") {
            // uncomment below to test cartPluginList
            //val start : kotlin.Int = 0 // kotlin.Int | This parameter sets the number from which you want to get entities
            //val count : kotlin.Int = 20 // kotlin.Int | This parameter sets the entity amount that has to be retrieved. Max allowed count=250
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val result : CartPluginList200Response = apiInstance.cartPluginList(start, count, storeId)
            //result shouldBe ("TODO")
        }

        // to test cartScriptAdd
        should("test cartScriptAdd") {
            // uncomment below to test cartScriptAdd
            //val name : kotlin.String = jQuery Minimized // kotlin.String | The user-friendly script name
            //val description : kotlin.String = The Write Less, Do More, JavaScript Library // kotlin.String | The user-friendly description
            //val html : kotlin.String = &#x3C;script&#x3E;alert(&#x27;foo&#x27;)&#x3C;/script&#x3E; // kotlin.String | An html string containing exactly one `script` tag.
            //val src : kotlin.String = https://js-aplenty.com/foo.js // kotlin.String | The URL of the remote script
            //val loadMethod : kotlin.String = async // kotlin.String | The load method to use for the script
            //val scope : kotlin.String = all // kotlin.String | The page or pages on the online store where the script should be included
            //val events : kotlin.String = purchase_event // kotlin.String | Event for run scripts
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val result : CartScriptAdd200Response = apiInstance.cartScriptAdd(name, description, html, src, loadMethod, scope, events, storeId)
            //result shouldBe ("TODO")
        }

        // to test cartScriptDelete
        should("test cartScriptDelete") {
            // uncomment below to test cartScriptDelete
            //val id : kotlin.String = 10 // kotlin.String | Entity id
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val result : AttributeDelete200Response = apiInstance.cartScriptDelete(id, storeId)
            //result shouldBe ("TODO")
        }

        // to test cartScriptList
        should("test cartScriptList") {
            // uncomment below to test cartScriptList
            //val start : kotlin.Int = 0 // kotlin.Int | This parameter sets the number from which you want to get entities
            //val count : kotlin.Int = 20 // kotlin.Int | This parameter sets the entity amount that has to be retrieved. Max allowed count=250
            //val pageCursor : kotlin.String =  // kotlin.String | Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
            //val scriptIds : kotlin.String = 34023324,34024032 // kotlin.String | Retrieves only scripts with specific ids
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val createdFrom : kotlin.String = 2010-07-29 13:45:52 // kotlin.String | Retrieve entities from their creation date
            //val createdTo : kotlin.String = 2100-08-29 13:45:52 // kotlin.String | Retrieve entities to their creation date
            //val modifiedFrom : kotlin.String = 2010-07-29 13:45:52 // kotlin.String | Retrieve entities from their modification date
            //val modifiedTo : kotlin.String = 2100-08-29 13:45:52 // kotlin.String | Retrieve entities to their modification date
            //val responseFields : kotlin.String = {pagination,result{total_count,scripts{id,name,src,created_time{value}}}} // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val params : kotlin.String = id,model,price,images // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val exclude : kotlin.String = false // kotlin.String | Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
            //val result : ModelResponseCartScriptList = apiInstance.cartScriptList(start, count, pageCursor, scriptIds, storeId, createdFrom, createdTo, modifiedFrom, modifiedTo, responseFields, params, exclude)
            //result shouldBe ("TODO")
        }

        // to test cartShippingZonesList
        should("test cartShippingZonesList") {
            // uncomment below to test cartShippingZonesList
            //val start : kotlin.Int = 0 // kotlin.Int | This parameter sets the number from which you want to get entities
            //val count : kotlin.Int = 20 // kotlin.Int | This parameter sets the entity amount that has to be retrieved. Max allowed count=250
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val responseFields : kotlin.String = {result{id,name,enabled,countries,shipping_methods{name,rates}}} // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val params : kotlin.String = id,model,price,images // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val exclude : kotlin.String = false // kotlin.String | Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
            //val result : ModelResponseCartShippingZonesList = apiInstance.cartShippingZonesList(start, count, storeId, responseFields, params, exclude)
            //result shouldBe ("TODO")
        }

        // to test cartValidate
        should("test cartValidate") {
            // uncomment below to test cartValidate
            //val validateVersion : kotlin.Boolean = true // kotlin.Boolean | Specify if api2cart should validate cart version
            //val result : CartValidate200Response = apiInstance.cartValidate(validateVersion)
            //result shouldBe ("TODO")
        }

    }
}
