/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.apis.AttributeApi
import org.openapitools.client.models.AttributeAdd200Response
import org.openapitools.client.models.AttributeAssignGroup200Response
import org.openapitools.client.models.AttributeCount200Response
import org.openapitools.client.models.AttributeDelete200Response
import org.openapitools.client.models.AttributeInfo200Response
import org.openapitools.client.models.AttributeTypeList200Response
import org.openapitools.client.models.AttributeUnassignGroup200Response
import org.openapitools.client.models.AttributeUpdate200Response
import org.openapitools.client.models.AttributeValueDelete200Response
import org.openapitools.client.models.ModelResponseAttributeAttributesetList
import org.openapitools.client.models.ModelResponseAttributeGroupList
import org.openapitools.client.models.ModelResponseAttributeList

class AttributeApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of AttributeApi
        //val apiInstance = AttributeApi()

        // to test attributeAdd
        should("test attributeAdd") {
            // uncomment below to test attributeAdd
            //val type : kotlin.String = text // kotlin.String | Defines attribute's type
            //val name : kotlin.String = Specification // kotlin.String | Defines attributes's name
            //val code : kotlin.String = code // kotlin.String | Entity code
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val langId : kotlin.String = 3 // kotlin.String | Language id
            //val visible : kotlin.Boolean = true // kotlin.Boolean | Set visibility status
            //val required : kotlin.Boolean = true // kotlin.Boolean | Defines if the option is required
            //val position : kotlin.Int = 5 // kotlin.Int | Attribute`s position
            //val attributeGroupId : kotlin.String = 202 // kotlin.String | Filter by attribute_group_id
            //val isGlobal : kotlin.String = Global // kotlin.String | Attribute saving scope
            //val isSearchable : kotlin.Boolean = false // kotlin.Boolean | Use attribute in Quick Search
            //val isFilterable : kotlin.String = No // kotlin.String | Use In Layered Navigation
            //val isComparable : kotlin.Boolean = true // kotlin.Boolean | Comparable on Front-end
            //val isHtmlAllowedOnFront : kotlin.Boolean = true // kotlin.Boolean | Allow HTML Tags on Frontend
            //val isFilterableInSearch : kotlin.Boolean = true // kotlin.Boolean | Use In Search Results Layered Navigation
            //val isConfigurable : kotlin.Boolean = true // kotlin.Boolean | Use To Create Configurable Product
            //val isVisibleInAdvancedSearch : kotlin.Boolean = true // kotlin.Boolean | Use in Advanced Search
            //val isUsedForPromoRules : kotlin.Boolean = true // kotlin.Boolean | Use for Promo Rule Conditions
            //val usedInProductListing : kotlin.Boolean = true // kotlin.Boolean | Used in Product Listing
            //val usedForSortBy : kotlin.Boolean = true // kotlin.Boolean | Used for Sorting in Product Listing
            //val applyTo : kotlin.String = Global // kotlin.String | Types of products which can have this attribute
            //val result : AttributeAdd200Response = apiInstance.attributeAdd(type, name, code, storeId, langId, visible, required, position, attributeGroupId, isGlobal, isSearchable, isFilterable, isComparable, isHtmlAllowedOnFront, isFilterableInSearch, isConfigurable, isVisibleInAdvancedSearch, isUsedForPromoRules, usedInProductListing, usedForSortBy, applyTo)
            //result shouldBe ("TODO")
        }

        // to test attributeAssignGroup
        should("test attributeAssignGroup") {
            // uncomment below to test attributeAssignGroup
            //val id : kotlin.String = 10 // kotlin.String | Entity id
            //val groupId : kotlin.String = 3 // kotlin.String | Attribute group_id
            //val attributeSetId : kotlin.String = 4 // kotlin.String | Attribute set id
            //val result : AttributeAssignGroup200Response = apiInstance.attributeAssignGroup(id, groupId, attributeSetId)
            //result shouldBe ("TODO")
        }

        // to test attributeAssignSet
        should("test attributeAssignSet") {
            // uncomment below to test attributeAssignSet
            //val id : kotlin.String = 10 // kotlin.String | Entity id
            //val attributeSetId : kotlin.String = 4 // kotlin.String | Attribute set id
            //val groupId : kotlin.String = 3 // kotlin.String | Attribute group_id
            //val result : AttributeAssignGroup200Response = apiInstance.attributeAssignSet(id, attributeSetId, groupId)
            //result shouldBe ("TODO")
        }

        // to test attributeAttributesetList
        should("test attributeAttributesetList") {
            // uncomment below to test attributeAttributesetList
            //val start : kotlin.Int = 0 // kotlin.Int | This parameter sets the number from which you want to get entities
            //val count : kotlin.Int = 20 // kotlin.Int | This parameter sets the entity amount that has to be retrieved. Max allowed count=250
            //val params : kotlin.String = id,name // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val exclude : kotlin.String = id,name // kotlin.String | Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
            //val responseFields : kotlin.String = {result} // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val result : ModelResponseAttributeAttributesetList = apiInstance.attributeAttributesetList(start, count, params, exclude, responseFields)
            //result shouldBe ("TODO")
        }

        // to test attributeCount
        should("test attributeCount") {
            // uncomment below to test attributeCount
            //val type : kotlin.String = text // kotlin.String | Defines attribute's type
            //val attributeSetId : kotlin.String = 4 // kotlin.String | Filter items by attribute set id
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val langId : kotlin.String = 3 // kotlin.String | Language id
            //val visible : kotlin.Boolean = true // kotlin.Boolean | Filter items by visibility status
            //val required : kotlin.Boolean = true // kotlin.Boolean | Defines if the option is required
            //val system : kotlin.Boolean = false // kotlin.Boolean | True if attribute is system
            //val result : AttributeCount200Response = apiInstance.attributeCount(type, attributeSetId, storeId, langId, visible, required, system)
            //result shouldBe ("TODO")
        }

        // to test attributeDelete
        should("test attributeDelete") {
            // uncomment below to test attributeDelete
            //val id : kotlin.String = 10 // kotlin.String | Entity id
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val result : AttributeDelete200Response = apiInstance.attributeDelete(id, storeId)
            //result shouldBe ("TODO")
        }

        // to test attributeGroupList
        should("test attributeGroupList") {
            // uncomment below to test attributeGroupList
            //val start : kotlin.Int = 0 // kotlin.Int | This parameter sets the number from which you want to get entities
            //val count : kotlin.Int = 20 // kotlin.Int | This parameter sets the entity amount that has to be retrieved. Max allowed count=250
            //val langId : kotlin.String = 3 // kotlin.String | Language id
            //val params : kotlin.String = id,name // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val exclude : kotlin.String = id,name // kotlin.String | Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
            //val responseFields : kotlin.String = {result} // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val attributeSetId : kotlin.String = 4 // kotlin.String | Attribute set id
            //val result : ModelResponseAttributeGroupList = apiInstance.attributeGroupList(start, count, langId, params, exclude, responseFields, attributeSetId)
            //result shouldBe ("TODO")
        }

        // to test attributeInfo
        should("test attributeInfo") {
            // uncomment below to test attributeInfo
            //val id : kotlin.String = 10 // kotlin.String | Entity id
            //val attributeSetId : kotlin.String = 4 // kotlin.String | Attribute set id
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val langId : kotlin.String = 3 // kotlin.String | Language id
            //val params : kotlin.String = force_all // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val exclude : kotlin.String = name // kotlin.String | Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
            //val responseFields : kotlin.String = {result} // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val result : AttributeInfo200Response = apiInstance.attributeInfo(id, attributeSetId, storeId, langId, params, exclude, responseFields)
            //result shouldBe ("TODO")
        }

        // to test attributeList
        should("test attributeList") {
            // uncomment below to test attributeList
            //val start : kotlin.Int = 0 // kotlin.Int | This parameter sets the number from which you want to get entities
            //val count : kotlin.Int = 20 // kotlin.Int | This parameter sets the entity amount that has to be retrieved. Max allowed count=250
            //val type : kotlin.String = text // kotlin.String | Defines attribute's type
            //val attributeIds : kotlin.String = 1,2,3 // kotlin.String | Filter attributes by ids
            //val attributeSetId : kotlin.String = 4 // kotlin.String | Filter items by attribute set id
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val langId : kotlin.String = 3 // kotlin.String | Retrieves attributes on specified language id
            //val params : kotlin.String = id,name // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val exclude : kotlin.String = id,name // kotlin.String | Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
            //val responseFields : kotlin.String = {return_code,return_message,pagination,result} // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val visible : kotlin.Boolean = true // kotlin.Boolean | Filter items by visibility status
            //val required : kotlin.Boolean = true // kotlin.Boolean | Defines if the option is required
            //val system : kotlin.Boolean = false // kotlin.Boolean | True if attribute is system
            //val result : ModelResponseAttributeList = apiInstance.attributeList(start, count, type, attributeIds, attributeSetId, storeId, langId, params, exclude, responseFields, visible, required, system)
            //result shouldBe ("TODO")
        }

        // to test attributeTypeList
        should("test attributeTypeList") {
            // uncomment below to test attributeTypeList
            //val result : AttributeTypeList200Response = apiInstance.attributeTypeList()
            //result shouldBe ("TODO")
        }

        // to test attributeUnassignGroup
        should("test attributeUnassignGroup") {
            // uncomment below to test attributeUnassignGroup
            //val id : kotlin.String = 10 // kotlin.String | Entity id
            //val groupId : kotlin.String = 3 // kotlin.String | Customer group_id
            //val result : AttributeUnassignGroup200Response = apiInstance.attributeUnassignGroup(id, groupId)
            //result shouldBe ("TODO")
        }

        // to test attributeUnassignSet
        should("test attributeUnassignSet") {
            // uncomment below to test attributeUnassignSet
            //val id : kotlin.String = 10 // kotlin.String | Entity id
            //val attributeSetId : kotlin.String = 4 // kotlin.String | Attribute set id
            //val result : AttributeUnassignGroup200Response = apiInstance.attributeUnassignSet(id, attributeSetId)
            //result shouldBe ("TODO")
        }

        // to test attributeUpdate
        should("test attributeUpdate") {
            // uncomment below to test attributeUpdate
            //val id : kotlin.String = 10 // kotlin.String | Entity id
            //val name : kotlin.String = Test name // kotlin.String | Defines new attributes's name
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val langId : kotlin.String = 3 // kotlin.String | Language id
            //val result : AttributeUpdate200Response = apiInstance.attributeUpdate(id, name, storeId, langId)
            //result shouldBe ("TODO")
        }

        // to test attributeValueAdd
        should("test attributeValueAdd") {
            // uncomment below to test attributeValueAdd
            //val attributeId : kotlin.String = 156 // kotlin.String | Attribute Id
            //val name : kotlin.String = Test name // kotlin.String | Defines attribute value's name
            //val code : kotlin.String = code // kotlin.String | Entity code
            //val description : kotlin.String = Test value // kotlin.String | Defines attribute value's description
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val langId : kotlin.String = 3 // kotlin.String | Language id
            //val result : AttributeAdd200Response = apiInstance.attributeValueAdd(attributeId, name, code, description, storeId, langId)
            //result shouldBe ("TODO")
        }

        // to test attributeValueDelete
        should("test attributeValueDelete") {
            // uncomment below to test attributeValueDelete
            //val id : kotlin.String = 10 // kotlin.String | Entity id
            //val attributeId : kotlin.String = 156 // kotlin.String | Attribute Id
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val result : AttributeValueDelete200Response = apiInstance.attributeValueDelete(id, attributeId, storeId)
            //result shouldBe ("TODO")
        }

        // to test attributeValueUpdate
        should("test attributeValueUpdate") {
            // uncomment below to test attributeValueUpdate
            //val id : kotlin.String = 10 // kotlin.String | Defines attribute value's id
            //val attributeId : kotlin.String = 156 // kotlin.String | Attribute Id
            //val name : kotlin.String = Test name // kotlin.String | Defines attribute value's name
            //val description : kotlin.String = Test value // kotlin.String | Defines new attribute value's description
            //val code : kotlin.String = code // kotlin.String | Entity code
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val langId : kotlin.String = 3 // kotlin.String | Language id
            //val result : AttributeUpdate200Response = apiInstance.attributeValueUpdate(id, attributeId, name, description, code, storeId, langId)
            //result shouldBe ("TODO")
        }

    }
}
