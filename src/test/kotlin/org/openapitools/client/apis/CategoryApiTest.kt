/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.apis.CategoryApi
import org.openapitools.client.models.AccountConfigUpdate200Response
import org.openapitools.client.models.AttributeDelete200Response
import org.openapitools.client.models.CartConfigUpdate200Response
import org.openapitools.client.models.CategoryAdd200Response
import org.openapitools.client.models.CategoryAddBatch
import org.openapitools.client.models.CategoryAddBatch200Response
import org.openapitools.client.models.CategoryCount200Response
import org.openapitools.client.models.CategoryDelete200Response
import org.openapitools.client.models.CategoryFind200Response
import org.openapitools.client.models.CategoryImageAdd200Response
import org.openapitools.client.models.CategoryInfo200Response
import org.openapitools.client.models.ModelResponseCategoryList

class CategoryApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of CategoryApi
        //val apiInstance = CategoryApi()

        // to test categoryAdd
        should("test categoryAdd") {
            // uncomment below to test categoryAdd
            //val name : kotlin.String = Shoes // kotlin.String | Defines category's name that has to be added
            //val parentId : kotlin.String = 6 // kotlin.String | Adds categories specified by parent id
            //val storesIds : kotlin.String = 1,2 // kotlin.String | Create category in the stores that is specified by comma-separated stores' id
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val langId : kotlin.String = 3 // kotlin.String | Language id
            //val avail : kotlin.Boolean = false // kotlin.Boolean | Defines category's visibility status
            //val sortOrder : kotlin.Int = 2 // kotlin.Int | Sort number in the list
            //val createdTime : kotlin.String = 2014-01-30 15:58:41 // kotlin.String | Entity's date creation
            //val modifiedTime : kotlin.String = 2014-07-30 15:58:41 // kotlin.String | Entity's date modification
            //val description : kotlin.String = Test category // kotlin.String | Defines category's description
            //val shortDescription : kotlin.String = Short description. This is very short description // kotlin.String | Defines short description
            //val metaTitle : kotlin.String = category,test // kotlin.String | Defines unique meta title for each entity
            //val metaDescription : kotlin.String = category,test // kotlin.String | Defines unique meta description of a entity
            //val metaKeywords : kotlin.String = category,test // kotlin.String | Defines unique meta keywords for each entity
            //val seoUrl : kotlin.String = category,test // kotlin.String | Defines unique category's URL for SEO
            //val result : CategoryAdd200Response = apiInstance.categoryAdd(name, parentId, storesIds, storeId, langId, avail, sortOrder, createdTime, modifiedTime, description, shortDescription, metaTitle, metaDescription, metaKeywords, seoUrl)
            //result shouldBe ("TODO")
        }

        // to test categoryAddBatch
        should("test categoryAddBatch") {
            // uncomment below to test categoryAddBatch
            //val categoryAddBatch : CategoryAddBatch =  // CategoryAddBatch | 
            //val result : CategoryAddBatch200Response = apiInstance.categoryAddBatch(categoryAddBatch)
            //result shouldBe ("TODO")
        }

        // to test categoryAssign
        should("test categoryAssign") {
            // uncomment below to test categoryAssign
            //val productId : kotlin.String = 10 // kotlin.String | Defines category assign to the product, specified by product id
            //val categoryId : kotlin.String = 6 // kotlin.String | Defines category assign, specified by category id
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val result : CartConfigUpdate200Response = apiInstance.categoryAssign(productId, categoryId, storeId)
            //result shouldBe ("TODO")
        }

        // to test categoryCount
        should("test categoryCount") {
            // uncomment below to test categoryCount
            //val parentId : kotlin.String = 6 // kotlin.String | Counts categories specified by parent id
            //val storeId : kotlin.String = 1 // kotlin.String | Counts category specified by store id
            //val langId : kotlin.String = 3 // kotlin.String | Counts category specified by language id
            //val createdFrom : kotlin.String = 2010-07-29 13:45:52 // kotlin.String | Retrieve entities from their creation date
            //val createdTo : kotlin.String = 2100-08-29 13:45:52 // kotlin.String | Retrieve entities to their creation date
            //val modifiedFrom : kotlin.String = 2010-07-29 13:45:52 // kotlin.String | Retrieve entities from their modification date
            //val modifiedTo : kotlin.String = 2100-08-29 13:45:52 // kotlin.String | Retrieve entities to their modification date
            //val avail : kotlin.Boolean = false // kotlin.Boolean | Defines category's visibility status
            //val productType : kotlin.String = BICYCLE // kotlin.String | A categorization for the product
            //val findValue : kotlin.String = Demo category 1 // kotlin.String | Entity search that is specified by some value
            //val findWhere : kotlin.String = email // kotlin.String | Counts categories that are searched specified by field
            //val reportRequestId : kotlin.String = 105245017661 // kotlin.String | Report request id
            //val disableReportCache : kotlin.Boolean = false // kotlin.Boolean | Disable report cache for current request
            //val result : CategoryCount200Response = apiInstance.categoryCount(parentId, storeId, langId, createdFrom, createdTo, modifiedFrom, modifiedTo, avail, productType, findValue, findWhere, reportRequestId, disableReportCache)
            //result shouldBe ("TODO")
        }

        // to test categoryDelete
        should("test categoryDelete") {
            // uncomment below to test categoryDelete
            //val id : kotlin.String = 10 // kotlin.String | Defines category removal, specified by category id
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val result : CategoryDelete200Response = apiInstance.categoryDelete(id, storeId)
            //result shouldBe ("TODO")
        }

        // to test categoryFind
        should("test categoryFind") {
            // uncomment below to test categoryFind
            //val findValue : kotlin.String = Demo category 1 // kotlin.String | Entity search that is specified by some value
            //val findWhere : kotlin.String = name // kotlin.String | Entity search that is specified by the comma-separated unique fields
            //val findParams : kotlin.String = regex // kotlin.String | Entity search that is specified by comma-separated parameters
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val langId : kotlin.String = 3 // kotlin.String | Language id
            //val result : CategoryFind200Response = apiInstance.categoryFind(findValue, findWhere, findParams, storeId, langId)
            //result shouldBe ("TODO")
        }

        // to test categoryImageAdd
        should("test categoryImageAdd") {
            // uncomment below to test categoryImageAdd
            //val categoryId : kotlin.String = 6 // kotlin.String | Defines category id where the image should be added
            //val imageName : kotlin.String = bag-gray.png // kotlin.String | Defines image's name
            //val url : kotlin.String = http://docs.api2cart.com/img/logo.png // kotlin.String | Defines URL of the image that has to be added
            //val type : kotlin.String = base // kotlin.String | Defines image's types that are specified by comma-separated list
            //val label : kotlin.String = This cool image // kotlin.String | Defines alternative text that has to be attached to the picture
            //val mime : kotlin.String = image/jpeg // kotlin.String | Mime type of image http://en.wikipedia.org/wiki/Internet_media_type.
            //val position : kotlin.Int = 5 // kotlin.Int | Defines imageâ€™s position in the list
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val result : CategoryImageAdd200Response = apiInstance.categoryImageAdd(categoryId, imageName, url, type, label, mime, position, storeId)
            //result shouldBe ("TODO")
        }

        // to test categoryImageDelete
        should("test categoryImageDelete") {
            // uncomment below to test categoryImageDelete
            //val categoryId : kotlin.String = 6 // kotlin.String | Defines category id where the image should be deleted
            //val imageId : kotlin.String = 82950b84f468edff480680f99cedbe0d // kotlin.String | Define image id
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val result : AttributeDelete200Response = apiInstance.categoryImageDelete(categoryId, imageId, storeId)
            //result shouldBe ("TODO")
        }

        // to test categoryInfo
        should("test categoryInfo") {
            // uncomment below to test categoryInfo
            //val id : kotlin.String = 10 // kotlin.String | Retrieves category's info specified by category id
            //val params : kotlin.String = id,parent_id,name // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val responseFields : kotlin.String = {result{id,name,parent_id,modified_at{value},images}} // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val exclude : kotlin.String = id,parent_id,name // kotlin.String | Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
            //val storeId : kotlin.String = 1 // kotlin.String | Retrieves category info  specified by store id
            //val langId : kotlin.String = 3 // kotlin.String | Retrieves category info  specified by language id
            //val schemaType : kotlin.String = LISTING // kotlin.String | The name of the requirements set for the provided schema.
            //val reportRequestId : kotlin.String = 105245017661 // kotlin.String | Report request id
            //val disableReportCache : kotlin.Boolean = false // kotlin.Boolean | Disable report cache for current request
            //val result : CategoryInfo200Response = apiInstance.categoryInfo(id, params, responseFields, exclude, storeId, langId, schemaType, reportRequestId, disableReportCache)
            //result shouldBe ("TODO")
        }

        // to test categoryList
        should("test categoryList") {
            // uncomment below to test categoryList
            //val start : kotlin.Int = 0 // kotlin.Int | This parameter sets the number from which you want to get entities
            //val count : kotlin.Int = 20 // kotlin.Int | This parameter sets the entity amount that has to be retrieved. Max allowed count=250
            //val pageCursor : kotlin.String =  // kotlin.String | Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
            //val parentId : kotlin.String = 6 // kotlin.String | Retrieves categories specified by parent id
            //val params : kotlin.String = id,parent_id,name // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val responseFields : kotlin.String = {result{categories_count,category{id,parent_id,modified_at{value},images}}} // kotlin.String | Set this parameter in order to choose which entity fields you want to retrieve
            //val exclude : kotlin.String = id,parent_id,name // kotlin.String | Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
            //val storeId : kotlin.String = 1 // kotlin.String | Retrieves categories specified by store id
            //val langId : kotlin.String = 3 // kotlin.String | Retrieves categorys specified by language id
            //val createdFrom : kotlin.String = 2010-07-29 13:45:52 // kotlin.String | Retrieve entities from their creation date
            //val createdTo : kotlin.String = 2100-08-29 13:45:52 // kotlin.String | Retrieve entities to their creation date
            //val modifiedFrom : kotlin.String = 2010-07-29 13:45:52 // kotlin.String | Retrieve entities from their modification date
            //val modifiedTo : kotlin.String = 2100-08-29 13:45:52 // kotlin.String | Retrieve entities to their modification date
            //val avail : kotlin.Boolean = false // kotlin.Boolean | Defines category's visibility status
            //val productType : kotlin.String = BICYCLE // kotlin.String | A categorization for the product
            //val findValue : kotlin.String = Demo category 1 // kotlin.String | Entity search that is specified by some value
            //val findWhere : kotlin.String = name // kotlin.String | Category search that is specified by field
            //val reportRequestId : kotlin.String = 105245017661 // kotlin.String | Report request id
            //val disableReportCache : kotlin.Boolean = false // kotlin.Boolean | Disable report cache for current request
            //val disableCache : kotlin.Boolean = false // kotlin.Boolean | Disable cache for current request
            //val result : ModelResponseCategoryList = apiInstance.categoryList(start, count, pageCursor, parentId, params, responseFields, exclude, storeId, langId, createdFrom, createdTo, modifiedFrom, modifiedTo, avail, productType, findValue, findWhere, reportRequestId, disableReportCache, disableCache)
            //result shouldBe ("TODO")
        }

        // to test categoryUnassign
        should("test categoryUnassign") {
            // uncomment below to test categoryUnassign
            //val categoryId : kotlin.String = 6 // kotlin.String | Defines category unassign, specified by category id
            //val productId : kotlin.String = 10 // kotlin.String | Defines category unassign to the product, specified by product id
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val result : CartConfigUpdate200Response = apiInstance.categoryUnassign(categoryId, productId, storeId)
            //result shouldBe ("TODO")
        }

        // to test categoryUpdate
        should("test categoryUpdate") {
            // uncomment below to test categoryUpdate
            //val id : kotlin.String = 10 // kotlin.String | Defines category update specified by category id
            //val name : kotlin.String = NEW Shoes // kotlin.String | Defines new categoryâ€™s name
            //val parentId : kotlin.String = 6 // kotlin.String | Defines new parent category id
            //val storesIds : kotlin.String = 1,2 // kotlin.String | Update category in the stores that is specified by comma-separated stores' id
            //val avail : kotlin.Boolean = false // kotlin.Boolean | Defines category's visibility status
            //val sortOrder : kotlin.Int = 2 // kotlin.Int | Sort number in the list
            //val modifiedTime : kotlin.String = 2014-07-30 15:58:41 // kotlin.String | Entity's date modification
            //val description : kotlin.String = New test category // kotlin.String | Defines new category's description
            //val shortDescription : kotlin.String = Short description. This is very short description // kotlin.String | Defines short description
            //val metaTitle : kotlin.String = category,test // kotlin.String | Defines unique meta title for each entity
            //val metaDescription : kotlin.String = category,test // kotlin.String | Defines unique meta description of a entity
            //val metaKeywords : kotlin.String = category,test // kotlin.String | Defines unique meta keywords for each entity
            //val seoUrl : kotlin.String = category,test // kotlin.String | Defines unique category's URL for SEO
            //val langId : kotlin.String = 3 // kotlin.String | Language id
            //val storeId : kotlin.String = 1 // kotlin.String | Store Id
            //val result : AccountConfigUpdate200Response = apiInstance.categoryUpdate(id, name, parentId, storesIds, avail, sortOrder, modifiedTime, description, shortDescription, metaTitle, metaDescription, metaKeywords, seoUrl, langId, storeId)
            //result shouldBe ("TODO")
        }

    }
}
