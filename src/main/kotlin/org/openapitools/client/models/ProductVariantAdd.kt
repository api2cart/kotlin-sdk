/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.ProductAddTierPricesInner
import org.openapitools.client.models.ProductVariantAddAttributesInner

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param model Specifies variant's model that has to be added
 * @param productId Defines product's id where the variant has to be added
 * @param attributes Defines variant's attributes list
 * @param name Defines variant's name that has to be added
 * @param description Specifies variant's description
 * @param shortDescription Defines short description
 * @param availableForView Specifies the set of visible/invisible product's variants for users
 * @param availableForSale Specifies the set of visible/invisible product's variants for sale
 * @param isVirtual Defines whether the product is virtual
 * @param isDefault Defines as a default variant
 * @param storeId Add variants specified by store id
 * @param storesIds Assign variant to the stores that is specified by comma-separated stores' id
 * @param langId Language id
 * @param price Defines new product's variant price
 * @param oldPrice Defines product's old price
 * @param costPrice Defines new product's cost price
 * @param specialPrice Specifies variant's model that has to be added
 * @param spriceCreate Defines the date of special price creation
 * @param spriceModified Defines the date of special price modification
 * @param spriceExpire Defines the term of special price offer duration
 * @param tierPrices Defines product's tier prices
 * @param quantity Defines product variant's quantity that has to be added
 * @param warehouseId This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
 * @param inStock Set stock status
 * @param backorderStatus Set backorder status
 * @param manageStock Defines inventory tracking for product variant
 * @param lowStockThreshold Specify the quantity threshold below which the product is considered low in stock
 * @param weight Weight
 * @param width Defines product's width
 * @param height Defines product's height
 * @param length Defines product's length
 * @param weightUnit Weight Unit
 * @param sku Defines variant's sku that has to be added
 * @param barcode A barcode is a unique code composed of numbers used as a product identifier.
 * @param gtin Global Trade Item Number. An GTIN is an identifier for trade items.
 * @param upc Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products.
 * @param ean European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products.
 * @param mpn Manufacturer Part Number. A MPN is an identifier of a particular part design or material used.
 * @param isbn International Standard Book Number. An ISBN is a unique identifier for books.
 * @param manufacturer Specifies the product variant's manufacturer
 * @param createdAt Defines the date of entity creation
 * @param metaTitle Defines unique meta title for each entity
 * @param metaKeywords Defines unique meta keywords for each entity
 * @param metaDescription Defines unique meta description of a entity
 * @param url Defines unique product variant's URL
 * @param taxClassId Defines tax classes where entity has to be added
 * @param taxable Specifies whether a tax is charged
 * @param fixedCostShippingPrice Specifies fixed cost shipping price
 * @param isFreeShipping Specifies variant's free shipping flag that has to be added
 * @param countryOfOrigin The country where the inventory item was made
 * @param harmonizedSystemCode Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes
 * @param marketplaceItemProperties String containing the JSON representation of the supplied data
 * @param clearCache Is cache clear required
 */


data class ProductVariantAdd (

    /* Specifies variant's model that has to be added */
    @Json(name = "model")
    val model: kotlin.String,

    /* Defines product's id where the variant has to be added */
    @Json(name = "product_id")
    val productId: kotlin.String? = null,

    /* Defines variant's attributes list */
    @Json(name = "attributes")
    val attributes: kotlin.collections.List<ProductVariantAddAttributesInner>? = null,

    /* Defines variant's name that has to be added */
    @Json(name = "name")
    val name: kotlin.String? = null,

    /* Specifies variant's description */
    @Json(name = "description")
    val description: kotlin.String? = null,

    /* Defines short description */
    @Json(name = "short_description")
    val shortDescription: kotlin.String? = null,

    /* Specifies the set of visible/invisible product's variants for users */
    @Json(name = "available_for_view")
    val availableForView: kotlin.Boolean? = true,

    /* Specifies the set of visible/invisible product's variants for sale */
    @Json(name = "available_for_sale")
    val availableForSale: kotlin.Boolean? = true,

    /* Defines whether the product is virtual */
    @Json(name = "is_virtual")
    val isVirtual: kotlin.Boolean? = false,

    /* Defines as a default variant */
    @Json(name = "is_default")
    val isDefault: kotlin.Boolean? = null,

    /* Add variants specified by store id */
    @Json(name = "store_id")
    val storeId: kotlin.String? = null,

    /* Assign variant to the stores that is specified by comma-separated stores' id */
    @Json(name = "stores_ids")
    val storesIds: kotlin.String? = null,

    /* Language id */
    @Json(name = "lang_id")
    val langId: kotlin.String? = null,

    /* Defines new product's variant price */
    @Json(name = "price")
    val price: java.math.BigDecimal? = null,

    /* Defines product's old price */
    @Json(name = "old_price")
    val oldPrice: java.math.BigDecimal? = null,

    /* Defines new product's cost price */
    @Json(name = "cost_price")
    val costPrice: java.math.BigDecimal? = null,

    /* Specifies variant's model that has to be added */
    @Json(name = "special_price")
    val specialPrice: java.math.BigDecimal? = null,

    /* Defines the date of special price creation */
    @Json(name = "sprice_create")
    val spriceCreate: kotlin.String? = null,

    /* Defines the date of special price modification */
    @Json(name = "sprice_modified")
    val spriceModified: kotlin.String? = null,

    /* Defines the term of special price offer duration */
    @Json(name = "sprice_expire")
    val spriceExpire: kotlin.String? = null,

    /* Defines product's tier prices */
    @Json(name = "tier_prices")
    val tierPrices: kotlin.collections.List<ProductAddTierPricesInner>? = null,

    /* Defines product variant's quantity that has to be added */
    @Json(name = "quantity")
    val quantity: java.math.BigDecimal? = java.math.BigDecimal("0"),

    /* This parameter is used for selecting a warehouse where you need to set/modify a product quantity. */
    @Json(name = "warehouse_id")
    val warehouseId: kotlin.String? = null,

    /* Set stock status */
    @Json(name = "in_stock")
    val inStock: kotlin.Boolean? = null,

    /* Set backorder status */
    @Json(name = "backorder_status")
    val backorderStatus: kotlin.String? = null,

    /* Defines inventory tracking for product variant */
    @Json(name = "manage_stock")
    val manageStock: kotlin.Boolean? = null,

    /* Specify the quantity threshold below which the product is considered low in stock */
    @Json(name = "low_stock_threshold")
    val lowStockThreshold: java.math.BigDecimal? = null,

    /* Weight */
    @Json(name = "weight")
    val weight: java.math.BigDecimal? = java.math.BigDecimal("0"),

    /* Defines product's width */
    @Json(name = "width")
    val width: java.math.BigDecimal? = null,

    /* Defines product's height */
    @Json(name = "height")
    val height: java.math.BigDecimal? = null,

    /* Defines product's length */
    @Json(name = "length")
    val length: java.math.BigDecimal? = null,

    /* Weight Unit */
    @Json(name = "weight_unit")
    val weightUnit: kotlin.String? = null,

    /* Defines variant's sku that has to be added */
    @Json(name = "sku")
    val sku: kotlin.String? = null,

    /* A barcode is a unique code composed of numbers used as a product identifier. */
    @Json(name = "barcode")
    val barcode: kotlin.String? = null,

    /* Global Trade Item Number. An GTIN is an identifier for trade items. */
    @Json(name = "gtin")
    val gtin: kotlin.String? = null,

    /* Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products. */
    @Json(name = "upc")
    val upc: kotlin.String? = null,

    /* European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products. */
    @Json(name = "ean")
    val ean: kotlin.String? = null,

    /* Manufacturer Part Number. A MPN is an identifier of a particular part design or material used. */
    @Json(name = "mpn")
    val mpn: kotlin.String? = null,

    /* International Standard Book Number. An ISBN is a unique identifier for books. */
    @Json(name = "isbn")
    val isbn: kotlin.String? = null,

    /* Specifies the product variant's manufacturer */
    @Json(name = "manufacturer")
    val manufacturer: kotlin.String? = null,

    /* Defines the date of entity creation */
    @Json(name = "created_at")
    val createdAt: kotlin.String? = null,

    /* Defines unique meta title for each entity */
    @Json(name = "meta_title")
    val metaTitle: kotlin.String? = null,

    /* Defines unique meta keywords for each entity */
    @Json(name = "meta_keywords")
    val metaKeywords: kotlin.String? = null,

    /* Defines unique meta description of a entity */
    @Json(name = "meta_description")
    val metaDescription: kotlin.String? = null,

    /* Defines unique product variant's URL */
    @Json(name = "url")
    val url: kotlin.String? = null,

    /* Defines tax classes where entity has to be added */
    @Json(name = "tax_class_id")
    val taxClassId: kotlin.String? = null,

    /* Specifies whether a tax is charged */
    @Json(name = "taxable")
    val taxable: kotlin.Boolean? = true,

    /* Specifies fixed cost shipping price */
    @Json(name = "fixed_cost_shipping_price")
    val fixedCostShippingPrice: java.math.BigDecimal? = null,

    /* Specifies variant's free shipping flag that has to be added */
    @Json(name = "is_free_shipping")
    val isFreeShipping: kotlin.Boolean? = null,

    /* The country where the inventory item was made */
    @Json(name = "country_of_origin")
    val countryOfOrigin: kotlin.String? = null,

    /* Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes */
    @Json(name = "harmonized_system_code")
    val harmonizedSystemCode: kotlin.String? = null,

    /* String containing the JSON representation of the supplied data */
    @Json(name = "marketplace_item_properties")
    val marketplaceItemProperties: kotlin.String? = null,

    /* Is cache clear required */
    @Json(name = "clear_cache")
    val clearCache: kotlin.Boolean? = true

) {


}

