/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.ProductVariantUpdateOptionsInner

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param id Defines variant update specified by variant id
 * @param productId Defines product's id where the variant has to be updated
 * @param storeId Defines store id where the variant should be found
 * @param langId Language id
 * @param options Defines variant's options list
 * @param name Defines variant's name that has to be updated
 * @param description Specifies variant's description
 * @param shortDescription Defines short description
 * @param model Specifies variant's model that has to be added
 * @param sku Defines new product's variant sku
 * @param visible Set visibility status
 * @param status Defines product variant's status
 * @param backorderStatus Set backorder status
 * @param lowStockThreshold Specify the quantity threshold below which the product is considered low in stock
 * @param availableForSale Specifies the set of visible/invisible product's variants for sale
 * @param avail Defines category's visibility status
 * @param isDefault Defines as a default variant
 * @param isFreeShipping Specifies variant's free shipping flag that has to be added
 * @param taxable Specifies whether a tax is charged
 * @param taxClassId Defines tax classes where entity has to be added
 * @param isVirtual Defines whether the product is virtual
 * @param manageStock Defines inventory tracking for product variant
 * @param inStock Set stock status
 * @param warehouseId This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
 * @param reserveQuantity This parameter allows to reserve/unreserve product variants quantity.
 * @param quantity Defines new products' variants quantity
 * @param increaseQuantity Defines the incremental changes in product quantity
 * @param reduceQuantity Defines the decrement changes in product quantity
 * @param price Defines new product's variant price
 * @param specialPrice Defines new product's variant special price
 * @param retailPrice Defines new product's retail price
 * @param oldPrice Defines product's old price
 * @param costPrice Defines new product's cost price
 * @param fixedCostShippingPrice Specifies fixed cost shipping price
 * @param spriceCreate Defines the date of special price creation
 * @param spriceExpire Defines the term of special price offer duration
 * @param weight Weight
 * @param barcode A barcode is a unique code composed of numbers used as a product identifier.
 * @param width Defines product's width
 * @param weightUnit Weight Unit
 * @param height Defines product's height
 * @param length Defines product's length
 * @param gtin Global Trade Item Number. An GTIN is an identifier for trade items.
 * @param upc Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products.
 * @param mpn Manufacturer Part Number. A MPN is an identifier of a particular part design or material used.
 * @param ean European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products.
 * @param isbn International Standard Book Number. An ISBN is a unique identifier for books.
 * @param harmonizedSystemCode Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes
 * @param countryOfOrigin The country where the inventory item was made
 * @param metaTitle Defines unique meta title for each entity
 * @param metaDescription Defines unique meta description of a entity
 * @param metaKeywords Defines unique meta keywords for each entity
 * @param reindex Is reindex required
 * @param clearCache Is cache clear required
 */


data class ProductVariantUpdate (

    /* Defines variant update specified by variant id */
    @Json(name = "id")
    val id: kotlin.String? = null,

    /* Defines product's id where the variant has to be updated */
    @Json(name = "product_id")
    val productId: kotlin.String? = null,

    /* Defines store id where the variant should be found */
    @Json(name = "store_id")
    val storeId: kotlin.String? = null,

    /* Language id */
    @Json(name = "lang_id")
    val langId: kotlin.String? = null,

    /* Defines variant's options list */
    @Json(name = "options")
    val options: kotlin.collections.List<ProductVariantUpdateOptionsInner>? = null,

    /* Defines variant's name that has to be updated */
    @Json(name = "name")
    val name: kotlin.String? = null,

    /* Specifies variant's description */
    @Json(name = "description")
    val description: kotlin.String? = null,

    /* Defines short description */
    @Json(name = "short_description")
    val shortDescription: kotlin.String? = null,

    /* Specifies variant's model that has to be added */
    @Json(name = "model")
    val model: kotlin.String? = null,

    /* Defines new product's variant sku */
    @Json(name = "sku")
    val sku: kotlin.String? = null,

    /* Set visibility status */
    @Json(name = "visible")
    val visible: kotlin.String? = null,

    /* Defines product variant's status */
    @Json(name = "status")
    val status: kotlin.String? = null,

    /* Set backorder status */
    @Json(name = "backorder_status")
    val backorderStatus: kotlin.String? = null,

    /* Specify the quantity threshold below which the product is considered low in stock */
    @Json(name = "low_stock_threshold")
    val lowStockThreshold: java.math.BigDecimal? = null,

    /* Specifies the set of visible/invisible product's variants for sale */
    @Json(name = "available_for_sale")
    val availableForSale: kotlin.Boolean? = true,

    /* Defines category's visibility status */
    @Json(name = "avail")
    val avail: kotlin.Boolean? = true,

    /* Defines as a default variant */
    @Json(name = "is_default")
    val isDefault: kotlin.Boolean? = null,

    /* Specifies variant's free shipping flag that has to be added */
    @Json(name = "is_free_shipping")
    val isFreeShipping: kotlin.Boolean? = null,

    /* Specifies whether a tax is charged */
    @Json(name = "taxable")
    val taxable: kotlin.Boolean? = true,

    /* Defines tax classes where entity has to be added */
    @Json(name = "tax_class_id")
    val taxClassId: kotlin.String? = null,

    /* Defines whether the product is virtual */
    @Json(name = "is_virtual")
    val isVirtual: kotlin.Boolean? = false,

    /* Defines inventory tracking for product variant */
    @Json(name = "manage_stock")
    val manageStock: kotlin.Boolean? = null,

    /* Set stock status */
    @Json(name = "in_stock")
    val inStock: kotlin.Boolean? = null,

    /* This parameter is used for selecting a warehouse where you need to set/modify a product quantity. */
    @Json(name = "warehouse_id")
    val warehouseId: kotlin.String? = null,

    /* This parameter allows to reserve/unreserve product variants quantity. */
    @Json(name = "reserve_quantity")
    val reserveQuantity: java.math.BigDecimal? = null,

    /* Defines new products' variants quantity */
    @Json(name = "quantity")
    val quantity: java.math.BigDecimal? = null,

    /* Defines the incremental changes in product quantity */
    @Json(name = "increase_quantity")
    val increaseQuantity: java.math.BigDecimal? = java.math.BigDecimal("0"),

    /* Defines the decrement changes in product quantity */
    @Json(name = "reduce_quantity")
    val reduceQuantity: java.math.BigDecimal? = java.math.BigDecimal("0"),

    /* Defines new product's variant price */
    @Json(name = "price")
    val price: java.math.BigDecimal? = null,

    /* Defines new product's variant special price */
    @Json(name = "special_price")
    val specialPrice: java.math.BigDecimal? = null,

    /* Defines new product's retail price */
    @Json(name = "retail_price")
    val retailPrice: java.math.BigDecimal? = null,

    /* Defines product's old price */
    @Json(name = "old_price")
    val oldPrice: java.math.BigDecimal? = null,

    /* Defines new product's cost price */
    @Json(name = "cost_price")
    val costPrice: java.math.BigDecimal? = null,

    /* Specifies fixed cost shipping price */
    @Json(name = "fixed_cost_shipping_price")
    val fixedCostShippingPrice: java.math.BigDecimal? = null,

    /* Defines the date of special price creation */
    @Json(name = "sprice_create")
    val spriceCreate: kotlin.String? = null,

    /* Defines the term of special price offer duration */
    @Json(name = "sprice_expire")
    val spriceExpire: kotlin.String? = null,

    /* Weight */
    @Json(name = "weight")
    val weight: java.math.BigDecimal? = java.math.BigDecimal("0"),

    /* A barcode is a unique code composed of numbers used as a product identifier. */
    @Json(name = "barcode")
    val barcode: kotlin.String? = null,

    /* Defines product's width */
    @Json(name = "width")
    val width: java.math.BigDecimal? = null,

    /* Weight Unit */
    @Json(name = "weight_unit")
    val weightUnit: kotlin.String? = null,

    /* Defines product's height */
    @Json(name = "height")
    val height: java.math.BigDecimal? = null,

    /* Defines product's length */
    @Json(name = "length")
    val length: java.math.BigDecimal? = null,

    /* Global Trade Item Number. An GTIN is an identifier for trade items. */
    @Json(name = "gtin")
    val gtin: kotlin.String? = null,

    /* Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products. */
    @Json(name = "upc")
    val upc: kotlin.String? = null,

    /* Manufacturer Part Number. A MPN is an identifier of a particular part design or material used. */
    @Json(name = "mpn")
    val mpn: kotlin.String? = null,

    /* European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products. */
    @Json(name = "ean")
    val ean: kotlin.String? = null,

    /* International Standard Book Number. An ISBN is a unique identifier for books. */
    @Json(name = "isbn")
    val isbn: kotlin.String? = null,

    /* Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes */
    @Json(name = "harmonized_system_code")
    val harmonizedSystemCode: kotlin.String? = null,

    /* The country where the inventory item was made */
    @Json(name = "country_of_origin")
    val countryOfOrigin: kotlin.String? = null,

    /* Defines unique meta title for each entity */
    @Json(name = "meta_title")
    val metaTitle: kotlin.String? = null,

    /* Defines unique meta description of a entity */
    @Json(name = "meta_description")
    val metaDescription: kotlin.String? = null,

    /* Defines unique meta keywords for each entity */
    @Json(name = "meta_keywords")
    val metaKeywords: kotlin.String? = null,

    /* Is reindex required */
    @Json(name = "reindex")
    val reindex: kotlin.Boolean? = true,

    /* Is cache clear required */
    @Json(name = "clear_cache")
    val clearCache: kotlin.Boolean? = true

) {


}

