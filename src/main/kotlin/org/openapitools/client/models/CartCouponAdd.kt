/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param code Coupon code
 * @param actionType Coupon discount type
 * @param actionApplyTo Defines where discount should be applied
 * @param actionScope Specify how discount should be applied. If scope=matching_items, then discount will be applied to each of the items that match action conditions. Scope order means that discount will be applied once.
 * @param actionAmount Defines the discount amount value.
 * @param codes Entity codes
 * @param name Coupon name
 * @param dateStart Date start
 * @param dateEnd Defines when discount code will be expired.
 * @param usageLimit Usage limit for coupon.
 * @param usageLimitPerCustomer Usage limit per customer.
 * @param actionConditionEntity Defines entity for action condition.
 * @param actionConditionKey Defines entity attribute code for action condition.
 * @param actionConditionOperator Defines condition operator.
 * @param actionConditionValue Defines condition attribute value/s. Can be comma separated string.
 * @param includeTax Indicates whether to apply a discount for taxes.
 * @param storeId Store Id
 * @param freeCashOnDelivery Defines whether the coupon provides free cash on delivery
 * @param customerId Retrieves orders specified by customer id
 */


data class CartCouponAdd (

    /* Coupon code */
    @Json(name = "code")
    val code: kotlin.String,

    /* Coupon discount type */
    @Json(name = "action_type")
    val actionType: CartCouponAdd.ActionType,

    /* Defines where discount should be applied */
    @Json(name = "action_apply_to")
    val actionApplyTo: CartCouponAdd.ActionApplyTo,

    /* Specify how discount should be applied. If scope=matching_items, then discount will be applied to each of the items that match action conditions. Scope order means that discount will be applied once. */
    @Json(name = "action_scope")
    val actionScope: CartCouponAdd.ActionScope,

    /* Defines the discount amount value. */
    @Json(name = "action_amount")
    val actionAmount: java.math.BigDecimal,

    /* Entity codes */
    @Json(name = "codes")
    val codes: kotlin.collections.List<kotlin.String>? = null,

    /* Coupon name */
    @Json(name = "name")
    val name: kotlin.String? = null,

    /* Date start */
    @Json(name = "date_start")
    val dateStart: kotlin.String? = "now",

    /* Defines when discount code will be expired. */
    @Json(name = "date_end")
    val dateEnd: kotlin.String? = null,

    /* Usage limit for coupon. */
    @Json(name = "usage_limit")
    val usageLimit: kotlin.Int? = null,

    /* Usage limit per customer. */
    @Json(name = "usage_limit_per_customer")
    val usageLimitPerCustomer: kotlin.Int? = null,

    /* Defines entity for action condition. */
    @Json(name = "action_condition_entity")
    val actionConditionEntity: kotlin.String? = null,

    /* Defines entity attribute code for action condition. */
    @Json(name = "action_condition_key")
    val actionConditionKey: kotlin.String? = null,

    /* Defines condition operator. */
    @Json(name = "action_condition_operator")
    val actionConditionOperator: kotlin.String? = null,

    /* Defines condition attribute value/s. Can be comma separated string. */
    @Json(name = "action_condition_value")
    val actionConditionValue: kotlin.String? = null,

    /* Indicates whether to apply a discount for taxes. */
    @Json(name = "include_tax")
    val includeTax: kotlin.Boolean? = false,

    /* Store Id */
    @Json(name = "store_id")
    val storeId: kotlin.String? = null,

    /* Defines whether the coupon provides free cash on delivery */
    @Json(name = "free_cash_on_delivery")
    val freeCashOnDelivery: kotlin.Boolean? = null,

    /* Retrieves orders specified by customer id */
    @Json(name = "customer_id")
    val customerId: kotlin.String? = null

) {

    /**
     * Coupon discount type
     *
     * Values: percent,fixed
     */
    @JsonClass(generateAdapter = false)
    enum class ActionType(val value: kotlin.String) {
        @Json(name = "percent") percent("percent"),
        @Json(name = "fixed") fixed("fixed");
    }
    /**
     * Defines where discount should be applied
     *
     * Values: order_total,item_price,shipping
     */
    @JsonClass(generateAdapter = false)
    enum class ActionApplyTo(val value: kotlin.String) {
        @Json(name = "order_total") order_total("order_total"),
        @Json(name = "item_price") item_price("item_price"),
        @Json(name = "shipping") shipping("shipping");
    }
    /**
     * Specify how discount should be applied. If scope=matching_items, then discount will be applied to each of the items that match action conditions. Scope order means that discount will be applied once.
     *
     * Values: order,matching_items
     */
    @JsonClass(generateAdapter = false)
    enum class ActionScope(val value: kotlin.String) {
        @Json(name = "order") order("order"),
        @Json(name = "matching_items") matching_items("matching_items");
    }

}

