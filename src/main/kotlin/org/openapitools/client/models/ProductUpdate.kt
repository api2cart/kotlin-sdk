/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.ProductAddManufacturerInfo
import org.openapitools.client.models.ProductAddPackageDetails
import org.openapitools.client.models.ProductAddPersonalizationDetails
import org.openapitools.client.models.ProductAddSpecificsInner
import org.openapitools.client.models.ProductAddTierPricesInner

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param id Defines product id that has to be updated
 * @param model Defines product model that has to be updated
 * @param sku Defines new product's sku
 * @param name Defines product's name that has to be updated
 * @param description Defines new product's description
 * @param shortDescription Defines short description
 * @param price Defines new product's price
 * @param oldPrice Defines product's old price
 * @param specialPrice Defines new product's special price
 * @param spriceCreate Defines the date of special price creation
 * @param spriceExpire Defines the term of special price offer duration
 * @param costPrice Defines new product's cost price
 * @param fixedCostShippingPrice Specifies product's fixed cost shipping price
 * @param retailPrice Defines new product's retail price
 * @param tierPrices Defines product's tier prices
 * @param reservePrice Defines reserve price value
 * @param buyitnowPrice Defines buy it now value
 * @param taxable Specifies whether a tax is charged
 * @param taxClassId Defines tax classes where entity has to be added
 * @param type Defines product's type
 * @param status Defines product's status
 * @param condition The human-readable label for the condition (e.g., \"New\").
 * @param visible Set visibility status
 * @param inStock Set stock status
 * @param avail Defines category's visibility status
 * @param availFrom Allows to schedule a time in the future that the item becomes available. The value should be greater than the current date and time.
 * @param productClass A categorization for the product
 * @param availableForView Specifies the set of visible/invisible products for users
 * @param storesIds Assign product to the stores that is specified by comma-separated stores' id
 * @param storeId Defines store id where the product should be found
 * @param langId Language id
 * @param quantity Defines new product's quantity
 * @param reserveQuantity This parameter allows to reserve/unreserve product quantity.
 * @param manageStock Defines inventory tracking for product
 * @param backorderStatus Set backorder status
 * @param increaseQuantity Defines the incremental changes in product quantity
 * @param reduceQuantity Defines the decrement changes in product quantity
 * @param lowStockThreshold Specify the quantity threshold below which the product is considered low in stock
 * @param warehouseId This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
 * @param weight Weight
 * @param weightUnit Weight Unit
 * @param height Defines product's height
 * @param length Defines product's length
 * @param width Defines product's width
 * @param dimensionsUnit Weight Unit
 * @param isVirtual Defines whether the product is virtual
 * @param isFreeShipping Specifies product free shipping flag that has to be updated
 * @param gtin Global Trade Item Number. An GTIN is an identifier for trade items.
 * @param upc Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products.
 * @param mpn Manufacturer Part Number. A MPN is an identifier of a particular part design or material used.
 * @param ean European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products.
 * @param isbn International Standard Book Number. An ISBN is a unique identifier for books.
 * @param barcode A barcode is a unique code composed of numbers used as a product identifier.
 * @param manufacturer Defines product's manufacturer
 * @param manufacturerId Defines product's manufacturer by manufacturer_id
 * @param categoriesIds Defines product add that is specified by comma-separated categories id
 * @param relatedProductsIds Defines product related products ids that has to be updated
 * @param upSellProductsIds Defines product up-sell products ids that has to be updated
 * @param crossSellProductsIds Defines product cross-sells products ids that has to be updated
 * @param metaTitle Defines unique meta title for each entity
 * @param metaKeywords Defines unique meta keywords for each entity
 * @param metaDescription Defines unique meta description of a entity
 * @param seoUrl Defines unique URL for SEO
 * @param searchKeywords Defines unique search keywords
 * @param tags Product tags
 * @param deliveryCode The delivery promise that applies to offer
 * @param packageDetails 
 * @param countryOfOrigin The country where the inventory item was made
 * @param harmonizedSystemCode Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes
 * @param shippingTemplateId The numeric ID of the shipping template associated with the products in Etsy. You can find possible values in the \"cart.info\" API method response, in the field shipping_zones[]->id.
 * @param whenMade An enumerated string for the era in which the maker made the product.
 * @param isSupply If true, it indicates the product as a supply, otherwise it indicates that it is a finished product.
 * @param downloadable Defines whether the product is downloadable
 * @param materials A list of material strings for materials used in the product.
 * @param autoRenew When true, automatically renews a listing upon its expiration.
 * @param onSale Set whether the product on sale
 * @param productionPartnerIds Defines product production partner ids that has to be updated
 * @param manufacturerInfo 
 * @param reportRequestId Report request id
 * @param disableReportCache Disable report cache for current request
 * @param reindex Is reindex required
 * @param clearCache Is cache clear required
 * @param checkProcessStatus Disable or enable check process status. Please note that the response will be slower due to additional requests to the store.
 * @param specifics An array of Item Specific Name/Value pairs used by the seller to provide descriptive details of an item in a structured manner.         The list of possible specifications can be obtained using the category.info method (additional_fields->product_specifics).         <b>The structure of the parameter is different for specific platforms.</b>
 * @param shopSectionId Add Shop Section Id
 * @param personalizationDetails 
 * @param marketplaceItemProperties String containing the JSON representation of the supplied data
 * @param minOrderQuantity The minimum quantity an order must contain, to be eligible to purchase this product.
 */


data class ProductUpdate (

    /* Defines product id that has to be updated */
    @Json(name = "id")
    val id: kotlin.String? = null,

    /* Defines product model that has to be updated */
    @Json(name = "model")
    val model: kotlin.String? = null,

    /* Defines new product's sku */
    @Json(name = "sku")
    val sku: kotlin.String? = null,

    /* Defines product's name that has to be updated */
    @Json(name = "name")
    val name: kotlin.String? = null,

    /* Defines new product's description */
    @Json(name = "description")
    val description: kotlin.String? = null,

    /* Defines short description */
    @Json(name = "short_description")
    val shortDescription: kotlin.String? = null,

    /* Defines new product's price */
    @Json(name = "price")
    val price: java.math.BigDecimal? = null,

    /* Defines product's old price */
    @Json(name = "old_price")
    val oldPrice: java.math.BigDecimal? = null,

    /* Defines new product's special price */
    @Json(name = "special_price")
    val specialPrice: java.math.BigDecimal? = null,

    /* Defines the date of special price creation */
    @Json(name = "sprice_create")
    val spriceCreate: kotlin.String? = null,

    /* Defines the term of special price offer duration */
    @Json(name = "sprice_expire")
    val spriceExpire: kotlin.String? = null,

    /* Defines new product's cost price */
    @Json(name = "cost_price")
    val costPrice: java.math.BigDecimal? = null,

    /* Specifies product's fixed cost shipping price */
    @Json(name = "fixed_cost_shipping_price")
    val fixedCostShippingPrice: java.math.BigDecimal? = null,

    /* Defines new product's retail price */
    @Json(name = "retail_price")
    val retailPrice: java.math.BigDecimal? = null,

    /* Defines product's tier prices */
    @Json(name = "tier_prices")
    val tierPrices: kotlin.collections.List<ProductAddTierPricesInner>? = null,

    /* Defines reserve price value */
    @Json(name = "reserve_price")
    val reservePrice: java.math.BigDecimal? = null,

    /* Defines buy it now value */
    @Json(name = "buyitnow_price")
    val buyitnowPrice: java.math.BigDecimal? = null,

    /* Specifies whether a tax is charged */
    @Json(name = "taxable")
    val taxable: kotlin.Boolean? = true,

    /* Defines tax classes where entity has to be added */
    @Json(name = "tax_class_id")
    val taxClassId: kotlin.String? = null,

    /* Defines product's type */
    @Json(name = "type")
    val type: kotlin.String? = null,

    /* Defines product's status */
    @Json(name = "status")
    val status: kotlin.String? = null,

    /* The human-readable label for the condition (e.g., \"New\"). */
    @Json(name = "condition")
    val condition: kotlin.String? = null,

    /* Set visibility status */
    @Json(name = "visible")
    val visible: kotlin.String? = null,

    /* Set stock status */
    @Json(name = "in_stock")
    val inStock: kotlin.Boolean? = null,

    /* Defines category's visibility status */
    @Json(name = "avail")
    val avail: kotlin.Boolean? = true,

    /* Allows to schedule a time in the future that the item becomes available. The value should be greater than the current date and time. */
    @Json(name = "avail_from")
    val availFrom: kotlin.String? = null,

    /* A categorization for the product */
    @Json(name = "product_class")
    val productClass: kotlin.String? = null,

    /* Specifies the set of visible/invisible products for users */
    @Json(name = "available_for_view")
    val availableForView: kotlin.Boolean? = null,

    /* Assign product to the stores that is specified by comma-separated stores' id */
    @Json(name = "stores_ids")
    val storesIds: kotlin.String? = null,

    /* Defines store id where the product should be found */
    @Json(name = "store_id")
    val storeId: kotlin.String? = null,

    /* Language id */
    @Json(name = "lang_id")
    val langId: kotlin.String? = null,

    /* Defines new product's quantity */
    @Json(name = "quantity")
    val quantity: java.math.BigDecimal? = null,

    /* This parameter allows to reserve/unreserve product quantity. */
    @Json(name = "reserve_quantity")
    val reserveQuantity: java.math.BigDecimal? = null,

    /* Defines inventory tracking for product */
    @Json(name = "manage_stock")
    val manageStock: kotlin.Boolean? = null,

    /* Set backorder status */
    @Json(name = "backorder_status")
    val backorderStatus: kotlin.String? = null,

    /* Defines the incremental changes in product quantity */
    @Json(name = "increase_quantity")
    val increaseQuantity: java.math.BigDecimal? = null,

    /* Defines the decrement changes in product quantity */
    @Json(name = "reduce_quantity")
    val reduceQuantity: java.math.BigDecimal? = null,

    /* Specify the quantity threshold below which the product is considered low in stock */
    @Json(name = "low_stock_threshold")
    val lowStockThreshold: java.math.BigDecimal? = null,

    /* This parameter is used for selecting a warehouse where you need to set/modify a product quantity. */
    @Json(name = "warehouse_id")
    val warehouseId: kotlin.String? = null,

    /* Weight */
    @Json(name = "weight")
    val weight: java.math.BigDecimal? = null,

    /* Weight Unit */
    @Json(name = "weight_unit")
    val weightUnit: kotlin.String? = null,

    /* Defines product's height */
    @Json(name = "height")
    val height: java.math.BigDecimal? = null,

    /* Defines product's length */
    @Json(name = "length")
    val length: java.math.BigDecimal? = null,

    /* Defines product's width */
    @Json(name = "width")
    val width: java.math.BigDecimal? = null,

    /* Weight Unit */
    @Json(name = "dimensions_unit")
    val dimensionsUnit: kotlin.String? = null,

    /* Defines whether the product is virtual */
    @Json(name = "is_virtual")
    val isVirtual: kotlin.Boolean? = false,

    /* Specifies product free shipping flag that has to be updated */
    @Json(name = "is_free_shipping")
    val isFreeShipping: kotlin.Boolean? = null,

    /* Global Trade Item Number. An GTIN is an identifier for trade items. */
    @Json(name = "gtin")
    val gtin: kotlin.String? = null,

    /* Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products. */
    @Json(name = "upc")
    val upc: kotlin.String? = null,

    /* Manufacturer Part Number. A MPN is an identifier of a particular part design or material used. */
    @Json(name = "mpn")
    val mpn: kotlin.String? = null,

    /* European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products. */
    @Json(name = "ean")
    val ean: kotlin.String? = null,

    /* International Standard Book Number. An ISBN is a unique identifier for books. */
    @Json(name = "isbn")
    val isbn: kotlin.String? = null,

    /* A barcode is a unique code composed of numbers used as a product identifier. */
    @Json(name = "barcode")
    val barcode: kotlin.String? = null,

    /* Defines product's manufacturer */
    @Json(name = "manufacturer")
    val manufacturer: kotlin.String? = null,

    /* Defines product's manufacturer by manufacturer_id */
    @Json(name = "manufacturer_id")
    val manufacturerId: kotlin.String? = null,

    /* Defines product add that is specified by comma-separated categories id */
    @Json(name = "categories_ids")
    val categoriesIds: kotlin.String? = null,

    /* Defines product related products ids that has to be updated */
    @Json(name = "related_products_ids")
    val relatedProductsIds: kotlin.String? = null,

    /* Defines product up-sell products ids that has to be updated */
    @Json(name = "up_sell_products_ids")
    val upSellProductsIds: kotlin.String? = null,

    /* Defines product cross-sells products ids that has to be updated */
    @Json(name = "cross_sell_products_ids")
    val crossSellProductsIds: kotlin.String? = null,

    /* Defines unique meta title for each entity */
    @Json(name = "meta_title")
    val metaTitle: kotlin.String? = null,

    /* Defines unique meta keywords for each entity */
    @Json(name = "meta_keywords")
    val metaKeywords: kotlin.String? = null,

    /* Defines unique meta description of a entity */
    @Json(name = "meta_description")
    val metaDescription: kotlin.String? = null,

    /* Defines unique URL for SEO */
    @Json(name = "seo_url")
    val seoUrl: kotlin.String? = null,

    /* Defines unique search keywords */
    @Json(name = "search_keywords")
    val searchKeywords: kotlin.String? = null,

    /* Product tags */
    @Json(name = "tags")
    val tags: kotlin.String? = null,

    /* The delivery promise that applies to offer */
    @Json(name = "delivery_code")
    val deliveryCode: kotlin.String? = null,

    @Json(name = "package_details")
    val packageDetails: ProductAddPackageDetails? = null,

    /* The country where the inventory item was made */
    @Json(name = "country_of_origin")
    val countryOfOrigin: kotlin.String? = null,

    /* Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes */
    @Json(name = "harmonized_system_code")
    val harmonizedSystemCode: kotlin.String? = null,

    /* The numeric ID of the shipping template associated with the products in Etsy. You can find possible values in the \"cart.info\" API method response, in the field shipping_zones[]->id. */
    @Json(name = "shipping_template_id")
    val shippingTemplateId: kotlin.Int? = 0,

    /* An enumerated string for the era in which the maker made the product. */
    @Json(name = "when_made")
    val whenMade: kotlin.String? = "made_to_order",

    /* If true, it indicates the product as a supply, otherwise it indicates that it is a finished product. */
    @Json(name = "is_supply")
    val isSupply: kotlin.Boolean? = true,

    /* Defines whether the product is downloadable */
    @Json(name = "downloadable")
    val downloadable: kotlin.Boolean? = false,

    /* A list of material strings for materials used in the product. */
    @Json(name = "materials")
    val materials: kotlin.collections.List<kotlin.String>? = null,

    /* When true, automatically renews a listing upon its expiration. */
    @Json(name = "auto_renew")
    val autoRenew: kotlin.Boolean? = false,

    /* Set whether the product on sale */
    @Json(name = "on_sale")
    val onSale: kotlin.Boolean? = false,

    /* Defines product production partner ids that has to be updated */
    @Json(name = "production_partner_ids")
    val productionPartnerIds: kotlin.String? = null,

    @Json(name = "manufacturer_info")
    val manufacturerInfo: ProductAddManufacturerInfo? = null,

    /* Report request id */
    @Json(name = "report_request_id")
    val reportRequestId: kotlin.String? = null,

    /* Disable report cache for current request */
    @Json(name = "disable_report_cache")
    val disableReportCache: kotlin.Boolean? = false,

    /* Is reindex required */
    @Json(name = "reindex")
    val reindex: kotlin.Boolean? = true,

    /* Is cache clear required */
    @Json(name = "clear_cache")
    val clearCache: kotlin.Boolean? = true,

    /* Disable or enable check process status. Please note that the response will be slower due to additional requests to the store. */
    @Json(name = "check_process_status")
    val checkProcessStatus: kotlin.Boolean? = false,

    /* An array of Item Specific Name/Value pairs used by the seller to provide descriptive details of an item in a structured manner.         The list of possible specifications can be obtained using the category.info method (additional_fields->product_specifics).         <b>The structure of the parameter is different for specific platforms.</b> */
    @Json(name = "specifics")
    val specifics: kotlin.collections.List<ProductAddSpecificsInner>? = null,

    /* Add Shop Section Id */
    @Json(name = "shop_section_id")
    val shopSectionId: kotlin.Int? = null,

    @Json(name = "personalization_details")
    val personalizationDetails: ProductAddPersonalizationDetails? = null,

    /* String containing the JSON representation of the supplied data */
    @Json(name = "marketplace_item_properties")
    val marketplaceItemProperties: kotlin.String? = null,

    /* The minimum quantity an order must contain, to be eligible to purchase this product. */
    @Json(name = "min_order_quantity")
    val minOrderQuantity: java.math.BigDecimal? = null

) {


}

