/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.AccountCartAdd
import org.openapitools.client.models.AccountCartAdd200Response
import org.openapitools.client.models.AccountCartList200Response
import org.openapitools.client.models.AccountConfigUpdate200Response
import org.openapitools.client.models.AccountFailedWebhooks200Response
import org.openapitools.client.models.AccountSupportedPlatforms200Response

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class AccountApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.api2cart.com/v1.1")
        }
    }

    /**
     * account.cart.add
     * Use this method to automate the process of connecting stores to API2Cart. The list of parameters will vary depending on the platform. To get a list of parameters that are specific to a particular shopping platform, you need to execute the account.supported_platforms.json method.
     * @param accountCartAdd 
     * @return AccountCartAdd200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun accountCartAdd(accountCartAdd: AccountCartAdd) : AccountCartAdd200Response {
        val localVarResponse = accountCartAddWithHttpInfo(accountCartAdd = accountCartAdd)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AccountCartAdd200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * account.cart.add
     * Use this method to automate the process of connecting stores to API2Cart. The list of parameters will vary depending on the platform. To get a list of parameters that are specific to a particular shopping platform, you need to execute the account.supported_platforms.json method.
     * @param accountCartAdd 
     * @return ApiResponse<AccountCartAdd200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun accountCartAddWithHttpInfo(accountCartAdd: AccountCartAdd) : ApiResponse<AccountCartAdd200Response?> {
        val localVariableConfig = accountCartAddRequestConfig(accountCartAdd = accountCartAdd)

        return request<AccountCartAdd, AccountCartAdd200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation accountCartAdd
     *
     * @param accountCartAdd 
     * @return RequestConfig
     */
    fun accountCartAddRequestConfig(accountCartAdd: AccountCartAdd) : RequestConfig<AccountCartAdd> {
        val localVariableBody = accountCartAdd
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/account.cart.add.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * account.cart.list
     * This method lets you get a list of online stores connected to your API2Cart account. You can get the number of API requests to each store if you specify a period using parameters (request_from_date, request_to_date). The total_calls field is displayed only if there are parameters (request_from_date, request_to_date).
     * @param storeUrl A web address of a store (optional)
     * @param storeKey Find store by store key (optional)
     * @param requestFromDate Retrieve entities from their creation date (optional)
     * @param requestToDate Retrieve entities to their creation date (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "force_all")
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return AccountCartList200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun accountCartList(storeUrl: kotlin.String? = null, storeKey: kotlin.String? = null, requestFromDate: kotlin.String? = null, requestToDate: kotlin.String? = null, params: kotlin.String? = "force_all", exclude: kotlin.String? = null) : AccountCartList200Response {
        val localVarResponse = accountCartListWithHttpInfo(storeUrl = storeUrl, storeKey = storeKey, requestFromDate = requestFromDate, requestToDate = requestToDate, params = params, exclude = exclude)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AccountCartList200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * account.cart.list
     * This method lets you get a list of online stores connected to your API2Cart account. You can get the number of API requests to each store if you specify a period using parameters (request_from_date, request_to_date). The total_calls field is displayed only if there are parameters (request_from_date, request_to_date).
     * @param storeUrl A web address of a store (optional)
     * @param storeKey Find store by store key (optional)
     * @param requestFromDate Retrieve entities from their creation date (optional)
     * @param requestToDate Retrieve entities to their creation date (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "force_all")
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ApiResponse<AccountCartList200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun accountCartListWithHttpInfo(storeUrl: kotlin.String?, storeKey: kotlin.String?, requestFromDate: kotlin.String?, requestToDate: kotlin.String?, params: kotlin.String?, exclude: kotlin.String?) : ApiResponse<AccountCartList200Response?> {
        val localVariableConfig = accountCartListRequestConfig(storeUrl = storeUrl, storeKey = storeKey, requestFromDate = requestFromDate, requestToDate = requestToDate, params = params, exclude = exclude)

        return request<Unit, AccountCartList200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation accountCartList
     *
     * @param storeUrl A web address of a store (optional)
     * @param storeKey Find store by store key (optional)
     * @param requestFromDate Retrieve entities from their creation date (optional)
     * @param requestToDate Retrieve entities to their creation date (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "force_all")
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return RequestConfig
     */
    fun accountCartListRequestConfig(storeUrl: kotlin.String?, storeKey: kotlin.String?, requestFromDate: kotlin.String?, requestToDate: kotlin.String?, params: kotlin.String?, exclude: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (storeUrl != null) {
                    put("store_url", listOf(storeUrl.toString()))
                }
                if (storeKey != null) {
                    put("store_key", listOf(storeKey.toString()))
                }
                if (requestFromDate != null) {
                    put("request_from_date", listOf(requestFromDate.toString()))
                }
                if (requestToDate != null) {
                    put("request_to_date", listOf(requestToDate.toString()))
                }
                if (params != null) {
                    put("params", listOf(params.toString()))
                }
                if (exclude != null) {
                    put("exclude", listOf(exclude.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/account.cart.list.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * account.config.update
     * Use this method to automate the change of credentials used to connect online stores. The list of supported parameters differs depending on the platform.
     * @param replaceParameters Identifies if there is a necessity to replace parameters (optional)
     * @param newStoreUrl The web address of the store you want to update to connect to API2Cart (optional)
     * @param newStoreKey Update store key (optional)
     * @param bridgeUrl This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store) (optional)
     * @param storeRoot Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter) (optional)
     * @param dbTablesPrefix DB tables prefix (optional)
     * @param userAgent This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store&#39;s firewall may block specific values. (optional)
     * @param `3dcartPrivateKey` 3DCart Private Key (optional)
     * @param `3dcartAccessToken` 3DCart Token (optional)
     * @param `3dcartapiApiKey` 3DCart API Key (optional)
     * @param amazonSpClientId Amazon SP API app client id (optional)
     * @param amazonSpClientSecret Amazon SP API app client secret (optional)
     * @param amazonSpRefreshToken Amazon SP API OAuth refresh token (optional)
     * @param amazonSpAwsRegion Amazon AWS Region (optional)
     * @param amazonSpApiEnvironment Amazon SP API environment (optional, default to "production")
     * @param amazonSellerId Amazon Seller ID (Merchant token) (optional)
     * @param aspdotnetstorefrontApiUser It&#39;s a AspDotNetStorefront account for which API is available (optional)
     * @param aspdotnetstorefrontApiPass AspDotNetStorefront API Password (optional)
     * @param bigcommerceapiAdminAccount It&#39;s a BigCommerce account for which API is enabled (optional)
     * @param bigcommerceapiApiPath BigCommerce API URL (optional)
     * @param bigcommerceapiApiKey Bigcommerce API Key (optional)
     * @param bigcommerceapiClientId Client ID of the requesting app (optional)
     * @param bigcommerceapiAccessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param bigcommerceapiContext API Path section unique to the store (optional)
     * @param bolApiKey Bol API Key (optional)
     * @param bolApiSecret Bol API Secret (optional)
     * @param bolRetailerId Bol Retailer ID (optional)
     * @param demandwareClientId Demandware client id (optional)
     * @param demandwareApiPassword Demandware api password (optional)
     * @param demandwareUserName Demandware user name (optional)
     * @param demandwareUserPassword Demandware user password (optional)
     * @param ebayClientId Application ID (AppID). (optional)
     * @param ebayClientSecret Shared Secret from eBay application (optional)
     * @param ebayRuname The RuName value that eBay assigns to your application. (optional)
     * @param ebayAccessToken Used to authenticate API requests. (optional)
     * @param ebayRefreshToken Used to renew the access token. (optional)
     * @param ebayEnvironment eBay environment (optional)
     * @param ebaySiteId eBay global ID (optional, default to 0)
     * @param ecwidAcessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param ecwidStoreId Store Id (optional)
     * @param lazadaAppId Lazada App ID (optional)
     * @param lazadaAppSecret Lazada App Secret (optional)
     * @param lazadaRefreshToken Lazada Refresh Token (optional)
     * @param lazadaRegion Lazada API endpoint Region (optional)
     * @param etsyKeystring Etsy keystring (optional)
     * @param etsySharedSecret Etsy shared secret (optional)
     * @param etsyAccessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param etsyTokenSecret Secret token authorizing the app to access resources on behalf of a user (optional)
     * @param etsyClientId Etsy Client Id (optional)
     * @param etsyRefreshToken Etsy Refresh token (optional)
     * @param facebookAppId Facebook App ID (optional)
     * @param facebookAppSecret Facebook App Secret (optional)
     * @param facebookAccessToken Facebook Access Token (optional)
     * @param facebookBusinessId Facebook Business ID (optional)
     * @param netoApiKey Neto API Key (optional)
     * @param netoApiUsername Neto User Name (optional)
     * @param shoplineAccessToken Shopline APP Key (optional)
     * @param shoplineAppKey Shopline APP Key (optional)
     * @param shoplineAppSecret Shopline App Secret (optional)
     * @param shoplineSharedSecret Shopline Shared Secret (optional)
     * @param shopifyAccessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param shopifyApiKey Shopify API Key (optional)
     * @param shopifyApiPassword Shopify API Password (optional)
     * @param shopifySharedSecret Shared secret (optional)
     * @param shoplazzaAccessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param shoplazzaSharedSecret Shared secret (optional)
     * @param mivaAccessToken Miva access token (optional)
     * @param mivaSignature Miva signature (optional)
     * @param shopwareAccessKey Shopware access key (optional)
     * @param shopwareApiKey Shopware api key (optional)
     * @param shopwareApiSecret Shopware client secret access key (optional)
     * @param volusionLogin It&#39;s a Volusion account for which API is enabled (optional)
     * @param volusionPassword Volusion API Password (optional)
     * @param walmartClientId Walmart client ID. For the region &#39;ca&#39; use Consumer ID (optional)
     * @param walmartClientSecret Walmart client secret. For the region &#39;ca&#39; use Private Key (optional)
     * @param walmartEnvironment Walmart environment (optional, default to "production")
     * @param walmartChannelType Walmart WM_CONSUMER.CHANNEL.TYPE header (optional)
     * @param walmartRegion Walmart region (optional, default to "us")
     * @param squareClientId Square (Weebly) Client ID (optional)
     * @param squareClientSecret Square (Weebly) Client Secret (optional)
     * @param squareRefreshToken Square (Weebly) Refresh Token (optional)
     * @param squarespaceApiKey Squarespace API Key (optional)
     * @param squarespaceClientId Squarespace Connector Client ID (optional)
     * @param squarespaceClientSecret Squarespace Connector Client Secret (optional)
     * @param squarespaceAccessToken Squarespace access token (optional)
     * @param squarespaceRefreshToken Squarespace refresh token (optional)
     * @param hybrisClientId Omni Commerce Connector Client ID (optional)
     * @param hybrisClientSecret Omni Commerce Connector Client Secret (optional)
     * @param hybrisUsername User Name (optional)
     * @param hybrisPassword User password (optional)
     * @param hybrisWebsites Websites to stores mapping data (optional)
     * @param lightspeedApiKey LightSpeed api key (optional)
     * @param lightspeedApiSecret LightSpeed api secret (optional)
     * @param commercehqApiKey CommerceHQ api key (optional)
     * @param commercehqApiPassword CommerceHQ api password (optional)
     * @param wcConsumerKey Woocommerce consumer key (optional)
     * @param wcConsumerSecret Woocommerce consumer secret (optional)
     * @param magentoConsumerKey Magento Consumer Key (optional)
     * @param magentoConsumerSecret Magento Consumer Secret (optional)
     * @param magentoAccessToken Magento Access Token (optional)
     * @param magentoTokenSecret Magento Token Secret (optional)
     * @param prestashopWebserviceKey Prestashop webservice key (optional)
     * @param wixAppId Wix App ID (optional)
     * @param wixAppSecretKey Wix App Secret Key (optional)
     * @param wixInstanceId Wix Instance ID (optional)
     * @param wixRefreshToken Wix refresh token (optional)
     * @param mercadoLibreAppId Mercado Libre App ID (optional)
     * @param mercadoLibreAppSecretKey Mercado Libre App Secret Key (optional)
     * @param mercadoLibreRefreshToken Mercado Libre Refresh Token (optional)
     * @param zidClientId Zid Client ID (optional)
     * @param zidClientSecret Zid Client Secret (optional)
     * @param zidAccessToken Zid Access Token (optional)
     * @param zidAuthorization Zid Authorization (optional)
     * @param zidRefreshToken Zid refresh token (optional)
     * @param flipkartClientId Flipkart Client ID (optional)
     * @param flipkartClientSecret Flipkart Client Secret (optional)
     * @param allegroClientId Allegro Client ID (optional)
     * @param allegroClientSecret Allegro Client Secret (optional)
     * @param allegroAccessToken Allegro Access Token (optional)
     * @param allegroRefreshToken Allegro Refresh Token (optional)
     * @param allegroEnvironment Allegro Environment (optional, default to "production")
     * @param zohoClientId Zoho Client ID (optional)
     * @param zohoClientSecret Zoho Client Secret (optional)
     * @param zohoRefreshToken Zoho Refresh Token (optional)
     * @param zohoRegion Zoho API endpoint Region (optional)
     * @param tiendanubeUserId Tiendanube User ID (optional)
     * @param tiendanubeAccessToken Tiendanube Access Token (optional)
     * @param tiendanubeClientSecret Tiendanube Client Secret (optional)
     * @param ottoClientId Otto Client ID (optional)
     * @param ottoClientSecret Otto Client Secret (optional)
     * @param ottoAppId Otto App ID (optional)
     * @param ottoRefreshToken Otto Refresh Token (optional)
     * @param ottoEnvironment Otto Environment (optional)
     * @param ottoAccessToken Otto Access Token (optional)
     * @param tiktokshopAppKey TikTok Shop App Key (optional)
     * @param tiktokshopAppSecret TikTok Shop App Secret (optional)
     * @param tiktokshopRefreshToken TikTok Shop Refresh Token (optional)
     * @param tiktokshopAccessToken TikTok Shop Access Token (optional)
     * @param sallaClientId Salla Client ID (optional)
     * @param sallaClientSecret Salla Client Secret (optional)
     * @param sallaRefreshToken Salla Refresh Token (optional)
     * @param sallaAccessToken Salla Access Token (optional)
     * @return AccountConfigUpdate200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun accountConfigUpdate(replaceParameters: kotlin.Boolean? = null, newStoreUrl: kotlin.String? = null, newStoreKey: kotlin.String? = null, bridgeUrl: kotlin.String? = null, storeRoot: kotlin.String? = null, dbTablesPrefix: kotlin.String? = null, userAgent: kotlin.String? = null, `3dcartPrivateKey`: kotlin.String? = null, `3dcartAccessToken`: kotlin.String? = null, `3dcartapiApiKey`: kotlin.String? = null, amazonSpClientId: kotlin.String? = null, amazonSpClientSecret: kotlin.String? = null, amazonSpRefreshToken: kotlin.String? = null, amazonSpAwsRegion: kotlin.String? = null, amazonSpApiEnvironment: kotlin.String? = "production", amazonSellerId: kotlin.String? = null, aspdotnetstorefrontApiUser: kotlin.String? = null, aspdotnetstorefrontApiPass: kotlin.String? = null, bigcommerceapiAdminAccount: kotlin.String? = null, bigcommerceapiApiPath: kotlin.String? = null, bigcommerceapiApiKey: kotlin.String? = null, bigcommerceapiClientId: kotlin.String? = null, bigcommerceapiAccessToken: kotlin.String? = null, bigcommerceapiContext: kotlin.String? = null, bolApiKey: kotlin.String? = null, bolApiSecret: kotlin.String? = null, bolRetailerId: kotlin.Int? = null, demandwareClientId: kotlin.String? = null, demandwareApiPassword: kotlin.String? = null, demandwareUserName: kotlin.String? = null, demandwareUserPassword: kotlin.String? = null, ebayClientId: kotlin.String? = null, ebayClientSecret: kotlin.String? = null, ebayRuname: kotlin.String? = null, ebayAccessToken: kotlin.String? = null, ebayRefreshToken: kotlin.String? = null, ebayEnvironment: kotlin.String? = null, ebaySiteId: kotlin.Int? = 0, ecwidAcessToken: kotlin.String? = null, ecwidStoreId: kotlin.String? = null, lazadaAppId: kotlin.String? = null, lazadaAppSecret: kotlin.String? = null, lazadaRefreshToken: kotlin.String? = null, lazadaRegion: kotlin.String? = null, etsyKeystring: kotlin.String? = null, etsySharedSecret: kotlin.String? = null, etsyAccessToken: kotlin.String? = null, etsyTokenSecret: kotlin.String? = null, etsyClientId: kotlin.String? = null, etsyRefreshToken: kotlin.String? = null, facebookAppId: kotlin.String? = null, facebookAppSecret: kotlin.String? = null, facebookAccessToken: kotlin.String? = null, facebookBusinessId: kotlin.String? = null, netoApiKey: kotlin.String? = null, netoApiUsername: kotlin.String? = null, shoplineAccessToken: kotlin.String? = null, shoplineAppKey: kotlin.String? = null, shoplineAppSecret: kotlin.String? = null, shoplineSharedSecret: kotlin.String? = null, shopifyAccessToken: kotlin.String? = null, shopifyApiKey: kotlin.String? = null, shopifyApiPassword: kotlin.String? = null, shopifySharedSecret: kotlin.String? = null, shoplazzaAccessToken: kotlin.String? = null, shoplazzaSharedSecret: kotlin.String? = null, mivaAccessToken: kotlin.String? = null, mivaSignature: kotlin.String? = null, shopwareAccessKey: kotlin.String? = null, shopwareApiKey: kotlin.String? = null, shopwareApiSecret: kotlin.String? = null, volusionLogin: kotlin.String? = null, volusionPassword: kotlin.String? = null, walmartClientId: kotlin.String? = null, walmartClientSecret: kotlin.String? = null, walmartEnvironment: kotlin.String? = "production", walmartChannelType: kotlin.String? = null, walmartRegion: kotlin.String? = "us", squareClientId: kotlin.String? = null, squareClientSecret: kotlin.String? = null, squareRefreshToken: kotlin.String? = null, squarespaceApiKey: kotlin.String? = null, squarespaceClientId: kotlin.String? = null, squarespaceClientSecret: kotlin.String? = null, squarespaceAccessToken: kotlin.String? = null, squarespaceRefreshToken: kotlin.String? = null, hybrisClientId: kotlin.String? = null, hybrisClientSecret: kotlin.String? = null, hybrisUsername: kotlin.String? = null, hybrisPassword: kotlin.String? = null, hybrisWebsites: kotlin.collections.List<kotlin.String>? = null, lightspeedApiKey: kotlin.String? = null, lightspeedApiSecret: kotlin.String? = null, commercehqApiKey: kotlin.String? = null, commercehqApiPassword: kotlin.String? = null, wcConsumerKey: kotlin.String? = null, wcConsumerSecret: kotlin.String? = null, magentoConsumerKey: kotlin.String? = null, magentoConsumerSecret: kotlin.String? = null, magentoAccessToken: kotlin.String? = null, magentoTokenSecret: kotlin.String? = null, prestashopWebserviceKey: kotlin.String? = null, wixAppId: kotlin.String? = null, wixAppSecretKey: kotlin.String? = null, wixInstanceId: kotlin.String? = null, wixRefreshToken: kotlin.String? = null, mercadoLibreAppId: kotlin.String? = null, mercadoLibreAppSecretKey: kotlin.String? = null, mercadoLibreRefreshToken: kotlin.String? = null, zidClientId: kotlin.Int? = null, zidClientSecret: kotlin.String? = null, zidAccessToken: kotlin.String? = null, zidAuthorization: kotlin.String? = null, zidRefreshToken: kotlin.String? = null, flipkartClientId: kotlin.String? = null, flipkartClientSecret: kotlin.String? = null, allegroClientId: kotlin.String? = null, allegroClientSecret: kotlin.String? = null, allegroAccessToken: kotlin.String? = null, allegroRefreshToken: kotlin.String? = null, allegroEnvironment: kotlin.String? = "production", zohoClientId: kotlin.String? = null, zohoClientSecret: kotlin.String? = null, zohoRefreshToken: kotlin.String? = null, zohoRegion: kotlin.String? = null, tiendanubeUserId: kotlin.Int? = null, tiendanubeAccessToken: kotlin.String? = null, tiendanubeClientSecret: kotlin.String? = null, ottoClientId: kotlin.String? = null, ottoClientSecret: kotlin.String? = null, ottoAppId: kotlin.String? = null, ottoRefreshToken: kotlin.String? = null, ottoEnvironment: kotlin.String? = null, ottoAccessToken: kotlin.String? = null, tiktokshopAppKey: kotlin.String? = null, tiktokshopAppSecret: kotlin.String? = null, tiktokshopRefreshToken: kotlin.String? = null, tiktokshopAccessToken: kotlin.String? = null, sallaClientId: kotlin.String? = null, sallaClientSecret: kotlin.String? = null, sallaRefreshToken: kotlin.String? = null, sallaAccessToken: kotlin.String? = null) : AccountConfigUpdate200Response {
        val localVarResponse = accountConfigUpdateWithHttpInfo(replaceParameters = replaceParameters, newStoreUrl = newStoreUrl, newStoreKey = newStoreKey, bridgeUrl = bridgeUrl, storeRoot = storeRoot, dbTablesPrefix = dbTablesPrefix, userAgent = userAgent, `3dcartPrivateKey` = `3dcartPrivateKey`, `3dcartAccessToken` = `3dcartAccessToken`, `3dcartapiApiKey` = `3dcartapiApiKey`, amazonSpClientId = amazonSpClientId, amazonSpClientSecret = amazonSpClientSecret, amazonSpRefreshToken = amazonSpRefreshToken, amazonSpAwsRegion = amazonSpAwsRegion, amazonSpApiEnvironment = amazonSpApiEnvironment, amazonSellerId = amazonSellerId, aspdotnetstorefrontApiUser = aspdotnetstorefrontApiUser, aspdotnetstorefrontApiPass = aspdotnetstorefrontApiPass, bigcommerceapiAdminAccount = bigcommerceapiAdminAccount, bigcommerceapiApiPath = bigcommerceapiApiPath, bigcommerceapiApiKey = bigcommerceapiApiKey, bigcommerceapiClientId = bigcommerceapiClientId, bigcommerceapiAccessToken = bigcommerceapiAccessToken, bigcommerceapiContext = bigcommerceapiContext, bolApiKey = bolApiKey, bolApiSecret = bolApiSecret, bolRetailerId = bolRetailerId, demandwareClientId = demandwareClientId, demandwareApiPassword = demandwareApiPassword, demandwareUserName = demandwareUserName, demandwareUserPassword = demandwareUserPassword, ebayClientId = ebayClientId, ebayClientSecret = ebayClientSecret, ebayRuname = ebayRuname, ebayAccessToken = ebayAccessToken, ebayRefreshToken = ebayRefreshToken, ebayEnvironment = ebayEnvironment, ebaySiteId = ebaySiteId, ecwidAcessToken = ecwidAcessToken, ecwidStoreId = ecwidStoreId, lazadaAppId = lazadaAppId, lazadaAppSecret = lazadaAppSecret, lazadaRefreshToken = lazadaRefreshToken, lazadaRegion = lazadaRegion, etsyKeystring = etsyKeystring, etsySharedSecret = etsySharedSecret, etsyAccessToken = etsyAccessToken, etsyTokenSecret = etsyTokenSecret, etsyClientId = etsyClientId, etsyRefreshToken = etsyRefreshToken, facebookAppId = facebookAppId, facebookAppSecret = facebookAppSecret, facebookAccessToken = facebookAccessToken, facebookBusinessId = facebookBusinessId, netoApiKey = netoApiKey, netoApiUsername = netoApiUsername, shoplineAccessToken = shoplineAccessToken, shoplineAppKey = shoplineAppKey, shoplineAppSecret = shoplineAppSecret, shoplineSharedSecret = shoplineSharedSecret, shopifyAccessToken = shopifyAccessToken, shopifyApiKey = shopifyApiKey, shopifyApiPassword = shopifyApiPassword, shopifySharedSecret = shopifySharedSecret, shoplazzaAccessToken = shoplazzaAccessToken, shoplazzaSharedSecret = shoplazzaSharedSecret, mivaAccessToken = mivaAccessToken, mivaSignature = mivaSignature, shopwareAccessKey = shopwareAccessKey, shopwareApiKey = shopwareApiKey, shopwareApiSecret = shopwareApiSecret, volusionLogin = volusionLogin, volusionPassword = volusionPassword, walmartClientId = walmartClientId, walmartClientSecret = walmartClientSecret, walmartEnvironment = walmartEnvironment, walmartChannelType = walmartChannelType, walmartRegion = walmartRegion, squareClientId = squareClientId, squareClientSecret = squareClientSecret, squareRefreshToken = squareRefreshToken, squarespaceApiKey = squarespaceApiKey, squarespaceClientId = squarespaceClientId, squarespaceClientSecret = squarespaceClientSecret, squarespaceAccessToken = squarespaceAccessToken, squarespaceRefreshToken = squarespaceRefreshToken, hybrisClientId = hybrisClientId, hybrisClientSecret = hybrisClientSecret, hybrisUsername = hybrisUsername, hybrisPassword = hybrisPassword, hybrisWebsites = hybrisWebsites, lightspeedApiKey = lightspeedApiKey, lightspeedApiSecret = lightspeedApiSecret, commercehqApiKey = commercehqApiKey, commercehqApiPassword = commercehqApiPassword, wcConsumerKey = wcConsumerKey, wcConsumerSecret = wcConsumerSecret, magentoConsumerKey = magentoConsumerKey, magentoConsumerSecret = magentoConsumerSecret, magentoAccessToken = magentoAccessToken, magentoTokenSecret = magentoTokenSecret, prestashopWebserviceKey = prestashopWebserviceKey, wixAppId = wixAppId, wixAppSecretKey = wixAppSecretKey, wixInstanceId = wixInstanceId, wixRefreshToken = wixRefreshToken, mercadoLibreAppId = mercadoLibreAppId, mercadoLibreAppSecretKey = mercadoLibreAppSecretKey, mercadoLibreRefreshToken = mercadoLibreRefreshToken, zidClientId = zidClientId, zidClientSecret = zidClientSecret, zidAccessToken = zidAccessToken, zidAuthorization = zidAuthorization, zidRefreshToken = zidRefreshToken, flipkartClientId = flipkartClientId, flipkartClientSecret = flipkartClientSecret, allegroClientId = allegroClientId, allegroClientSecret = allegroClientSecret, allegroAccessToken = allegroAccessToken, allegroRefreshToken = allegroRefreshToken, allegroEnvironment = allegroEnvironment, zohoClientId = zohoClientId, zohoClientSecret = zohoClientSecret, zohoRefreshToken = zohoRefreshToken, zohoRegion = zohoRegion, tiendanubeUserId = tiendanubeUserId, tiendanubeAccessToken = tiendanubeAccessToken, tiendanubeClientSecret = tiendanubeClientSecret, ottoClientId = ottoClientId, ottoClientSecret = ottoClientSecret, ottoAppId = ottoAppId, ottoRefreshToken = ottoRefreshToken, ottoEnvironment = ottoEnvironment, ottoAccessToken = ottoAccessToken, tiktokshopAppKey = tiktokshopAppKey, tiktokshopAppSecret = tiktokshopAppSecret, tiktokshopRefreshToken = tiktokshopRefreshToken, tiktokshopAccessToken = tiktokshopAccessToken, sallaClientId = sallaClientId, sallaClientSecret = sallaClientSecret, sallaRefreshToken = sallaRefreshToken, sallaAccessToken = sallaAccessToken)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AccountConfigUpdate200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * account.config.update
     * Use this method to automate the change of credentials used to connect online stores. The list of supported parameters differs depending on the platform.
     * @param replaceParameters Identifies if there is a necessity to replace parameters (optional)
     * @param newStoreUrl The web address of the store you want to update to connect to API2Cart (optional)
     * @param newStoreKey Update store key (optional)
     * @param bridgeUrl This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store) (optional)
     * @param storeRoot Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter) (optional)
     * @param dbTablesPrefix DB tables prefix (optional)
     * @param userAgent This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store&#39;s firewall may block specific values. (optional)
     * @param `3dcartPrivateKey` 3DCart Private Key (optional)
     * @param `3dcartAccessToken` 3DCart Token (optional)
     * @param `3dcartapiApiKey` 3DCart API Key (optional)
     * @param amazonSpClientId Amazon SP API app client id (optional)
     * @param amazonSpClientSecret Amazon SP API app client secret (optional)
     * @param amazonSpRefreshToken Amazon SP API OAuth refresh token (optional)
     * @param amazonSpAwsRegion Amazon AWS Region (optional)
     * @param amazonSpApiEnvironment Amazon SP API environment (optional, default to "production")
     * @param amazonSellerId Amazon Seller ID (Merchant token) (optional)
     * @param aspdotnetstorefrontApiUser It&#39;s a AspDotNetStorefront account for which API is available (optional)
     * @param aspdotnetstorefrontApiPass AspDotNetStorefront API Password (optional)
     * @param bigcommerceapiAdminAccount It&#39;s a BigCommerce account for which API is enabled (optional)
     * @param bigcommerceapiApiPath BigCommerce API URL (optional)
     * @param bigcommerceapiApiKey Bigcommerce API Key (optional)
     * @param bigcommerceapiClientId Client ID of the requesting app (optional)
     * @param bigcommerceapiAccessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param bigcommerceapiContext API Path section unique to the store (optional)
     * @param bolApiKey Bol API Key (optional)
     * @param bolApiSecret Bol API Secret (optional)
     * @param bolRetailerId Bol Retailer ID (optional)
     * @param demandwareClientId Demandware client id (optional)
     * @param demandwareApiPassword Demandware api password (optional)
     * @param demandwareUserName Demandware user name (optional)
     * @param demandwareUserPassword Demandware user password (optional)
     * @param ebayClientId Application ID (AppID). (optional)
     * @param ebayClientSecret Shared Secret from eBay application (optional)
     * @param ebayRuname The RuName value that eBay assigns to your application. (optional)
     * @param ebayAccessToken Used to authenticate API requests. (optional)
     * @param ebayRefreshToken Used to renew the access token. (optional)
     * @param ebayEnvironment eBay environment (optional)
     * @param ebaySiteId eBay global ID (optional, default to 0)
     * @param ecwidAcessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param ecwidStoreId Store Id (optional)
     * @param lazadaAppId Lazada App ID (optional)
     * @param lazadaAppSecret Lazada App Secret (optional)
     * @param lazadaRefreshToken Lazada Refresh Token (optional)
     * @param lazadaRegion Lazada API endpoint Region (optional)
     * @param etsyKeystring Etsy keystring (optional)
     * @param etsySharedSecret Etsy shared secret (optional)
     * @param etsyAccessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param etsyTokenSecret Secret token authorizing the app to access resources on behalf of a user (optional)
     * @param etsyClientId Etsy Client Id (optional)
     * @param etsyRefreshToken Etsy Refresh token (optional)
     * @param facebookAppId Facebook App ID (optional)
     * @param facebookAppSecret Facebook App Secret (optional)
     * @param facebookAccessToken Facebook Access Token (optional)
     * @param facebookBusinessId Facebook Business ID (optional)
     * @param netoApiKey Neto API Key (optional)
     * @param netoApiUsername Neto User Name (optional)
     * @param shoplineAccessToken Shopline APP Key (optional)
     * @param shoplineAppKey Shopline APP Key (optional)
     * @param shoplineAppSecret Shopline App Secret (optional)
     * @param shoplineSharedSecret Shopline Shared Secret (optional)
     * @param shopifyAccessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param shopifyApiKey Shopify API Key (optional)
     * @param shopifyApiPassword Shopify API Password (optional)
     * @param shopifySharedSecret Shared secret (optional)
     * @param shoplazzaAccessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param shoplazzaSharedSecret Shared secret (optional)
     * @param mivaAccessToken Miva access token (optional)
     * @param mivaSignature Miva signature (optional)
     * @param shopwareAccessKey Shopware access key (optional)
     * @param shopwareApiKey Shopware api key (optional)
     * @param shopwareApiSecret Shopware client secret access key (optional)
     * @param volusionLogin It&#39;s a Volusion account for which API is enabled (optional)
     * @param volusionPassword Volusion API Password (optional)
     * @param walmartClientId Walmart client ID. For the region &#39;ca&#39; use Consumer ID (optional)
     * @param walmartClientSecret Walmart client secret. For the region &#39;ca&#39; use Private Key (optional)
     * @param walmartEnvironment Walmart environment (optional, default to "production")
     * @param walmartChannelType Walmart WM_CONSUMER.CHANNEL.TYPE header (optional)
     * @param walmartRegion Walmart region (optional, default to "us")
     * @param squareClientId Square (Weebly) Client ID (optional)
     * @param squareClientSecret Square (Weebly) Client Secret (optional)
     * @param squareRefreshToken Square (Weebly) Refresh Token (optional)
     * @param squarespaceApiKey Squarespace API Key (optional)
     * @param squarespaceClientId Squarespace Connector Client ID (optional)
     * @param squarespaceClientSecret Squarespace Connector Client Secret (optional)
     * @param squarespaceAccessToken Squarespace access token (optional)
     * @param squarespaceRefreshToken Squarespace refresh token (optional)
     * @param hybrisClientId Omni Commerce Connector Client ID (optional)
     * @param hybrisClientSecret Omni Commerce Connector Client Secret (optional)
     * @param hybrisUsername User Name (optional)
     * @param hybrisPassword User password (optional)
     * @param hybrisWebsites Websites to stores mapping data (optional)
     * @param lightspeedApiKey LightSpeed api key (optional)
     * @param lightspeedApiSecret LightSpeed api secret (optional)
     * @param commercehqApiKey CommerceHQ api key (optional)
     * @param commercehqApiPassword CommerceHQ api password (optional)
     * @param wcConsumerKey Woocommerce consumer key (optional)
     * @param wcConsumerSecret Woocommerce consumer secret (optional)
     * @param magentoConsumerKey Magento Consumer Key (optional)
     * @param magentoConsumerSecret Magento Consumer Secret (optional)
     * @param magentoAccessToken Magento Access Token (optional)
     * @param magentoTokenSecret Magento Token Secret (optional)
     * @param prestashopWebserviceKey Prestashop webservice key (optional)
     * @param wixAppId Wix App ID (optional)
     * @param wixAppSecretKey Wix App Secret Key (optional)
     * @param wixInstanceId Wix Instance ID (optional)
     * @param wixRefreshToken Wix refresh token (optional)
     * @param mercadoLibreAppId Mercado Libre App ID (optional)
     * @param mercadoLibreAppSecretKey Mercado Libre App Secret Key (optional)
     * @param mercadoLibreRefreshToken Mercado Libre Refresh Token (optional)
     * @param zidClientId Zid Client ID (optional)
     * @param zidClientSecret Zid Client Secret (optional)
     * @param zidAccessToken Zid Access Token (optional)
     * @param zidAuthorization Zid Authorization (optional)
     * @param zidRefreshToken Zid refresh token (optional)
     * @param flipkartClientId Flipkart Client ID (optional)
     * @param flipkartClientSecret Flipkart Client Secret (optional)
     * @param allegroClientId Allegro Client ID (optional)
     * @param allegroClientSecret Allegro Client Secret (optional)
     * @param allegroAccessToken Allegro Access Token (optional)
     * @param allegroRefreshToken Allegro Refresh Token (optional)
     * @param allegroEnvironment Allegro Environment (optional, default to "production")
     * @param zohoClientId Zoho Client ID (optional)
     * @param zohoClientSecret Zoho Client Secret (optional)
     * @param zohoRefreshToken Zoho Refresh Token (optional)
     * @param zohoRegion Zoho API endpoint Region (optional)
     * @param tiendanubeUserId Tiendanube User ID (optional)
     * @param tiendanubeAccessToken Tiendanube Access Token (optional)
     * @param tiendanubeClientSecret Tiendanube Client Secret (optional)
     * @param ottoClientId Otto Client ID (optional)
     * @param ottoClientSecret Otto Client Secret (optional)
     * @param ottoAppId Otto App ID (optional)
     * @param ottoRefreshToken Otto Refresh Token (optional)
     * @param ottoEnvironment Otto Environment (optional)
     * @param ottoAccessToken Otto Access Token (optional)
     * @param tiktokshopAppKey TikTok Shop App Key (optional)
     * @param tiktokshopAppSecret TikTok Shop App Secret (optional)
     * @param tiktokshopRefreshToken TikTok Shop Refresh Token (optional)
     * @param tiktokshopAccessToken TikTok Shop Access Token (optional)
     * @param sallaClientId Salla Client ID (optional)
     * @param sallaClientSecret Salla Client Secret (optional)
     * @param sallaRefreshToken Salla Refresh Token (optional)
     * @param sallaAccessToken Salla Access Token (optional)
     * @return ApiResponse<AccountConfigUpdate200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun accountConfigUpdateWithHttpInfo(replaceParameters: kotlin.Boolean?, newStoreUrl: kotlin.String?, newStoreKey: kotlin.String?, bridgeUrl: kotlin.String?, storeRoot: kotlin.String?, dbTablesPrefix: kotlin.String?, userAgent: kotlin.String?, `3dcartPrivateKey`: kotlin.String?, `3dcartAccessToken`: kotlin.String?, `3dcartapiApiKey`: kotlin.String?, amazonSpClientId: kotlin.String?, amazonSpClientSecret: kotlin.String?, amazonSpRefreshToken: kotlin.String?, amazonSpAwsRegion: kotlin.String?, amazonSpApiEnvironment: kotlin.String?, amazonSellerId: kotlin.String?, aspdotnetstorefrontApiUser: kotlin.String?, aspdotnetstorefrontApiPass: kotlin.String?, bigcommerceapiAdminAccount: kotlin.String?, bigcommerceapiApiPath: kotlin.String?, bigcommerceapiApiKey: kotlin.String?, bigcommerceapiClientId: kotlin.String?, bigcommerceapiAccessToken: kotlin.String?, bigcommerceapiContext: kotlin.String?, bolApiKey: kotlin.String?, bolApiSecret: kotlin.String?, bolRetailerId: kotlin.Int?, demandwareClientId: kotlin.String?, demandwareApiPassword: kotlin.String?, demandwareUserName: kotlin.String?, demandwareUserPassword: kotlin.String?, ebayClientId: kotlin.String?, ebayClientSecret: kotlin.String?, ebayRuname: kotlin.String?, ebayAccessToken: kotlin.String?, ebayRefreshToken: kotlin.String?, ebayEnvironment: kotlin.String?, ebaySiteId: kotlin.Int?, ecwidAcessToken: kotlin.String?, ecwidStoreId: kotlin.String?, lazadaAppId: kotlin.String?, lazadaAppSecret: kotlin.String?, lazadaRefreshToken: kotlin.String?, lazadaRegion: kotlin.String?, etsyKeystring: kotlin.String?, etsySharedSecret: kotlin.String?, etsyAccessToken: kotlin.String?, etsyTokenSecret: kotlin.String?, etsyClientId: kotlin.String?, etsyRefreshToken: kotlin.String?, facebookAppId: kotlin.String?, facebookAppSecret: kotlin.String?, facebookAccessToken: kotlin.String?, facebookBusinessId: kotlin.String?, netoApiKey: kotlin.String?, netoApiUsername: kotlin.String?, shoplineAccessToken: kotlin.String?, shoplineAppKey: kotlin.String?, shoplineAppSecret: kotlin.String?, shoplineSharedSecret: kotlin.String?, shopifyAccessToken: kotlin.String?, shopifyApiKey: kotlin.String?, shopifyApiPassword: kotlin.String?, shopifySharedSecret: kotlin.String?, shoplazzaAccessToken: kotlin.String?, shoplazzaSharedSecret: kotlin.String?, mivaAccessToken: kotlin.String?, mivaSignature: kotlin.String?, shopwareAccessKey: kotlin.String?, shopwareApiKey: kotlin.String?, shopwareApiSecret: kotlin.String?, volusionLogin: kotlin.String?, volusionPassword: kotlin.String?, walmartClientId: kotlin.String?, walmartClientSecret: kotlin.String?, walmartEnvironment: kotlin.String?, walmartChannelType: kotlin.String?, walmartRegion: kotlin.String?, squareClientId: kotlin.String?, squareClientSecret: kotlin.String?, squareRefreshToken: kotlin.String?, squarespaceApiKey: kotlin.String?, squarespaceClientId: kotlin.String?, squarespaceClientSecret: kotlin.String?, squarespaceAccessToken: kotlin.String?, squarespaceRefreshToken: kotlin.String?, hybrisClientId: kotlin.String?, hybrisClientSecret: kotlin.String?, hybrisUsername: kotlin.String?, hybrisPassword: kotlin.String?, hybrisWebsites: kotlin.collections.List<kotlin.String>?, lightspeedApiKey: kotlin.String?, lightspeedApiSecret: kotlin.String?, commercehqApiKey: kotlin.String?, commercehqApiPassword: kotlin.String?, wcConsumerKey: kotlin.String?, wcConsumerSecret: kotlin.String?, magentoConsumerKey: kotlin.String?, magentoConsumerSecret: kotlin.String?, magentoAccessToken: kotlin.String?, magentoTokenSecret: kotlin.String?, prestashopWebserviceKey: kotlin.String?, wixAppId: kotlin.String?, wixAppSecretKey: kotlin.String?, wixInstanceId: kotlin.String?, wixRefreshToken: kotlin.String?, mercadoLibreAppId: kotlin.String?, mercadoLibreAppSecretKey: kotlin.String?, mercadoLibreRefreshToken: kotlin.String?, zidClientId: kotlin.Int?, zidClientSecret: kotlin.String?, zidAccessToken: kotlin.String?, zidAuthorization: kotlin.String?, zidRefreshToken: kotlin.String?, flipkartClientId: kotlin.String?, flipkartClientSecret: kotlin.String?, allegroClientId: kotlin.String?, allegroClientSecret: kotlin.String?, allegroAccessToken: kotlin.String?, allegroRefreshToken: kotlin.String?, allegroEnvironment: kotlin.String?, zohoClientId: kotlin.String?, zohoClientSecret: kotlin.String?, zohoRefreshToken: kotlin.String?, zohoRegion: kotlin.String?, tiendanubeUserId: kotlin.Int?, tiendanubeAccessToken: kotlin.String?, tiendanubeClientSecret: kotlin.String?, ottoClientId: kotlin.String?, ottoClientSecret: kotlin.String?, ottoAppId: kotlin.String?, ottoRefreshToken: kotlin.String?, ottoEnvironment: kotlin.String?, ottoAccessToken: kotlin.String?, tiktokshopAppKey: kotlin.String?, tiktokshopAppSecret: kotlin.String?, tiktokshopRefreshToken: kotlin.String?, tiktokshopAccessToken: kotlin.String?, sallaClientId: kotlin.String?, sallaClientSecret: kotlin.String?, sallaRefreshToken: kotlin.String?, sallaAccessToken: kotlin.String?) : ApiResponse<AccountConfigUpdate200Response?> {
        val localVariableConfig = accountConfigUpdateRequestConfig(replaceParameters = replaceParameters, newStoreUrl = newStoreUrl, newStoreKey = newStoreKey, bridgeUrl = bridgeUrl, storeRoot = storeRoot, dbTablesPrefix = dbTablesPrefix, userAgent = userAgent, `3dcartPrivateKey` = `3dcartPrivateKey`, `3dcartAccessToken` = `3dcartAccessToken`, `3dcartapiApiKey` = `3dcartapiApiKey`, amazonSpClientId = amazonSpClientId, amazonSpClientSecret = amazonSpClientSecret, amazonSpRefreshToken = amazonSpRefreshToken, amazonSpAwsRegion = amazonSpAwsRegion, amazonSpApiEnvironment = amazonSpApiEnvironment, amazonSellerId = amazonSellerId, aspdotnetstorefrontApiUser = aspdotnetstorefrontApiUser, aspdotnetstorefrontApiPass = aspdotnetstorefrontApiPass, bigcommerceapiAdminAccount = bigcommerceapiAdminAccount, bigcommerceapiApiPath = bigcommerceapiApiPath, bigcommerceapiApiKey = bigcommerceapiApiKey, bigcommerceapiClientId = bigcommerceapiClientId, bigcommerceapiAccessToken = bigcommerceapiAccessToken, bigcommerceapiContext = bigcommerceapiContext, bolApiKey = bolApiKey, bolApiSecret = bolApiSecret, bolRetailerId = bolRetailerId, demandwareClientId = demandwareClientId, demandwareApiPassword = demandwareApiPassword, demandwareUserName = demandwareUserName, demandwareUserPassword = demandwareUserPassword, ebayClientId = ebayClientId, ebayClientSecret = ebayClientSecret, ebayRuname = ebayRuname, ebayAccessToken = ebayAccessToken, ebayRefreshToken = ebayRefreshToken, ebayEnvironment = ebayEnvironment, ebaySiteId = ebaySiteId, ecwidAcessToken = ecwidAcessToken, ecwidStoreId = ecwidStoreId, lazadaAppId = lazadaAppId, lazadaAppSecret = lazadaAppSecret, lazadaRefreshToken = lazadaRefreshToken, lazadaRegion = lazadaRegion, etsyKeystring = etsyKeystring, etsySharedSecret = etsySharedSecret, etsyAccessToken = etsyAccessToken, etsyTokenSecret = etsyTokenSecret, etsyClientId = etsyClientId, etsyRefreshToken = etsyRefreshToken, facebookAppId = facebookAppId, facebookAppSecret = facebookAppSecret, facebookAccessToken = facebookAccessToken, facebookBusinessId = facebookBusinessId, netoApiKey = netoApiKey, netoApiUsername = netoApiUsername, shoplineAccessToken = shoplineAccessToken, shoplineAppKey = shoplineAppKey, shoplineAppSecret = shoplineAppSecret, shoplineSharedSecret = shoplineSharedSecret, shopifyAccessToken = shopifyAccessToken, shopifyApiKey = shopifyApiKey, shopifyApiPassword = shopifyApiPassword, shopifySharedSecret = shopifySharedSecret, shoplazzaAccessToken = shoplazzaAccessToken, shoplazzaSharedSecret = shoplazzaSharedSecret, mivaAccessToken = mivaAccessToken, mivaSignature = mivaSignature, shopwareAccessKey = shopwareAccessKey, shopwareApiKey = shopwareApiKey, shopwareApiSecret = shopwareApiSecret, volusionLogin = volusionLogin, volusionPassword = volusionPassword, walmartClientId = walmartClientId, walmartClientSecret = walmartClientSecret, walmartEnvironment = walmartEnvironment, walmartChannelType = walmartChannelType, walmartRegion = walmartRegion, squareClientId = squareClientId, squareClientSecret = squareClientSecret, squareRefreshToken = squareRefreshToken, squarespaceApiKey = squarespaceApiKey, squarespaceClientId = squarespaceClientId, squarespaceClientSecret = squarespaceClientSecret, squarespaceAccessToken = squarespaceAccessToken, squarespaceRefreshToken = squarespaceRefreshToken, hybrisClientId = hybrisClientId, hybrisClientSecret = hybrisClientSecret, hybrisUsername = hybrisUsername, hybrisPassword = hybrisPassword, hybrisWebsites = hybrisWebsites, lightspeedApiKey = lightspeedApiKey, lightspeedApiSecret = lightspeedApiSecret, commercehqApiKey = commercehqApiKey, commercehqApiPassword = commercehqApiPassword, wcConsumerKey = wcConsumerKey, wcConsumerSecret = wcConsumerSecret, magentoConsumerKey = magentoConsumerKey, magentoConsumerSecret = magentoConsumerSecret, magentoAccessToken = magentoAccessToken, magentoTokenSecret = magentoTokenSecret, prestashopWebserviceKey = prestashopWebserviceKey, wixAppId = wixAppId, wixAppSecretKey = wixAppSecretKey, wixInstanceId = wixInstanceId, wixRefreshToken = wixRefreshToken, mercadoLibreAppId = mercadoLibreAppId, mercadoLibreAppSecretKey = mercadoLibreAppSecretKey, mercadoLibreRefreshToken = mercadoLibreRefreshToken, zidClientId = zidClientId, zidClientSecret = zidClientSecret, zidAccessToken = zidAccessToken, zidAuthorization = zidAuthorization, zidRefreshToken = zidRefreshToken, flipkartClientId = flipkartClientId, flipkartClientSecret = flipkartClientSecret, allegroClientId = allegroClientId, allegroClientSecret = allegroClientSecret, allegroAccessToken = allegroAccessToken, allegroRefreshToken = allegroRefreshToken, allegroEnvironment = allegroEnvironment, zohoClientId = zohoClientId, zohoClientSecret = zohoClientSecret, zohoRefreshToken = zohoRefreshToken, zohoRegion = zohoRegion, tiendanubeUserId = tiendanubeUserId, tiendanubeAccessToken = tiendanubeAccessToken, tiendanubeClientSecret = tiendanubeClientSecret, ottoClientId = ottoClientId, ottoClientSecret = ottoClientSecret, ottoAppId = ottoAppId, ottoRefreshToken = ottoRefreshToken, ottoEnvironment = ottoEnvironment, ottoAccessToken = ottoAccessToken, tiktokshopAppKey = tiktokshopAppKey, tiktokshopAppSecret = tiktokshopAppSecret, tiktokshopRefreshToken = tiktokshopRefreshToken, tiktokshopAccessToken = tiktokshopAccessToken, sallaClientId = sallaClientId, sallaClientSecret = sallaClientSecret, sallaRefreshToken = sallaRefreshToken, sallaAccessToken = sallaAccessToken)

        return request<Unit, AccountConfigUpdate200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation accountConfigUpdate
     *
     * @param replaceParameters Identifies if there is a necessity to replace parameters (optional)
     * @param newStoreUrl The web address of the store you want to update to connect to API2Cart (optional)
     * @param newStoreKey Update store key (optional)
     * @param bridgeUrl This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store) (optional)
     * @param storeRoot Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter) (optional)
     * @param dbTablesPrefix DB tables prefix (optional)
     * @param userAgent This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store&#39;s firewall may block specific values. (optional)
     * @param `3dcartPrivateKey` 3DCart Private Key (optional)
     * @param `3dcartAccessToken` 3DCart Token (optional)
     * @param `3dcartapiApiKey` 3DCart API Key (optional)
     * @param amazonSpClientId Amazon SP API app client id (optional)
     * @param amazonSpClientSecret Amazon SP API app client secret (optional)
     * @param amazonSpRefreshToken Amazon SP API OAuth refresh token (optional)
     * @param amazonSpAwsRegion Amazon AWS Region (optional)
     * @param amazonSpApiEnvironment Amazon SP API environment (optional, default to "production")
     * @param amazonSellerId Amazon Seller ID (Merchant token) (optional)
     * @param aspdotnetstorefrontApiUser It&#39;s a AspDotNetStorefront account for which API is available (optional)
     * @param aspdotnetstorefrontApiPass AspDotNetStorefront API Password (optional)
     * @param bigcommerceapiAdminAccount It&#39;s a BigCommerce account for which API is enabled (optional)
     * @param bigcommerceapiApiPath BigCommerce API URL (optional)
     * @param bigcommerceapiApiKey Bigcommerce API Key (optional)
     * @param bigcommerceapiClientId Client ID of the requesting app (optional)
     * @param bigcommerceapiAccessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param bigcommerceapiContext API Path section unique to the store (optional)
     * @param bolApiKey Bol API Key (optional)
     * @param bolApiSecret Bol API Secret (optional)
     * @param bolRetailerId Bol Retailer ID (optional)
     * @param demandwareClientId Demandware client id (optional)
     * @param demandwareApiPassword Demandware api password (optional)
     * @param demandwareUserName Demandware user name (optional)
     * @param demandwareUserPassword Demandware user password (optional)
     * @param ebayClientId Application ID (AppID). (optional)
     * @param ebayClientSecret Shared Secret from eBay application (optional)
     * @param ebayRuname The RuName value that eBay assigns to your application. (optional)
     * @param ebayAccessToken Used to authenticate API requests. (optional)
     * @param ebayRefreshToken Used to renew the access token. (optional)
     * @param ebayEnvironment eBay environment (optional)
     * @param ebaySiteId eBay global ID (optional, default to 0)
     * @param ecwidAcessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param ecwidStoreId Store Id (optional)
     * @param lazadaAppId Lazada App ID (optional)
     * @param lazadaAppSecret Lazada App Secret (optional)
     * @param lazadaRefreshToken Lazada Refresh Token (optional)
     * @param lazadaRegion Lazada API endpoint Region (optional)
     * @param etsyKeystring Etsy keystring (optional)
     * @param etsySharedSecret Etsy shared secret (optional)
     * @param etsyAccessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param etsyTokenSecret Secret token authorizing the app to access resources on behalf of a user (optional)
     * @param etsyClientId Etsy Client Id (optional)
     * @param etsyRefreshToken Etsy Refresh token (optional)
     * @param facebookAppId Facebook App ID (optional)
     * @param facebookAppSecret Facebook App Secret (optional)
     * @param facebookAccessToken Facebook Access Token (optional)
     * @param facebookBusinessId Facebook Business ID (optional)
     * @param netoApiKey Neto API Key (optional)
     * @param netoApiUsername Neto User Name (optional)
     * @param shoplineAccessToken Shopline APP Key (optional)
     * @param shoplineAppKey Shopline APP Key (optional)
     * @param shoplineAppSecret Shopline App Secret (optional)
     * @param shoplineSharedSecret Shopline Shared Secret (optional)
     * @param shopifyAccessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param shopifyApiKey Shopify API Key (optional)
     * @param shopifyApiPassword Shopify API Password (optional)
     * @param shopifySharedSecret Shared secret (optional)
     * @param shoplazzaAccessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param shoplazzaSharedSecret Shared secret (optional)
     * @param mivaAccessToken Miva access token (optional)
     * @param mivaSignature Miva signature (optional)
     * @param shopwareAccessKey Shopware access key (optional)
     * @param shopwareApiKey Shopware api key (optional)
     * @param shopwareApiSecret Shopware client secret access key (optional)
     * @param volusionLogin It&#39;s a Volusion account for which API is enabled (optional)
     * @param volusionPassword Volusion API Password (optional)
     * @param walmartClientId Walmart client ID. For the region &#39;ca&#39; use Consumer ID (optional)
     * @param walmartClientSecret Walmart client secret. For the region &#39;ca&#39; use Private Key (optional)
     * @param walmartEnvironment Walmart environment (optional, default to "production")
     * @param walmartChannelType Walmart WM_CONSUMER.CHANNEL.TYPE header (optional)
     * @param walmartRegion Walmart region (optional, default to "us")
     * @param squareClientId Square (Weebly) Client ID (optional)
     * @param squareClientSecret Square (Weebly) Client Secret (optional)
     * @param squareRefreshToken Square (Weebly) Refresh Token (optional)
     * @param squarespaceApiKey Squarespace API Key (optional)
     * @param squarespaceClientId Squarespace Connector Client ID (optional)
     * @param squarespaceClientSecret Squarespace Connector Client Secret (optional)
     * @param squarespaceAccessToken Squarespace access token (optional)
     * @param squarespaceRefreshToken Squarespace refresh token (optional)
     * @param hybrisClientId Omni Commerce Connector Client ID (optional)
     * @param hybrisClientSecret Omni Commerce Connector Client Secret (optional)
     * @param hybrisUsername User Name (optional)
     * @param hybrisPassword User password (optional)
     * @param hybrisWebsites Websites to stores mapping data (optional)
     * @param lightspeedApiKey LightSpeed api key (optional)
     * @param lightspeedApiSecret LightSpeed api secret (optional)
     * @param commercehqApiKey CommerceHQ api key (optional)
     * @param commercehqApiPassword CommerceHQ api password (optional)
     * @param wcConsumerKey Woocommerce consumer key (optional)
     * @param wcConsumerSecret Woocommerce consumer secret (optional)
     * @param magentoConsumerKey Magento Consumer Key (optional)
     * @param magentoConsumerSecret Magento Consumer Secret (optional)
     * @param magentoAccessToken Magento Access Token (optional)
     * @param magentoTokenSecret Magento Token Secret (optional)
     * @param prestashopWebserviceKey Prestashop webservice key (optional)
     * @param wixAppId Wix App ID (optional)
     * @param wixAppSecretKey Wix App Secret Key (optional)
     * @param wixInstanceId Wix Instance ID (optional)
     * @param wixRefreshToken Wix refresh token (optional)
     * @param mercadoLibreAppId Mercado Libre App ID (optional)
     * @param mercadoLibreAppSecretKey Mercado Libre App Secret Key (optional)
     * @param mercadoLibreRefreshToken Mercado Libre Refresh Token (optional)
     * @param zidClientId Zid Client ID (optional)
     * @param zidClientSecret Zid Client Secret (optional)
     * @param zidAccessToken Zid Access Token (optional)
     * @param zidAuthorization Zid Authorization (optional)
     * @param zidRefreshToken Zid refresh token (optional)
     * @param flipkartClientId Flipkart Client ID (optional)
     * @param flipkartClientSecret Flipkart Client Secret (optional)
     * @param allegroClientId Allegro Client ID (optional)
     * @param allegroClientSecret Allegro Client Secret (optional)
     * @param allegroAccessToken Allegro Access Token (optional)
     * @param allegroRefreshToken Allegro Refresh Token (optional)
     * @param allegroEnvironment Allegro Environment (optional, default to "production")
     * @param zohoClientId Zoho Client ID (optional)
     * @param zohoClientSecret Zoho Client Secret (optional)
     * @param zohoRefreshToken Zoho Refresh Token (optional)
     * @param zohoRegion Zoho API endpoint Region (optional)
     * @param tiendanubeUserId Tiendanube User ID (optional)
     * @param tiendanubeAccessToken Tiendanube Access Token (optional)
     * @param tiendanubeClientSecret Tiendanube Client Secret (optional)
     * @param ottoClientId Otto Client ID (optional)
     * @param ottoClientSecret Otto Client Secret (optional)
     * @param ottoAppId Otto App ID (optional)
     * @param ottoRefreshToken Otto Refresh Token (optional)
     * @param ottoEnvironment Otto Environment (optional)
     * @param ottoAccessToken Otto Access Token (optional)
     * @param tiktokshopAppKey TikTok Shop App Key (optional)
     * @param tiktokshopAppSecret TikTok Shop App Secret (optional)
     * @param tiktokshopRefreshToken TikTok Shop Refresh Token (optional)
     * @param tiktokshopAccessToken TikTok Shop Access Token (optional)
     * @param sallaClientId Salla Client ID (optional)
     * @param sallaClientSecret Salla Client Secret (optional)
     * @param sallaRefreshToken Salla Refresh Token (optional)
     * @param sallaAccessToken Salla Access Token (optional)
     * @return RequestConfig
     */
    fun accountConfigUpdateRequestConfig(replaceParameters: kotlin.Boolean?, newStoreUrl: kotlin.String?, newStoreKey: kotlin.String?, bridgeUrl: kotlin.String?, storeRoot: kotlin.String?, dbTablesPrefix: kotlin.String?, userAgent: kotlin.String?, `3dcartPrivateKey`: kotlin.String?, `3dcartAccessToken`: kotlin.String?, `3dcartapiApiKey`: kotlin.String?, amazonSpClientId: kotlin.String?, amazonSpClientSecret: kotlin.String?, amazonSpRefreshToken: kotlin.String?, amazonSpAwsRegion: kotlin.String?, amazonSpApiEnvironment: kotlin.String?, amazonSellerId: kotlin.String?, aspdotnetstorefrontApiUser: kotlin.String?, aspdotnetstorefrontApiPass: kotlin.String?, bigcommerceapiAdminAccount: kotlin.String?, bigcommerceapiApiPath: kotlin.String?, bigcommerceapiApiKey: kotlin.String?, bigcommerceapiClientId: kotlin.String?, bigcommerceapiAccessToken: kotlin.String?, bigcommerceapiContext: kotlin.String?, bolApiKey: kotlin.String?, bolApiSecret: kotlin.String?, bolRetailerId: kotlin.Int?, demandwareClientId: kotlin.String?, demandwareApiPassword: kotlin.String?, demandwareUserName: kotlin.String?, demandwareUserPassword: kotlin.String?, ebayClientId: kotlin.String?, ebayClientSecret: kotlin.String?, ebayRuname: kotlin.String?, ebayAccessToken: kotlin.String?, ebayRefreshToken: kotlin.String?, ebayEnvironment: kotlin.String?, ebaySiteId: kotlin.Int?, ecwidAcessToken: kotlin.String?, ecwidStoreId: kotlin.String?, lazadaAppId: kotlin.String?, lazadaAppSecret: kotlin.String?, lazadaRefreshToken: kotlin.String?, lazadaRegion: kotlin.String?, etsyKeystring: kotlin.String?, etsySharedSecret: kotlin.String?, etsyAccessToken: kotlin.String?, etsyTokenSecret: kotlin.String?, etsyClientId: kotlin.String?, etsyRefreshToken: kotlin.String?, facebookAppId: kotlin.String?, facebookAppSecret: kotlin.String?, facebookAccessToken: kotlin.String?, facebookBusinessId: kotlin.String?, netoApiKey: kotlin.String?, netoApiUsername: kotlin.String?, shoplineAccessToken: kotlin.String?, shoplineAppKey: kotlin.String?, shoplineAppSecret: kotlin.String?, shoplineSharedSecret: kotlin.String?, shopifyAccessToken: kotlin.String?, shopifyApiKey: kotlin.String?, shopifyApiPassword: kotlin.String?, shopifySharedSecret: kotlin.String?, shoplazzaAccessToken: kotlin.String?, shoplazzaSharedSecret: kotlin.String?, mivaAccessToken: kotlin.String?, mivaSignature: kotlin.String?, shopwareAccessKey: kotlin.String?, shopwareApiKey: kotlin.String?, shopwareApiSecret: kotlin.String?, volusionLogin: kotlin.String?, volusionPassword: kotlin.String?, walmartClientId: kotlin.String?, walmartClientSecret: kotlin.String?, walmartEnvironment: kotlin.String?, walmartChannelType: kotlin.String?, walmartRegion: kotlin.String?, squareClientId: kotlin.String?, squareClientSecret: kotlin.String?, squareRefreshToken: kotlin.String?, squarespaceApiKey: kotlin.String?, squarespaceClientId: kotlin.String?, squarespaceClientSecret: kotlin.String?, squarespaceAccessToken: kotlin.String?, squarespaceRefreshToken: kotlin.String?, hybrisClientId: kotlin.String?, hybrisClientSecret: kotlin.String?, hybrisUsername: kotlin.String?, hybrisPassword: kotlin.String?, hybrisWebsites: kotlin.collections.List<kotlin.String>?, lightspeedApiKey: kotlin.String?, lightspeedApiSecret: kotlin.String?, commercehqApiKey: kotlin.String?, commercehqApiPassword: kotlin.String?, wcConsumerKey: kotlin.String?, wcConsumerSecret: kotlin.String?, magentoConsumerKey: kotlin.String?, magentoConsumerSecret: kotlin.String?, magentoAccessToken: kotlin.String?, magentoTokenSecret: kotlin.String?, prestashopWebserviceKey: kotlin.String?, wixAppId: kotlin.String?, wixAppSecretKey: kotlin.String?, wixInstanceId: kotlin.String?, wixRefreshToken: kotlin.String?, mercadoLibreAppId: kotlin.String?, mercadoLibreAppSecretKey: kotlin.String?, mercadoLibreRefreshToken: kotlin.String?, zidClientId: kotlin.Int?, zidClientSecret: kotlin.String?, zidAccessToken: kotlin.String?, zidAuthorization: kotlin.String?, zidRefreshToken: kotlin.String?, flipkartClientId: kotlin.String?, flipkartClientSecret: kotlin.String?, allegroClientId: kotlin.String?, allegroClientSecret: kotlin.String?, allegroAccessToken: kotlin.String?, allegroRefreshToken: kotlin.String?, allegroEnvironment: kotlin.String?, zohoClientId: kotlin.String?, zohoClientSecret: kotlin.String?, zohoRefreshToken: kotlin.String?, zohoRegion: kotlin.String?, tiendanubeUserId: kotlin.Int?, tiendanubeAccessToken: kotlin.String?, tiendanubeClientSecret: kotlin.String?, ottoClientId: kotlin.String?, ottoClientSecret: kotlin.String?, ottoAppId: kotlin.String?, ottoRefreshToken: kotlin.String?, ottoEnvironment: kotlin.String?, ottoAccessToken: kotlin.String?, tiktokshopAppKey: kotlin.String?, tiktokshopAppSecret: kotlin.String?, tiktokshopRefreshToken: kotlin.String?, tiktokshopAccessToken: kotlin.String?, sallaClientId: kotlin.String?, sallaClientSecret: kotlin.String?, sallaRefreshToken: kotlin.String?, sallaAccessToken: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (replaceParameters != null) {
                    put("replace_parameters", listOf(replaceParameters.toString()))
                }
                if (newStoreUrl != null) {
                    put("new_store_url", listOf(newStoreUrl.toString()))
                }
                if (newStoreKey != null) {
                    put("new_store_key", listOf(newStoreKey.toString()))
                }
                if (bridgeUrl != null) {
                    put("bridge_url", listOf(bridgeUrl.toString()))
                }
                if (storeRoot != null) {
                    put("store_root", listOf(storeRoot.toString()))
                }
                if (dbTablesPrefix != null) {
                    put("db_tables_prefix", listOf(dbTablesPrefix.toString()))
                }
                if (userAgent != null) {
                    put("user_agent", listOf(userAgent.toString()))
                }
                if (`3dcartPrivateKey` != null) {
                    put("3dcart_private_key", listOf(`3dcartPrivateKey`.toString()))
                }
                if (`3dcartAccessToken` != null) {
                    put("3dcart_access_token", listOf(`3dcartAccessToken`.toString()))
                }
                if (`3dcartapiApiKey` != null) {
                    put("3dcartapi_api_key", listOf(`3dcartapiApiKey`.toString()))
                }
                if (amazonSpClientId != null) {
                    put("amazon_sp_client_id", listOf(amazonSpClientId.toString()))
                }
                if (amazonSpClientSecret != null) {
                    put("amazon_sp_client_secret", listOf(amazonSpClientSecret.toString()))
                }
                if (amazonSpRefreshToken != null) {
                    put("amazon_sp_refresh_token", listOf(amazonSpRefreshToken.toString()))
                }
                if (amazonSpAwsRegion != null) {
                    put("amazon_sp_aws_region", listOf(amazonSpAwsRegion.toString()))
                }
                if (amazonSpApiEnvironment != null) {
                    put("amazon_sp_api_environment", listOf(amazonSpApiEnvironment.toString()))
                }
                if (amazonSellerId != null) {
                    put("amazon_seller_id", listOf(amazonSellerId.toString()))
                }
                if (aspdotnetstorefrontApiUser != null) {
                    put("aspdotnetstorefront_api_user", listOf(aspdotnetstorefrontApiUser.toString()))
                }
                if (aspdotnetstorefrontApiPass != null) {
                    put("aspdotnetstorefront_api_pass", listOf(aspdotnetstorefrontApiPass.toString()))
                }
                if (bigcommerceapiAdminAccount != null) {
                    put("bigcommerceapi_admin_account", listOf(bigcommerceapiAdminAccount.toString()))
                }
                if (bigcommerceapiApiPath != null) {
                    put("bigcommerceapi_api_path", listOf(bigcommerceapiApiPath.toString()))
                }
                if (bigcommerceapiApiKey != null) {
                    put("bigcommerceapi_api_key", listOf(bigcommerceapiApiKey.toString()))
                }
                if (bigcommerceapiClientId != null) {
                    put("bigcommerceapi_client_id", listOf(bigcommerceapiClientId.toString()))
                }
                if (bigcommerceapiAccessToken != null) {
                    put("bigcommerceapi_access_token", listOf(bigcommerceapiAccessToken.toString()))
                }
                if (bigcommerceapiContext != null) {
                    put("bigcommerceapi_context", listOf(bigcommerceapiContext.toString()))
                }
                if (bolApiKey != null) {
                    put("bol_api_key", listOf(bolApiKey.toString()))
                }
                if (bolApiSecret != null) {
                    put("bol_api_secret", listOf(bolApiSecret.toString()))
                }
                if (bolRetailerId != null) {
                    put("bol_retailer_id", listOf(bolRetailerId.toString()))
                }
                if (demandwareClientId != null) {
                    put("demandware_client_id", listOf(demandwareClientId.toString()))
                }
                if (demandwareApiPassword != null) {
                    put("demandware_api_password", listOf(demandwareApiPassword.toString()))
                }
                if (demandwareUserName != null) {
                    put("demandware_user_name", listOf(demandwareUserName.toString()))
                }
                if (demandwareUserPassword != null) {
                    put("demandware_user_password", listOf(demandwareUserPassword.toString()))
                }
                if (ebayClientId != null) {
                    put("ebay_client_id", listOf(ebayClientId.toString()))
                }
                if (ebayClientSecret != null) {
                    put("ebay_client_secret", listOf(ebayClientSecret.toString()))
                }
                if (ebayRuname != null) {
                    put("ebay_runame", listOf(ebayRuname.toString()))
                }
                if (ebayAccessToken != null) {
                    put("ebay_access_token", listOf(ebayAccessToken.toString()))
                }
                if (ebayRefreshToken != null) {
                    put("ebay_refresh_token", listOf(ebayRefreshToken.toString()))
                }
                if (ebayEnvironment != null) {
                    put("ebay_environment", listOf(ebayEnvironment.toString()))
                }
                if (ebaySiteId != null) {
                    put("ebay_site_id", listOf(ebaySiteId.toString()))
                }
                if (ecwidAcessToken != null) {
                    put("ecwid_acess_token", listOf(ecwidAcessToken.toString()))
                }
                if (ecwidStoreId != null) {
                    put("ecwid_store_id", listOf(ecwidStoreId.toString()))
                }
                if (lazadaAppId != null) {
                    put("lazada_app_id", listOf(lazadaAppId.toString()))
                }
                if (lazadaAppSecret != null) {
                    put("lazada_app_secret", listOf(lazadaAppSecret.toString()))
                }
                if (lazadaRefreshToken != null) {
                    put("lazada_refresh_token", listOf(lazadaRefreshToken.toString()))
                }
                if (lazadaRegion != null) {
                    put("lazada_region", listOf(lazadaRegion.toString()))
                }
                if (etsyKeystring != null) {
                    put("etsy_keystring", listOf(etsyKeystring.toString()))
                }
                if (etsySharedSecret != null) {
                    put("etsy_shared_secret", listOf(etsySharedSecret.toString()))
                }
                if (etsyAccessToken != null) {
                    put("etsy_access_token", listOf(etsyAccessToken.toString()))
                }
                if (etsyTokenSecret != null) {
                    put("etsy_token_secret", listOf(etsyTokenSecret.toString()))
                }
                if (etsyClientId != null) {
                    put("etsy_client_id", listOf(etsyClientId.toString()))
                }
                if (etsyRefreshToken != null) {
                    put("etsy_refresh_token", listOf(etsyRefreshToken.toString()))
                }
                if (facebookAppId != null) {
                    put("facebook_app_id", listOf(facebookAppId.toString()))
                }
                if (facebookAppSecret != null) {
                    put("facebook_app_secret", listOf(facebookAppSecret.toString()))
                }
                if (facebookAccessToken != null) {
                    put("facebook_access_token", listOf(facebookAccessToken.toString()))
                }
                if (facebookBusinessId != null) {
                    put("facebook_business_id", listOf(facebookBusinessId.toString()))
                }
                if (netoApiKey != null) {
                    put("neto_api_key", listOf(netoApiKey.toString()))
                }
                if (netoApiUsername != null) {
                    put("neto_api_username", listOf(netoApiUsername.toString()))
                }
                if (shoplineAccessToken != null) {
                    put("shopline_access_token", listOf(shoplineAccessToken.toString()))
                }
                if (shoplineAppKey != null) {
                    put("shopline_app_key", listOf(shoplineAppKey.toString()))
                }
                if (shoplineAppSecret != null) {
                    put("shopline_app_secret", listOf(shoplineAppSecret.toString()))
                }
                if (shoplineSharedSecret != null) {
                    put("shopline_shared_secret", listOf(shoplineSharedSecret.toString()))
                }
                if (shopifyAccessToken != null) {
                    put("shopify_access_token", listOf(shopifyAccessToken.toString()))
                }
                if (shopifyApiKey != null) {
                    put("shopify_api_key", listOf(shopifyApiKey.toString()))
                }
                if (shopifyApiPassword != null) {
                    put("shopify_api_password", listOf(shopifyApiPassword.toString()))
                }
                if (shopifySharedSecret != null) {
                    put("shopify_shared_secret", listOf(shopifySharedSecret.toString()))
                }
                if (shoplazzaAccessToken != null) {
                    put("shoplazza_access_token", listOf(shoplazzaAccessToken.toString()))
                }
                if (shoplazzaSharedSecret != null) {
                    put("shoplazza_shared_secret", listOf(shoplazzaSharedSecret.toString()))
                }
                if (mivaAccessToken != null) {
                    put("miva_access_token", listOf(mivaAccessToken.toString()))
                }
                if (mivaSignature != null) {
                    put("miva_signature", listOf(mivaSignature.toString()))
                }
                if (shopwareAccessKey != null) {
                    put("shopware_access_key", listOf(shopwareAccessKey.toString()))
                }
                if (shopwareApiKey != null) {
                    put("shopware_api_key", listOf(shopwareApiKey.toString()))
                }
                if (shopwareApiSecret != null) {
                    put("shopware_api_secret", listOf(shopwareApiSecret.toString()))
                }
                if (volusionLogin != null) {
                    put("volusion_login", listOf(volusionLogin.toString()))
                }
                if (volusionPassword != null) {
                    put("volusion_password", listOf(volusionPassword.toString()))
                }
                if (walmartClientId != null) {
                    put("walmart_client_id", listOf(walmartClientId.toString()))
                }
                if (walmartClientSecret != null) {
                    put("walmart_client_secret", listOf(walmartClientSecret.toString()))
                }
                if (walmartEnvironment != null) {
                    put("walmart_environment", listOf(walmartEnvironment.toString()))
                }
                if (walmartChannelType != null) {
                    put("walmart_channel_type", listOf(walmartChannelType.toString()))
                }
                if (walmartRegion != null) {
                    put("walmart_region", listOf(walmartRegion.toString()))
                }
                if (squareClientId != null) {
                    put("square_client_id", listOf(squareClientId.toString()))
                }
                if (squareClientSecret != null) {
                    put("square_client_secret", listOf(squareClientSecret.toString()))
                }
                if (squareRefreshToken != null) {
                    put("square_refresh_token", listOf(squareRefreshToken.toString()))
                }
                if (squarespaceApiKey != null) {
                    put("squarespace_api_key", listOf(squarespaceApiKey.toString()))
                }
                if (squarespaceClientId != null) {
                    put("squarespace_client_id", listOf(squarespaceClientId.toString()))
                }
                if (squarespaceClientSecret != null) {
                    put("squarespace_client_secret", listOf(squarespaceClientSecret.toString()))
                }
                if (squarespaceAccessToken != null) {
                    put("squarespace_access_token", listOf(squarespaceAccessToken.toString()))
                }
                if (squarespaceRefreshToken != null) {
                    put("squarespace_refresh_token", listOf(squarespaceRefreshToken.toString()))
                }
                if (hybrisClientId != null) {
                    put("hybris_client_id", listOf(hybrisClientId.toString()))
                }
                if (hybrisClientSecret != null) {
                    put("hybris_client_secret", listOf(hybrisClientSecret.toString()))
                }
                if (hybrisUsername != null) {
                    put("hybris_username", listOf(hybrisUsername.toString()))
                }
                if (hybrisPassword != null) {
                    put("hybris_password", listOf(hybrisPassword.toString()))
                }
                if (hybrisWebsites != null) {
                    put("hybris_websites", toMultiValue(hybrisWebsites.toList(), "multi"))
                }
                if (lightspeedApiKey != null) {
                    put("lightspeed_api_key", listOf(lightspeedApiKey.toString()))
                }
                if (lightspeedApiSecret != null) {
                    put("lightspeed_api_secret", listOf(lightspeedApiSecret.toString()))
                }
                if (commercehqApiKey != null) {
                    put("commercehq_api_key", listOf(commercehqApiKey.toString()))
                }
                if (commercehqApiPassword != null) {
                    put("commercehq_api_password", listOf(commercehqApiPassword.toString()))
                }
                if (wcConsumerKey != null) {
                    put("wc_consumer_key", listOf(wcConsumerKey.toString()))
                }
                if (wcConsumerSecret != null) {
                    put("wc_consumer_secret", listOf(wcConsumerSecret.toString()))
                }
                if (magentoConsumerKey != null) {
                    put("magento_consumer_key", listOf(magentoConsumerKey.toString()))
                }
                if (magentoConsumerSecret != null) {
                    put("magento_consumer_secret", listOf(magentoConsumerSecret.toString()))
                }
                if (magentoAccessToken != null) {
                    put("magento_access_token", listOf(magentoAccessToken.toString()))
                }
                if (magentoTokenSecret != null) {
                    put("magento_token_secret", listOf(magentoTokenSecret.toString()))
                }
                if (prestashopWebserviceKey != null) {
                    put("prestashop_webservice_key", listOf(prestashopWebserviceKey.toString()))
                }
                if (wixAppId != null) {
                    put("wix_app_id", listOf(wixAppId.toString()))
                }
                if (wixAppSecretKey != null) {
                    put("wix_app_secret_key", listOf(wixAppSecretKey.toString()))
                }
                if (wixInstanceId != null) {
                    put("wix_instance_id", listOf(wixInstanceId.toString()))
                }
                if (wixRefreshToken != null) {
                    put("wix_refresh_token", listOf(wixRefreshToken.toString()))
                }
                if (mercadoLibreAppId != null) {
                    put("mercado_libre_app_id", listOf(mercadoLibreAppId.toString()))
                }
                if (mercadoLibreAppSecretKey != null) {
                    put("mercado_libre_app_secret_key", listOf(mercadoLibreAppSecretKey.toString()))
                }
                if (mercadoLibreRefreshToken != null) {
                    put("mercado_libre_refresh_token", listOf(mercadoLibreRefreshToken.toString()))
                }
                if (zidClientId != null) {
                    put("zid_client_id", listOf(zidClientId.toString()))
                }
                if (zidClientSecret != null) {
                    put("zid_client_secret", listOf(zidClientSecret.toString()))
                }
                if (zidAccessToken != null) {
                    put("zid_access_token", listOf(zidAccessToken.toString()))
                }
                if (zidAuthorization != null) {
                    put("zid_authorization", listOf(zidAuthorization.toString()))
                }
                if (zidRefreshToken != null) {
                    put("zid_refresh_token", listOf(zidRefreshToken.toString()))
                }
                if (flipkartClientId != null) {
                    put("flipkart_client_id", listOf(flipkartClientId.toString()))
                }
                if (flipkartClientSecret != null) {
                    put("flipkart_client_secret", listOf(flipkartClientSecret.toString()))
                }
                if (allegroClientId != null) {
                    put("allegro_client_id", listOf(allegroClientId.toString()))
                }
                if (allegroClientSecret != null) {
                    put("allegro_client_secret", listOf(allegroClientSecret.toString()))
                }
                if (allegroAccessToken != null) {
                    put("allegro_access_token", listOf(allegroAccessToken.toString()))
                }
                if (allegroRefreshToken != null) {
                    put("allegro_refresh_token", listOf(allegroRefreshToken.toString()))
                }
                if (allegroEnvironment != null) {
                    put("allegro_environment", listOf(allegroEnvironment.toString()))
                }
                if (zohoClientId != null) {
                    put("zoho_client_id", listOf(zohoClientId.toString()))
                }
                if (zohoClientSecret != null) {
                    put("zoho_client_secret", listOf(zohoClientSecret.toString()))
                }
                if (zohoRefreshToken != null) {
                    put("zoho_refresh_token", listOf(zohoRefreshToken.toString()))
                }
                if (zohoRegion != null) {
                    put("zoho_region", listOf(zohoRegion.toString()))
                }
                if (tiendanubeUserId != null) {
                    put("tiendanube_user_id", listOf(tiendanubeUserId.toString()))
                }
                if (tiendanubeAccessToken != null) {
                    put("tiendanube_access_token", listOf(tiendanubeAccessToken.toString()))
                }
                if (tiendanubeClientSecret != null) {
                    put("tiendanube_client_secret", listOf(tiendanubeClientSecret.toString()))
                }
                if (ottoClientId != null) {
                    put("otto_client_id", listOf(ottoClientId.toString()))
                }
                if (ottoClientSecret != null) {
                    put("otto_client_secret", listOf(ottoClientSecret.toString()))
                }
                if (ottoAppId != null) {
                    put("otto_app_id", listOf(ottoAppId.toString()))
                }
                if (ottoRefreshToken != null) {
                    put("otto_refresh_token", listOf(ottoRefreshToken.toString()))
                }
                if (ottoEnvironment != null) {
                    put("otto_environment", listOf(ottoEnvironment.toString()))
                }
                if (ottoAccessToken != null) {
                    put("otto_access_token", listOf(ottoAccessToken.toString()))
                }
                if (tiktokshopAppKey != null) {
                    put("tiktokshop_app_key", listOf(tiktokshopAppKey.toString()))
                }
                if (tiktokshopAppSecret != null) {
                    put("tiktokshop_app_secret", listOf(tiktokshopAppSecret.toString()))
                }
                if (tiktokshopRefreshToken != null) {
                    put("tiktokshop_refresh_token", listOf(tiktokshopRefreshToken.toString()))
                }
                if (tiktokshopAccessToken != null) {
                    put("tiktokshop_access_token", listOf(tiktokshopAccessToken.toString()))
                }
                if (sallaClientId != null) {
                    put("salla_client_id", listOf(sallaClientId.toString()))
                }
                if (sallaClientSecret != null) {
                    put("salla_client_secret", listOf(sallaClientSecret.toString()))
                }
                if (sallaRefreshToken != null) {
                    put("salla_refresh_token", listOf(sallaRefreshToken.toString()))
                }
                if (sallaAccessToken != null) {
                    put("salla_access_token", listOf(sallaAccessToken.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/account.config.update.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * account.failed_webhooks
     * If the callback of your service for some reason could not accept webhooks from API2Cart, then with the help of this method you can get a list of missed webhooks to perform synchronization again using entity_id. Please note that we keep such records for 24 hours.
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param ids List of сomma-separated webhook ids (optional)
     * @return AccountFailedWebhooks200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun accountFailedWebhooks(start: kotlin.Int? = 0, count: kotlin.Int? = 10, ids: kotlin.String? = null) : AccountFailedWebhooks200Response {
        val localVarResponse = accountFailedWebhooksWithHttpInfo(start = start, count = count, ids = ids)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AccountFailedWebhooks200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * account.failed_webhooks
     * If the callback of your service for some reason could not accept webhooks from API2Cart, then with the help of this method you can get a list of missed webhooks to perform synchronization again using entity_id. Please note that we keep such records for 24 hours.
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param ids List of сomma-separated webhook ids (optional)
     * @return ApiResponse<AccountFailedWebhooks200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun accountFailedWebhooksWithHttpInfo(start: kotlin.Int?, count: kotlin.Int?, ids: kotlin.String?) : ApiResponse<AccountFailedWebhooks200Response?> {
        val localVariableConfig = accountFailedWebhooksRequestConfig(start = start, count = count, ids = ids)

        return request<Unit, AccountFailedWebhooks200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation accountFailedWebhooks
     *
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param ids List of сomma-separated webhook ids (optional)
     * @return RequestConfig
     */
    fun accountFailedWebhooksRequestConfig(start: kotlin.Int?, count: kotlin.Int?, ids: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (start != null) {
                    put("start", listOf(start.toString()))
                }
                if (count != null) {
                    put("count", listOf(count.toString()))
                }
                if (ids != null) {
                    put("ids", listOf(ids.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/account.failed_webhooks.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * account.supported_platforms
     * Use this method to retrieve a list of supported platforms and the sets of parameters required for connecting to each of them. Note: some platforms may have multiple connection methods so that the response will contain multiple sets of parameters.
     * @return AccountSupportedPlatforms200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun accountSupportedPlatforms() : AccountSupportedPlatforms200Response {
        val localVarResponse = accountSupportedPlatformsWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AccountSupportedPlatforms200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * account.supported_platforms
     * Use this method to retrieve a list of supported platforms and the sets of parameters required for connecting to each of them. Note: some platforms may have multiple connection methods so that the response will contain multiple sets of parameters.
     * @return ApiResponse<AccountSupportedPlatforms200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun accountSupportedPlatformsWithHttpInfo() : ApiResponse<AccountSupportedPlatforms200Response?> {
        val localVariableConfig = accountSupportedPlatformsRequestConfig()

        return request<Unit, AccountSupportedPlatforms200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation accountSupportedPlatforms
     *
     * @return RequestConfig
     */
    fun accountSupportedPlatformsRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/account.supported_platforms.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
