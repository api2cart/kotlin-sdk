/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.BasketInfo200Response
import org.openapitools.client.models.BasketItemAdd200Response
import org.openapitools.client.models.BasketLiveShippingServiceCreate200Response
import org.openapitools.client.models.BasketLiveShippingServiceDelete200Response
import org.openapitools.client.models.BasketLiveShippingServiceList200Response

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class BasketApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.api2cart.com/v1.1")
        }
    }

    /**
     * basket.info
     * Retrieve basket information.
     * @param id Entity id
     * @param storeId Store Id (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "force_all")
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return BasketInfo200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun basketInfo(id: kotlin.String, storeId: kotlin.String? = null, responseFields: kotlin.String? = null, params: kotlin.String? = "force_all", exclude: kotlin.String? = null) : BasketInfo200Response {
        val localVarResponse = basketInfoWithHttpInfo(id = id, storeId = storeId, responseFields = responseFields, params = params, exclude = exclude)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BasketInfo200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * basket.info
     * Retrieve basket information.
     * @param id Entity id
     * @param storeId Store Id (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "force_all")
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ApiResponse<BasketInfo200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun basketInfoWithHttpInfo(id: kotlin.String, storeId: kotlin.String?, responseFields: kotlin.String?, params: kotlin.String?, exclude: kotlin.String?) : ApiResponse<BasketInfo200Response?> {
        val localVariableConfig = basketInfoRequestConfig(id = id, storeId = storeId, responseFields = responseFields, params = params, exclude = exclude)

        return request<Unit, BasketInfo200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation basketInfo
     *
     * @param id Entity id
     * @param storeId Store Id (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "force_all")
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return RequestConfig
     */
    fun basketInfoRequestConfig(id: kotlin.String, storeId: kotlin.String?, responseFields: kotlin.String?, params: kotlin.String?, exclude: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("id", listOf(id.toString()))
                if (storeId != null) {
                    put("store_id", listOf(storeId.toString()))
                }
                if (responseFields != null) {
                    put("response_fields", listOf(responseFields.toString()))
                }
                if (params != null) {
                    put("params", listOf(params.toString()))
                }
                if (exclude != null) {
                    put("exclude", listOf(exclude.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/basket.info.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * basket.item.add
     * Add item to basket
     * @param customerId Retrieves orders specified by customer id
     * @param productId Defines id of the product which should be added to the basket
     * @param variantId Defines product&#39;s variants specified by variant id (optional)
     * @param quantity Defines new items quantity (optional, default to 0)
     * @param storeId Store Id (optional)
     * @return BasketItemAdd200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun basketItemAdd(customerId: kotlin.String, productId: kotlin.String, variantId: kotlin.String? = null, quantity: java.math.BigDecimal? = java.math.BigDecimal("0"), storeId: kotlin.String? = null) : BasketItemAdd200Response {
        val localVarResponse = basketItemAddWithHttpInfo(customerId = customerId, productId = productId, variantId = variantId, quantity = quantity, storeId = storeId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BasketItemAdd200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * basket.item.add
     * Add item to basket
     * @param customerId Retrieves orders specified by customer id
     * @param productId Defines id of the product which should be added to the basket
     * @param variantId Defines product&#39;s variants specified by variant id (optional)
     * @param quantity Defines new items quantity (optional, default to 0)
     * @param storeId Store Id (optional)
     * @return ApiResponse<BasketItemAdd200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun basketItemAddWithHttpInfo(customerId: kotlin.String, productId: kotlin.String, variantId: kotlin.String?, quantity: java.math.BigDecimal?, storeId: kotlin.String?) : ApiResponse<BasketItemAdd200Response?> {
        val localVariableConfig = basketItemAddRequestConfig(customerId = customerId, productId = productId, variantId = variantId, quantity = quantity, storeId = storeId)

        return request<Unit, BasketItemAdd200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation basketItemAdd
     *
     * @param customerId Retrieves orders specified by customer id
     * @param productId Defines id of the product which should be added to the basket
     * @param variantId Defines product&#39;s variants specified by variant id (optional)
     * @param quantity Defines new items quantity (optional, default to 0)
     * @param storeId Store Id (optional)
     * @return RequestConfig
     */
    fun basketItemAddRequestConfig(customerId: kotlin.String, productId: kotlin.String, variantId: kotlin.String?, quantity: java.math.BigDecimal?, storeId: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("customer_id", listOf(customerId.toString()))
                put("product_id", listOf(productId.toString()))
                if (variantId != null) {
                    put("variant_id", listOf(variantId.toString()))
                }
                if (quantity != null) {
                    put("quantity", listOf(quantity.toString()))
                }
                if (storeId != null) {
                    put("store_id", listOf(storeId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/basket.item.add.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * basket.live_shipping_service.create
     * Create live shipping rate service.
     * @param name Shipping Service Name
     * @param paramCallback Callback url that returns shipping rates. It should be able to accept POST requests with json data.
     * @param storeId Store Id (optional)
     * @return BasketLiveShippingServiceCreate200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun basketLiveShippingServiceCreate(name: kotlin.String, paramCallback: kotlin.String, storeId: kotlin.String? = null) : BasketLiveShippingServiceCreate200Response {
        val localVarResponse = basketLiveShippingServiceCreateWithHttpInfo(name = name, paramCallback = paramCallback, storeId = storeId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BasketLiveShippingServiceCreate200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * basket.live_shipping_service.create
     * Create live shipping rate service.
     * @param name Shipping Service Name
     * @param paramCallback Callback url that returns shipping rates. It should be able to accept POST requests with json data.
     * @param storeId Store Id (optional)
     * @return ApiResponse<BasketLiveShippingServiceCreate200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun basketLiveShippingServiceCreateWithHttpInfo(name: kotlin.String, paramCallback: kotlin.String, storeId: kotlin.String?) : ApiResponse<BasketLiveShippingServiceCreate200Response?> {
        val localVariableConfig = basketLiveShippingServiceCreateRequestConfig(name = name, paramCallback = paramCallback, storeId = storeId)

        return request<Unit, BasketLiveShippingServiceCreate200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation basketLiveShippingServiceCreate
     *
     * @param name Shipping Service Name
     * @param paramCallback Callback url that returns shipping rates. It should be able to accept POST requests with json data.
     * @param storeId Store Id (optional)
     * @return RequestConfig
     */
    fun basketLiveShippingServiceCreateRequestConfig(name: kotlin.String, paramCallback: kotlin.String, storeId: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("name", listOf(name.toString()))
                put("callback", listOf(paramCallback.toString()))
                if (storeId != null) {
                    put("store_id", listOf(storeId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/basket.live_shipping_service.create.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * basket.live_shipping_service.delete
     * Delete live shipping rate service.
     * @param id Entity id
     * @return BasketLiveShippingServiceDelete200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun basketLiveShippingServiceDelete(id: kotlin.Int) : BasketLiveShippingServiceDelete200Response {
        val localVarResponse = basketLiveShippingServiceDeleteWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BasketLiveShippingServiceDelete200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * basket.live_shipping_service.delete
     * Delete live shipping rate service.
     * @param id Entity id
     * @return ApiResponse<BasketLiveShippingServiceDelete200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun basketLiveShippingServiceDeleteWithHttpInfo(id: kotlin.Int) : ApiResponse<BasketLiveShippingServiceDelete200Response?> {
        val localVariableConfig = basketLiveShippingServiceDeleteRequestConfig(id = id)

        return request<Unit, BasketLiveShippingServiceDelete200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation basketLiveShippingServiceDelete
     *
     * @param id Entity id
     * @return RequestConfig
     */
    fun basketLiveShippingServiceDeleteRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("id", listOf(id.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/basket.live_shipping_service.delete.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * basket.live_shipping_service.list
     * Retrieve a list of live shipping rate services.
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param storeId Store Id (optional)
     * @return BasketLiveShippingServiceList200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun basketLiveShippingServiceList(start: kotlin.Int? = 0, count: kotlin.Int? = 10, storeId: kotlin.String? = null) : BasketLiveShippingServiceList200Response {
        val localVarResponse = basketLiveShippingServiceListWithHttpInfo(start = start, count = count, storeId = storeId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BasketLiveShippingServiceList200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * basket.live_shipping_service.list
     * Retrieve a list of live shipping rate services.
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param storeId Store Id (optional)
     * @return ApiResponse<BasketLiveShippingServiceList200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun basketLiveShippingServiceListWithHttpInfo(start: kotlin.Int?, count: kotlin.Int?, storeId: kotlin.String?) : ApiResponse<BasketLiveShippingServiceList200Response?> {
        val localVariableConfig = basketLiveShippingServiceListRequestConfig(start = start, count = count, storeId = storeId)

        return request<Unit, BasketLiveShippingServiceList200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation basketLiveShippingServiceList
     *
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param storeId Store Id (optional)
     * @return RequestConfig
     */
    fun basketLiveShippingServiceListRequestConfig(start: kotlin.Int?, count: kotlin.Int?, storeId: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (start != null) {
                    put("start", listOf(start.toString()))
                }
                if (count != null) {
                    put("count", listOf(count.toString()))
                }
                if (storeId != null) {
                    put("store_id", listOf(storeId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/basket.live_shipping_service.list.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
