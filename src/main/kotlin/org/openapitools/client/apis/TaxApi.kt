/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.ModelResponseTaxClassInfo
import org.openapitools.client.models.ModelResponseTaxClassList

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class TaxApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.api2cart.com/v1.1")
        }
    }

    /**
     * tax.class.info
     * Use this method to get information about a tax class and its rates. It allows you to calculate the tax percentage for a specific customer&#39;s address. This information contains relatively static data that rarely changes, so API2Cart may cache certain data to reduce the load on the store and speed up request execution. We also recommend that you cache the response of this method on your side to save requests. If you need to clear the cache for a specific store, use the cart.validate method.
     * @param taxClassId Retrieves taxes specified by class id
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "tax_class_id,name,avail")
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ModelResponseTaxClassInfo
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun taxClassInfo(taxClassId: kotlin.String, storeId: kotlin.String? = null, langId: kotlin.String? = null, params: kotlin.String? = "tax_class_id,name,avail", responseFields: kotlin.String? = null, exclude: kotlin.String? = null) : ModelResponseTaxClassInfo {
        val localVarResponse = taxClassInfoWithHttpInfo(taxClassId = taxClassId, storeId = storeId, langId = langId, params = params, responseFields = responseFields, exclude = exclude)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ModelResponseTaxClassInfo
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * tax.class.info
     * Use this method to get information about a tax class and its rates. It allows you to calculate the tax percentage for a specific customer&#39;s address. This information contains relatively static data that rarely changes, so API2Cart may cache certain data to reduce the load on the store and speed up request execution. We also recommend that you cache the response of this method on your side to save requests. If you need to clear the cache for a specific store, use the cart.validate method.
     * @param taxClassId Retrieves taxes specified by class id
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "tax_class_id,name,avail")
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ApiResponse<ModelResponseTaxClassInfo?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun taxClassInfoWithHttpInfo(taxClassId: kotlin.String, storeId: kotlin.String?, langId: kotlin.String?, params: kotlin.String?, responseFields: kotlin.String?, exclude: kotlin.String?) : ApiResponse<ModelResponseTaxClassInfo?> {
        val localVariableConfig = taxClassInfoRequestConfig(taxClassId = taxClassId, storeId = storeId, langId = langId, params = params, responseFields = responseFields, exclude = exclude)

        return request<Unit, ModelResponseTaxClassInfo>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation taxClassInfo
     *
     * @param taxClassId Retrieves taxes specified by class id
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "tax_class_id,name,avail")
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return RequestConfig
     */
    fun taxClassInfoRequestConfig(taxClassId: kotlin.String, storeId: kotlin.String?, langId: kotlin.String?, params: kotlin.String?, responseFields: kotlin.String?, exclude: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tax_class_id", listOf(taxClassId.toString()))
                if (storeId != null) {
                    put("store_id", listOf(storeId.toString()))
                }
                if (langId != null) {
                    put("lang_id", listOf(langId.toString()))
                }
                if (params != null) {
                    put("params", listOf(params.toString()))
                }
                if (responseFields != null) {
                    put("response_fields", listOf(responseFields.toString()))
                }
                if (exclude != null) {
                    put("exclude", listOf(exclude.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/tax.class.info.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * tax.class.list
     * Get list of tax classes from your store.
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param findValue Entity search that is specified by some value (optional)
     * @param findWhere Tax class search that is specified by field (optional)
     * @param storeId Store Id (optional)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "{return_code,return_message,pagination,result}")
     * @return ModelResponseTaxClassList
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun taxClassList(createdTo: kotlin.String? = null, createdFrom: kotlin.String? = null, modifiedTo: kotlin.String? = null, modifiedFrom: kotlin.String? = null, findValue: kotlin.String? = null, findWhere: kotlin.String? = null, storeId: kotlin.String? = null, count: kotlin.Int? = 10, pageCursor: kotlin.String? = null, responseFields: kotlin.String? = "{return_code,return_message,pagination,result}") : ModelResponseTaxClassList {
        val localVarResponse = taxClassListWithHttpInfo(createdTo = createdTo, createdFrom = createdFrom, modifiedTo = modifiedTo, modifiedFrom = modifiedFrom, findValue = findValue, findWhere = findWhere, storeId = storeId, count = count, pageCursor = pageCursor, responseFields = responseFields)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ModelResponseTaxClassList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * tax.class.list
     * Get list of tax classes from your store.
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param findValue Entity search that is specified by some value (optional)
     * @param findWhere Tax class search that is specified by field (optional)
     * @param storeId Store Id (optional)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "{return_code,return_message,pagination,result}")
     * @return ApiResponse<ModelResponseTaxClassList?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun taxClassListWithHttpInfo(createdTo: kotlin.String?, createdFrom: kotlin.String?, modifiedTo: kotlin.String?, modifiedFrom: kotlin.String?, findValue: kotlin.String?, findWhere: kotlin.String?, storeId: kotlin.String?, count: kotlin.Int?, pageCursor: kotlin.String?, responseFields: kotlin.String?) : ApiResponse<ModelResponseTaxClassList?> {
        val localVariableConfig = taxClassListRequestConfig(createdTo = createdTo, createdFrom = createdFrom, modifiedTo = modifiedTo, modifiedFrom = modifiedFrom, findValue = findValue, findWhere = findWhere, storeId = storeId, count = count, pageCursor = pageCursor, responseFields = responseFields)

        return request<Unit, ModelResponseTaxClassList>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation taxClassList
     *
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param findValue Entity search that is specified by some value (optional)
     * @param findWhere Tax class search that is specified by field (optional)
     * @param storeId Store Id (optional)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "{return_code,return_message,pagination,result}")
     * @return RequestConfig
     */
    fun taxClassListRequestConfig(createdTo: kotlin.String?, createdFrom: kotlin.String?, modifiedTo: kotlin.String?, modifiedFrom: kotlin.String?, findValue: kotlin.String?, findWhere: kotlin.String?, storeId: kotlin.String?, count: kotlin.Int?, pageCursor: kotlin.String?, responseFields: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (createdTo != null) {
                    put("created_to", listOf(createdTo.toString()))
                }
                if (createdFrom != null) {
                    put("created_from", listOf(createdFrom.toString()))
                }
                if (modifiedTo != null) {
                    put("modified_to", listOf(modifiedTo.toString()))
                }
                if (modifiedFrom != null) {
                    put("modified_from", listOf(modifiedFrom.toString()))
                }
                if (findValue != null) {
                    put("find_value", listOf(findValue.toString()))
                }
                if (findWhere != null) {
                    put("find_where", listOf(findWhere.toString()))
                }
                if (storeId != null) {
                    put("store_id", listOf(storeId.toString()))
                }
                if (count != null) {
                    put("count", listOf(count.toString()))
                }
                if (pageCursor != null) {
                    put("page_cursor", listOf(pageCursor.toString()))
                }
                if (responseFields != null) {
                    put("response_fields", listOf(responseFields.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/tax.class.list.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
