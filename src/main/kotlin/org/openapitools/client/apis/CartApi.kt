/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.AccountCartAdd200Response
import org.openapitools.client.models.AttributeAdd200Response
import org.openapitools.client.models.AttributeDelete200Response
import org.openapitools.client.models.BasketLiveShippingServiceDelete200Response
import org.openapitools.client.models.CartBridge200Response
import org.openapitools.client.models.CartCatalogPriceRulesCount200Response
import org.openapitools.client.models.CartClearCache200Response
import org.openapitools.client.models.CartConfig200Response
import org.openapitools.client.models.CartConfigUpdate
import org.openapitools.client.models.CartConfigUpdate200Response
import org.openapitools.client.models.CartCouponAdd
import org.openapitools.client.models.CartCouponAdd200Response
import org.openapitools.client.models.CartCouponCount200Response
import org.openapitools.client.models.CartCreate
import org.openapitools.client.models.CartDelete200Response
import org.openapitools.client.models.CartDisconnect200Response
import org.openapitools.client.models.CartGiftcardAdd200Response
import org.openapitools.client.models.CartGiftcardCount200Response
import org.openapitools.client.models.CartInfo200Response
import org.openapitools.client.models.CartList200Response
import org.openapitools.client.models.CartMethods200Response
import org.openapitools.client.models.CartPluginList200Response
import org.openapitools.client.models.CartScriptAdd200Response
import org.openapitools.client.models.CartValidate200Response
import org.openapitools.client.models.ModelResponseCartCatalogPriceRulesList
import org.openapitools.client.models.ModelResponseCartCouponList
import org.openapitools.client.models.ModelResponseCartGiftCardList
import org.openapitools.client.models.ModelResponseCartMetaDataList
import org.openapitools.client.models.ModelResponseCartScriptList
import org.openapitools.client.models.ModelResponseCartShippingZonesList

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class CartApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.api2cart.com/v1.1")
        }
    }

    /**
     * cart.bridge
     * Get bridge key and store key
     * @return CartBridge200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun cartBridge() : CartBridge200Response {
        @Suppress("DEPRECATION")
        val localVarResponse = cartBridgeWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CartBridge200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * cart.bridge
     * Get bridge key and store key
     * @return ApiResponse<CartBridge200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun cartBridgeWithHttpInfo() : ApiResponse<CartBridge200Response?> {
        @Suppress("DEPRECATION")
        val localVariableConfig = cartBridgeRequestConfig()

        return request<Unit, CartBridge200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cartBridge
     *
     * @return RequestConfig
     */
    @Deprecated(message = "This operation is deprecated.")
    fun cartBridgeRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/cart.bridge.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * cart.catalog_price_rules.count
     * Get count of cart catalog price rules discounts.
     * @return CartCatalogPriceRulesCount200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cartCatalogPriceRulesCount() : CartCatalogPriceRulesCount200Response {
        val localVarResponse = cartCatalogPriceRulesCountWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CartCatalogPriceRulesCount200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * cart.catalog_price_rules.count
     * Get count of cart catalog price rules discounts.
     * @return ApiResponse<CartCatalogPriceRulesCount200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cartCatalogPriceRulesCountWithHttpInfo() : ApiResponse<CartCatalogPriceRulesCount200Response?> {
        val localVariableConfig = cartCatalogPriceRulesCountRequestConfig()

        return request<Unit, CartCatalogPriceRulesCount200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cartCatalogPriceRulesCount
     *
     * @return RequestConfig
     */
    fun cartCatalogPriceRulesCountRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/cart.catalog_price_rules.count.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * cart.catalog_price_rules.list
     * Get cart catalog price rules discounts.
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param ids Retrieves  catalog_price_rules by ids (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,name,description")
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ModelResponseCartCatalogPriceRulesList
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cartCatalogPriceRulesList(pageCursor: kotlin.String? = null, start: kotlin.Int? = 0, count: kotlin.Int? = 10, ids: kotlin.String? = null, params: kotlin.String? = "id,name,description", responseFields: kotlin.String? = null, exclude: kotlin.String? = null) : ModelResponseCartCatalogPriceRulesList {
        val localVarResponse = cartCatalogPriceRulesListWithHttpInfo(pageCursor = pageCursor, start = start, count = count, ids = ids, params = params, responseFields = responseFields, exclude = exclude)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ModelResponseCartCatalogPriceRulesList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * cart.catalog_price_rules.list
     * Get cart catalog price rules discounts.
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param ids Retrieves  catalog_price_rules by ids (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,name,description")
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ApiResponse<ModelResponseCartCatalogPriceRulesList?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cartCatalogPriceRulesListWithHttpInfo(pageCursor: kotlin.String?, start: kotlin.Int?, count: kotlin.Int?, ids: kotlin.String?, params: kotlin.String?, responseFields: kotlin.String?, exclude: kotlin.String?) : ApiResponse<ModelResponseCartCatalogPriceRulesList?> {
        val localVariableConfig = cartCatalogPriceRulesListRequestConfig(pageCursor = pageCursor, start = start, count = count, ids = ids, params = params, responseFields = responseFields, exclude = exclude)

        return request<Unit, ModelResponseCartCatalogPriceRulesList>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cartCatalogPriceRulesList
     *
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param ids Retrieves  catalog_price_rules by ids (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,name,description")
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return RequestConfig
     */
    fun cartCatalogPriceRulesListRequestConfig(pageCursor: kotlin.String?, start: kotlin.Int?, count: kotlin.Int?, ids: kotlin.String?, params: kotlin.String?, responseFields: kotlin.String?, exclude: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (pageCursor != null) {
                    put("page_cursor", listOf(pageCursor.toString()))
                }
                if (start != null) {
                    put("start", listOf(start.toString()))
                }
                if (count != null) {
                    put("count", listOf(count.toString()))
                }
                if (ids != null) {
                    put("ids", listOf(ids.toString()))
                }
                if (params != null) {
                    put("params", listOf(params.toString()))
                }
                if (responseFields != null) {
                    put("response_fields", listOf(responseFields.toString()))
                }
                if (exclude != null) {
                    put("exclude", listOf(exclude.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/cart.catalog_price_rules.list.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * cart.clear_cache
     * Clear cache on store.
     * @param cacheType Defines which cache should be cleared.
     * @return CartClearCache200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun cartClearCache(cacheType: kotlin.String) : CartClearCache200Response {
        @Suppress("DEPRECATION")
        val localVarResponse = cartClearCacheWithHttpInfo(cacheType = cacheType)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CartClearCache200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * cart.clear_cache
     * Clear cache on store.
     * @param cacheType Defines which cache should be cleared.
     * @return ApiResponse<CartClearCache200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun cartClearCacheWithHttpInfo(cacheType: kotlin.String) : ApiResponse<CartClearCache200Response?> {
        @Suppress("DEPRECATION")
        val localVariableConfig = cartClearCacheRequestConfig(cacheType = cacheType)

        return request<Unit, CartClearCache200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cartClearCache
     *
     * @param cacheType Defines which cache should be cleared.
     * @return RequestConfig
     */
    @Deprecated(message = "This operation is deprecated.")
    fun cartClearCacheRequestConfig(cacheType: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("cache_type", listOf(cacheType.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/cart.clear_cache.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * cart.config
     * Get list of cart configs
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "store_name,store_url,db_prefix")
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return CartConfig200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun cartConfig(params: kotlin.String? = "store_name,store_url,db_prefix", exclude: kotlin.String? = null) : CartConfig200Response {
        @Suppress("DEPRECATION")
        val localVarResponse = cartConfigWithHttpInfo(params = params, exclude = exclude)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CartConfig200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * cart.config
     * Get list of cart configs
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "store_name,store_url,db_prefix")
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ApiResponse<CartConfig200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun cartConfigWithHttpInfo(params: kotlin.String?, exclude: kotlin.String?) : ApiResponse<CartConfig200Response?> {
        @Suppress("DEPRECATION")
        val localVariableConfig = cartConfigRequestConfig(params = params, exclude = exclude)

        return request<Unit, CartConfig200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cartConfig
     *
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "store_name,store_url,db_prefix")
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return RequestConfig
     */
    @Deprecated(message = "This operation is deprecated.")
    fun cartConfigRequestConfig(params: kotlin.String?, exclude: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (params != null) {
                    put("params", listOf(params.toString()))
                }
                if (exclude != null) {
                    put("exclude", listOf(exclude.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/cart.config.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * cart.config.update
     * Use this API method to update custom data in client database.
     * @param cartConfigUpdate 
     * @return CartConfigUpdate200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun cartConfigUpdate(cartConfigUpdate: CartConfigUpdate) : CartConfigUpdate200Response {
        @Suppress("DEPRECATION")
        val localVarResponse = cartConfigUpdateWithHttpInfo(cartConfigUpdate = cartConfigUpdate)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CartConfigUpdate200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * cart.config.update
     * Use this API method to update custom data in client database.
     * @param cartConfigUpdate 
     * @return ApiResponse<CartConfigUpdate200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun cartConfigUpdateWithHttpInfo(cartConfigUpdate: CartConfigUpdate) : ApiResponse<CartConfigUpdate200Response?> {
        @Suppress("DEPRECATION")
        val localVariableConfig = cartConfigUpdateRequestConfig(cartConfigUpdate = cartConfigUpdate)

        return request<CartConfigUpdate, CartConfigUpdate200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cartConfigUpdate
     *
     * @param cartConfigUpdate 
     * @return RequestConfig
     */
    @Deprecated(message = "This operation is deprecated.")
    fun cartConfigUpdateRequestConfig(cartConfigUpdate: CartConfigUpdate) : RequestConfig<CartConfigUpdate> {
        val localVariableBody = cartConfigUpdate
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/cart.config.update.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * cart.coupon.add
     * Use this method to create a coupon with specified conditions.
     * @param cartCouponAdd 
     * @return CartCouponAdd200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cartCouponAdd(cartCouponAdd: CartCouponAdd) : CartCouponAdd200Response {
        val localVarResponse = cartCouponAddWithHttpInfo(cartCouponAdd = cartCouponAdd)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CartCouponAdd200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * cart.coupon.add
     * Use this method to create a coupon with specified conditions.
     * @param cartCouponAdd 
     * @return ApiResponse<CartCouponAdd200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cartCouponAddWithHttpInfo(cartCouponAdd: CartCouponAdd) : ApiResponse<CartCouponAdd200Response?> {
        val localVariableConfig = cartCouponAddRequestConfig(cartCouponAdd = cartCouponAdd)

        return request<CartCouponAdd, CartCouponAdd200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cartCouponAdd
     *
     * @param cartCouponAdd 
     * @return RequestConfig
     */
    fun cartCouponAddRequestConfig(cartCouponAdd: CartCouponAdd) : RequestConfig<CartCouponAdd> {
        val localVariableBody = cartCouponAdd
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/cart.coupon.add.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter entity
     */
     enum class EntityCartCouponConditionAdd(val value: kotlin.String) {
         @Json(name = "order") order("order"),
         @Json(name = "order_shipping_address") order_shipping_address("order_shipping_address"),
         @Json(name = "product") product("product"),
         @Json(name = "customer") customer("customer");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * enum for parameter key
     */
     enum class KeyCartCouponConditionAdd(val value: kotlin.String) {
         @Json(name = "total") total("total"),
         @Json(name = "subtotal") subtotal("subtotal"),
         @Json(name = "shipping_total") shipping_total("shipping_total"),
         @Json(name = "total_quantity") total_quantity("total_quantity"),
         @Json(name = "total_weight") total_weight("total_weight"),
         @Json(name = "country") country("country"),
         @Json(name = "product_id") product_id("product_id"),
         @Json(name = "variant_id") variant_id("variant_id"),
         @Json(name = "category_id") category_id("category_id"),
         @Json(name = "customer_id") customer_id("customer_id"),
         @Json(name = "item_price") item_price("item_price"),
         @Json(name = "item_total_price") item_total_price("item_total_price"),
         @Json(name = "item_quantity") item_quantity("item_quantity"),
         @Json(name = "carrier_id") carrier_id("carrier_id");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * cart.coupon.condition.add
     * Use this method to add additional conditions for coupon application.
     * @param couponId Coupon Id
     * @param entity Defines condition entity type
     * @param key Defines condition entity attribute key
     * @param `operator` Defines condition operator
     * @param `value` Defines condition value, can be comma separated according to the operator.
     * @param storeId Store Id (optional)
     * @param target Defines condition operator (optional, default to "coupon_prerequisite")
     * @param includeTax Indicates whether to apply a discount for taxes. (optional, default to false)
     * @param includeShipping Indicates whether to apply a discount for shipping. (optional, default to false)
     * @return BasketLiveShippingServiceDelete200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cartCouponConditionAdd(couponId: kotlin.String, entity: EntityCartCouponConditionAdd, key: KeyCartCouponConditionAdd, `operator`: kotlin.String, `value`: kotlin.String, storeId: kotlin.String? = null, target: kotlin.String? = "coupon_prerequisite", includeTax: kotlin.Boolean? = false, includeShipping: kotlin.Boolean? = false) : BasketLiveShippingServiceDelete200Response {
        val localVarResponse = cartCouponConditionAddWithHttpInfo(couponId = couponId, entity = entity, key = key, `operator` = `operator`, `value` = `value`, storeId = storeId, target = target, includeTax = includeTax, includeShipping = includeShipping)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BasketLiveShippingServiceDelete200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * cart.coupon.condition.add
     * Use this method to add additional conditions for coupon application.
     * @param couponId Coupon Id
     * @param entity Defines condition entity type
     * @param key Defines condition entity attribute key
     * @param `operator` Defines condition operator
     * @param `value` Defines condition value, can be comma separated according to the operator.
     * @param storeId Store Id (optional)
     * @param target Defines condition operator (optional, default to "coupon_prerequisite")
     * @param includeTax Indicates whether to apply a discount for taxes. (optional, default to false)
     * @param includeShipping Indicates whether to apply a discount for shipping. (optional, default to false)
     * @return ApiResponse<BasketLiveShippingServiceDelete200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cartCouponConditionAddWithHttpInfo(couponId: kotlin.String, entity: EntityCartCouponConditionAdd, key: KeyCartCouponConditionAdd, `operator`: kotlin.String, `value`: kotlin.String, storeId: kotlin.String?, target: kotlin.String?, includeTax: kotlin.Boolean?, includeShipping: kotlin.Boolean?) : ApiResponse<BasketLiveShippingServiceDelete200Response?> {
        val localVariableConfig = cartCouponConditionAddRequestConfig(couponId = couponId, entity = entity, key = key, `operator` = `operator`, `value` = `value`, storeId = storeId, target = target, includeTax = includeTax, includeShipping = includeShipping)

        return request<Unit, BasketLiveShippingServiceDelete200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cartCouponConditionAdd
     *
     * @param couponId Coupon Id
     * @param entity Defines condition entity type
     * @param key Defines condition entity attribute key
     * @param `operator` Defines condition operator
     * @param `value` Defines condition value, can be comma separated according to the operator.
     * @param storeId Store Id (optional)
     * @param target Defines condition operator (optional, default to "coupon_prerequisite")
     * @param includeTax Indicates whether to apply a discount for taxes. (optional, default to false)
     * @param includeShipping Indicates whether to apply a discount for shipping. (optional, default to false)
     * @return RequestConfig
     */
    fun cartCouponConditionAddRequestConfig(couponId: kotlin.String, entity: EntityCartCouponConditionAdd, key: KeyCartCouponConditionAdd, `operator`: kotlin.String, `value`: kotlin.String, storeId: kotlin.String?, target: kotlin.String?, includeTax: kotlin.Boolean?, includeShipping: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (storeId != null) {
                    put("store_id", listOf(storeId.toString()))
                }
                put("coupon_id", listOf(couponId.toString()))
                if (target != null) {
                    put("target", listOf(target.toString()))
                }
                put("entity", listOf(entity.value))
                put("key", listOf(key.value))
                put("operator", listOf(`operator`.toString()))
                put("value", listOf(`value`.toString()))
                if (includeTax != null) {
                    put("include_tax", listOf(includeTax.toString()))
                }
                if (includeShipping != null) {
                    put("include_shipping", listOf(includeShipping.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/cart.coupon.condition.add.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * cart.coupon.count
     * This method allows you to get the number of coupons. On some platforms, you can filter the coupons by the date they were active.
     * @param storeId Store Id (optional)
     * @param dateStartFrom Filter entity by date_start (greater or equal) (optional)
     * @param dateStartTo Filter entity by date_start (less or equal) (optional)
     * @param dateEndFrom Filter entity by date_end (greater or equal) (optional)
     * @param dateEndTo Filter entity by date_end (less or equal) (optional)
     * @param avail Defines category&#39;s visibility status (optional, default to true)
     * @return CartCouponCount200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cartCouponCount(storeId: kotlin.String? = null, dateStartFrom: kotlin.String? = null, dateStartTo: kotlin.String? = null, dateEndFrom: kotlin.String? = null, dateEndTo: kotlin.String? = null, avail: kotlin.Boolean? = true) : CartCouponCount200Response {
        val localVarResponse = cartCouponCountWithHttpInfo(storeId = storeId, dateStartFrom = dateStartFrom, dateStartTo = dateStartTo, dateEndFrom = dateEndFrom, dateEndTo = dateEndTo, avail = avail)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CartCouponCount200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * cart.coupon.count
     * This method allows you to get the number of coupons. On some platforms, you can filter the coupons by the date they were active.
     * @param storeId Store Id (optional)
     * @param dateStartFrom Filter entity by date_start (greater or equal) (optional)
     * @param dateStartTo Filter entity by date_start (less or equal) (optional)
     * @param dateEndFrom Filter entity by date_end (greater or equal) (optional)
     * @param dateEndTo Filter entity by date_end (less or equal) (optional)
     * @param avail Defines category&#39;s visibility status (optional, default to true)
     * @return ApiResponse<CartCouponCount200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cartCouponCountWithHttpInfo(storeId: kotlin.String?, dateStartFrom: kotlin.String?, dateStartTo: kotlin.String?, dateEndFrom: kotlin.String?, dateEndTo: kotlin.String?, avail: kotlin.Boolean?) : ApiResponse<CartCouponCount200Response?> {
        val localVariableConfig = cartCouponCountRequestConfig(storeId = storeId, dateStartFrom = dateStartFrom, dateStartTo = dateStartTo, dateEndFrom = dateEndFrom, dateEndTo = dateEndTo, avail = avail)

        return request<Unit, CartCouponCount200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cartCouponCount
     *
     * @param storeId Store Id (optional)
     * @param dateStartFrom Filter entity by date_start (greater or equal) (optional)
     * @param dateStartTo Filter entity by date_start (less or equal) (optional)
     * @param dateEndFrom Filter entity by date_end (greater or equal) (optional)
     * @param dateEndTo Filter entity by date_end (less or equal) (optional)
     * @param avail Defines category&#39;s visibility status (optional, default to true)
     * @return RequestConfig
     */
    fun cartCouponCountRequestConfig(storeId: kotlin.String?, dateStartFrom: kotlin.String?, dateStartTo: kotlin.String?, dateEndFrom: kotlin.String?, dateEndTo: kotlin.String?, avail: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (storeId != null) {
                    put("store_id", listOf(storeId.toString()))
                }
                if (dateStartFrom != null) {
                    put("date_start_from", listOf(dateStartFrom.toString()))
                }
                if (dateStartTo != null) {
                    put("date_start_to", listOf(dateStartTo.toString()))
                }
                if (dateEndFrom != null) {
                    put("date_end_from", listOf(dateEndFrom.toString()))
                }
                if (dateEndTo != null) {
                    put("date_end_to", listOf(dateEndTo.toString()))
                }
                if (avail != null) {
                    put("avail", listOf(avail.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/cart.coupon.count.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * cart.coupon.delete
     * Delete coupon
     * @param id Entity id
     * @param storeId Store Id (optional)
     * @return AttributeDelete200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cartCouponDelete(id: kotlin.String, storeId: kotlin.String? = null) : AttributeDelete200Response {
        val localVarResponse = cartCouponDeleteWithHttpInfo(id = id, storeId = storeId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AttributeDelete200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * cart.coupon.delete
     * Delete coupon
     * @param id Entity id
     * @param storeId Store Id (optional)
     * @return ApiResponse<AttributeDelete200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cartCouponDeleteWithHttpInfo(id: kotlin.String, storeId: kotlin.String?) : ApiResponse<AttributeDelete200Response?> {
        val localVariableConfig = cartCouponDeleteRequestConfig(id = id, storeId = storeId)

        return request<Unit, AttributeDelete200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cartCouponDelete
     *
     * @param id Entity id
     * @param storeId Store Id (optional)
     * @return RequestConfig
     */
    fun cartCouponDeleteRequestConfig(id: kotlin.String, storeId: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("id", listOf(id.toString()))
                if (storeId != null) {
                    put("store_id", listOf(storeId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/cart.coupon.delete.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * cart.coupon.list
     * Get cart coupon discounts.
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param couponsIds Filter coupons by ids (optional)
     * @param storeId Filter coupons by store id (optional)
     * @param dateStartFrom Filter entity by date_start (greater or equal) (optional)
     * @param dateStartTo Filter entity by date_start (less or equal) (optional)
     * @param dateEndFrom Filter entity by date_end (greater or equal) (optional)
     * @param dateEndTo Filter entity by date_end (less or equal) (optional)
     * @param avail Filter coupons by avail status (optional)
     * @param langId Language id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,code,name,description")
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ModelResponseCartCouponList
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cartCouponList(pageCursor: kotlin.String? = null, start: kotlin.Int? = 0, count: kotlin.Int? = 10, couponsIds: kotlin.String? = null, storeId: kotlin.String? = null, dateStartFrom: kotlin.String? = null, dateStartTo: kotlin.String? = null, dateEndFrom: kotlin.String? = null, dateEndTo: kotlin.String? = null, avail: kotlin.Boolean? = null, langId: kotlin.String? = null, params: kotlin.String? = "id,code,name,description", responseFields: kotlin.String? = null, exclude: kotlin.String? = null) : ModelResponseCartCouponList {
        val localVarResponse = cartCouponListWithHttpInfo(pageCursor = pageCursor, start = start, count = count, couponsIds = couponsIds, storeId = storeId, dateStartFrom = dateStartFrom, dateStartTo = dateStartTo, dateEndFrom = dateEndFrom, dateEndTo = dateEndTo, avail = avail, langId = langId, params = params, responseFields = responseFields, exclude = exclude)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ModelResponseCartCouponList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * cart.coupon.list
     * Get cart coupon discounts.
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param couponsIds Filter coupons by ids (optional)
     * @param storeId Filter coupons by store id (optional)
     * @param dateStartFrom Filter entity by date_start (greater or equal) (optional)
     * @param dateStartTo Filter entity by date_start (less or equal) (optional)
     * @param dateEndFrom Filter entity by date_end (greater or equal) (optional)
     * @param dateEndTo Filter entity by date_end (less or equal) (optional)
     * @param avail Filter coupons by avail status (optional)
     * @param langId Language id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,code,name,description")
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ApiResponse<ModelResponseCartCouponList?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cartCouponListWithHttpInfo(pageCursor: kotlin.String?, start: kotlin.Int?, count: kotlin.Int?, couponsIds: kotlin.String?, storeId: kotlin.String?, dateStartFrom: kotlin.String?, dateStartTo: kotlin.String?, dateEndFrom: kotlin.String?, dateEndTo: kotlin.String?, avail: kotlin.Boolean?, langId: kotlin.String?, params: kotlin.String?, responseFields: kotlin.String?, exclude: kotlin.String?) : ApiResponse<ModelResponseCartCouponList?> {
        val localVariableConfig = cartCouponListRequestConfig(pageCursor = pageCursor, start = start, count = count, couponsIds = couponsIds, storeId = storeId, dateStartFrom = dateStartFrom, dateStartTo = dateStartTo, dateEndFrom = dateEndFrom, dateEndTo = dateEndTo, avail = avail, langId = langId, params = params, responseFields = responseFields, exclude = exclude)

        return request<Unit, ModelResponseCartCouponList>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cartCouponList
     *
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param couponsIds Filter coupons by ids (optional)
     * @param storeId Filter coupons by store id (optional)
     * @param dateStartFrom Filter entity by date_start (greater or equal) (optional)
     * @param dateStartTo Filter entity by date_start (less or equal) (optional)
     * @param dateEndFrom Filter entity by date_end (greater or equal) (optional)
     * @param dateEndTo Filter entity by date_end (less or equal) (optional)
     * @param avail Filter coupons by avail status (optional)
     * @param langId Language id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,code,name,description")
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return RequestConfig
     */
    fun cartCouponListRequestConfig(pageCursor: kotlin.String?, start: kotlin.Int?, count: kotlin.Int?, couponsIds: kotlin.String?, storeId: kotlin.String?, dateStartFrom: kotlin.String?, dateStartTo: kotlin.String?, dateEndFrom: kotlin.String?, dateEndTo: kotlin.String?, avail: kotlin.Boolean?, langId: kotlin.String?, params: kotlin.String?, responseFields: kotlin.String?, exclude: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (pageCursor != null) {
                    put("page_cursor", listOf(pageCursor.toString()))
                }
                if (start != null) {
                    put("start", listOf(start.toString()))
                }
                if (count != null) {
                    put("count", listOf(count.toString()))
                }
                if (couponsIds != null) {
                    put("coupons_ids", listOf(couponsIds.toString()))
                }
                if (storeId != null) {
                    put("store_id", listOf(storeId.toString()))
                }
                if (dateStartFrom != null) {
                    put("date_start_from", listOf(dateStartFrom.toString()))
                }
                if (dateStartTo != null) {
                    put("date_start_to", listOf(dateStartTo.toString()))
                }
                if (dateEndFrom != null) {
                    put("date_end_from", listOf(dateEndFrom.toString()))
                }
                if (dateEndTo != null) {
                    put("date_end_to", listOf(dateEndTo.toString()))
                }
                if (avail != null) {
                    put("avail", listOf(avail.toString()))
                }
                if (langId != null) {
                    put("lang_id", listOf(langId.toString()))
                }
                if (params != null) {
                    put("params", listOf(params.toString()))
                }
                if (responseFields != null) {
                    put("response_fields", listOf(responseFields.toString()))
                }
                if (exclude != null) {
                    put("exclude", listOf(exclude.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/cart.coupon.list.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * cart.create
     * Add store to the account
     * @param cartCreate 
     * @return AccountCartAdd200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun cartCreate(cartCreate: CartCreate) : AccountCartAdd200Response {
        @Suppress("DEPRECATION")
        val localVarResponse = cartCreateWithHttpInfo(cartCreate = cartCreate)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AccountCartAdd200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * cart.create
     * Add store to the account
     * @param cartCreate 
     * @return ApiResponse<AccountCartAdd200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun cartCreateWithHttpInfo(cartCreate: CartCreate) : ApiResponse<AccountCartAdd200Response?> {
        @Suppress("DEPRECATION")
        val localVariableConfig = cartCreateRequestConfig(cartCreate = cartCreate)

        return request<CartCreate, AccountCartAdd200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cartCreate
     *
     * @param cartCreate 
     * @return RequestConfig
     */
    @Deprecated(message = "This operation is deprecated.")
    fun cartCreateRequestConfig(cartCreate: CartCreate) : RequestConfig<CartCreate> {
        val localVariableBody = cartCreate
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/cart.create.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * cart.delete
     * Remove store from API2Cart
     * @param deleteBridge Identifies if there is a necessity to delete bridge (optional, default to true)
     * @return CartDelete200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cartDelete(deleteBridge: kotlin.Boolean? = true) : CartDelete200Response {
        val localVarResponse = cartDeleteWithHttpInfo(deleteBridge = deleteBridge)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CartDelete200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * cart.delete
     * Remove store from API2Cart
     * @param deleteBridge Identifies if there is a necessity to delete bridge (optional, default to true)
     * @return ApiResponse<CartDelete200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cartDeleteWithHttpInfo(deleteBridge: kotlin.Boolean?) : ApiResponse<CartDelete200Response?> {
        val localVariableConfig = cartDeleteRequestConfig(deleteBridge = deleteBridge)

        return request<Unit, CartDelete200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cartDelete
     *
     * @param deleteBridge Identifies if there is a necessity to delete bridge (optional, default to true)
     * @return RequestConfig
     */
    fun cartDeleteRequestConfig(deleteBridge: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (deleteBridge != null) {
                    put("delete_bridge", listOf(deleteBridge.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/cart.delete.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * cart.disconnect
     * Disconnect with the store and clear store session data.
     * @param deleteBridge Identifies if there is a necessity to delete bridge (optional, default to false)
     * @return CartDisconnect200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun cartDisconnect(deleteBridge: kotlin.Boolean? = false) : CartDisconnect200Response {
        @Suppress("DEPRECATION")
        val localVarResponse = cartDisconnectWithHttpInfo(deleteBridge = deleteBridge)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CartDisconnect200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * cart.disconnect
     * Disconnect with the store and clear store session data.
     * @param deleteBridge Identifies if there is a necessity to delete bridge (optional, default to false)
     * @return ApiResponse<CartDisconnect200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun cartDisconnectWithHttpInfo(deleteBridge: kotlin.Boolean?) : ApiResponse<CartDisconnect200Response?> {
        @Suppress("DEPRECATION")
        val localVariableConfig = cartDisconnectRequestConfig(deleteBridge = deleteBridge)

        return request<Unit, CartDisconnect200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cartDisconnect
     *
     * @param deleteBridge Identifies if there is a necessity to delete bridge (optional, default to false)
     * @return RequestConfig
     */
    @Deprecated(message = "This operation is deprecated.")
    fun cartDisconnectRequestConfig(deleteBridge: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (deleteBridge != null) {
                    put("delete_bridge", listOf(deleteBridge.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/cart.disconnect.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * cart.giftcard.add
     * Use this method to create a gift card for a specified amount.
     * @param amount Defines the gift card amount value.
     * @param code Gift card code (optional)
     * @param ownerEmail Gift card owner email (optional)
     * @param recipientEmail Gift card recipient email (optional)
     * @param recipientName Gift card recipient name (optional)
     * @param ownerName Gift card owner name (optional)
     * @return CartGiftcardAdd200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cartGiftcardAdd(amount: java.math.BigDecimal, code: kotlin.String? = null, ownerEmail: kotlin.String? = null, recipientEmail: kotlin.String? = null, recipientName: kotlin.String? = null, ownerName: kotlin.String? = null) : CartGiftcardAdd200Response {
        val localVarResponse = cartGiftcardAddWithHttpInfo(amount = amount, code = code, ownerEmail = ownerEmail, recipientEmail = recipientEmail, recipientName = recipientName, ownerName = ownerName)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CartGiftcardAdd200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * cart.giftcard.add
     * Use this method to create a gift card for a specified amount.
     * @param amount Defines the gift card amount value.
     * @param code Gift card code (optional)
     * @param ownerEmail Gift card owner email (optional)
     * @param recipientEmail Gift card recipient email (optional)
     * @param recipientName Gift card recipient name (optional)
     * @param ownerName Gift card owner name (optional)
     * @return ApiResponse<CartGiftcardAdd200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cartGiftcardAddWithHttpInfo(amount: java.math.BigDecimal, code: kotlin.String?, ownerEmail: kotlin.String?, recipientEmail: kotlin.String?, recipientName: kotlin.String?, ownerName: kotlin.String?) : ApiResponse<CartGiftcardAdd200Response?> {
        val localVariableConfig = cartGiftcardAddRequestConfig(amount = amount, code = code, ownerEmail = ownerEmail, recipientEmail = recipientEmail, recipientName = recipientName, ownerName = ownerName)

        return request<Unit, CartGiftcardAdd200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cartGiftcardAdd
     *
     * @param amount Defines the gift card amount value.
     * @param code Gift card code (optional)
     * @param ownerEmail Gift card owner email (optional)
     * @param recipientEmail Gift card recipient email (optional)
     * @param recipientName Gift card recipient name (optional)
     * @param ownerName Gift card owner name (optional)
     * @return RequestConfig
     */
    fun cartGiftcardAddRequestConfig(amount: java.math.BigDecimal, code: kotlin.String?, ownerEmail: kotlin.String?, recipientEmail: kotlin.String?, recipientName: kotlin.String?, ownerName: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("amount", listOf(amount.toString()))
                if (code != null) {
                    put("code", listOf(code.toString()))
                }
                if (ownerEmail != null) {
                    put("owner_email", listOf(ownerEmail.toString()))
                }
                if (recipientEmail != null) {
                    put("recipient_email", listOf(recipientEmail.toString()))
                }
                if (recipientName != null) {
                    put("recipient_name", listOf(recipientName.toString()))
                }
                if (ownerName != null) {
                    put("owner_name", listOf(ownerName.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/cart.giftcard.add.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * cart.giftcard.count
     * Get gift cards count.
     * @param storeId Store Id (optional)
     * @return CartGiftcardCount200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cartGiftcardCount(storeId: kotlin.String? = null) : CartGiftcardCount200Response {
        val localVarResponse = cartGiftcardCountWithHttpInfo(storeId = storeId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CartGiftcardCount200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * cart.giftcard.count
     * Get gift cards count.
     * @param storeId Store Id (optional)
     * @return ApiResponse<CartGiftcardCount200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cartGiftcardCountWithHttpInfo(storeId: kotlin.String?) : ApiResponse<CartGiftcardCount200Response?> {
        val localVariableConfig = cartGiftcardCountRequestConfig(storeId = storeId)

        return request<Unit, CartGiftcardCount200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cartGiftcardCount
     *
     * @param storeId Store Id (optional)
     * @return RequestConfig
     */
    fun cartGiftcardCountRequestConfig(storeId: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (storeId != null) {
                    put("store_id", listOf(storeId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/cart.giftcard.count.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * cart.giftcard.delete
     * Delete giftcard
     * @param id Entity id
     * @return AttributeDelete200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cartGiftcardDelete(id: kotlin.String) : AttributeDelete200Response {
        val localVarResponse = cartGiftcardDeleteWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AttributeDelete200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * cart.giftcard.delete
     * Delete giftcard
     * @param id Entity id
     * @return ApiResponse<AttributeDelete200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cartGiftcardDeleteWithHttpInfo(id: kotlin.String) : ApiResponse<AttributeDelete200Response?> {
        val localVariableConfig = cartGiftcardDeleteRequestConfig(id = id)

        return request<Unit, AttributeDelete200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cartGiftcardDelete
     *
     * @param id Entity id
     * @return RequestConfig
     */
    fun cartGiftcardDeleteRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("id", listOf(id.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/cart.giftcard.delete.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * cart.giftcard.list
     * Get gift cards list.
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param storeId Store Id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,code,name")
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ModelResponseCartGiftCardList
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cartGiftcardList(pageCursor: kotlin.String? = null, start: kotlin.Int? = 0, count: kotlin.Int? = 10, storeId: kotlin.String? = null, params: kotlin.String? = "id,code,name", responseFields: kotlin.String? = null, exclude: kotlin.String? = null) : ModelResponseCartGiftCardList {
        val localVarResponse = cartGiftcardListWithHttpInfo(pageCursor = pageCursor, start = start, count = count, storeId = storeId, params = params, responseFields = responseFields, exclude = exclude)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ModelResponseCartGiftCardList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * cart.giftcard.list
     * Get gift cards list.
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param storeId Store Id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,code,name")
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ApiResponse<ModelResponseCartGiftCardList?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cartGiftcardListWithHttpInfo(pageCursor: kotlin.String?, start: kotlin.Int?, count: kotlin.Int?, storeId: kotlin.String?, params: kotlin.String?, responseFields: kotlin.String?, exclude: kotlin.String?) : ApiResponse<ModelResponseCartGiftCardList?> {
        val localVariableConfig = cartGiftcardListRequestConfig(pageCursor = pageCursor, start = start, count = count, storeId = storeId, params = params, responseFields = responseFields, exclude = exclude)

        return request<Unit, ModelResponseCartGiftCardList>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cartGiftcardList
     *
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param storeId Store Id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,code,name")
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return RequestConfig
     */
    fun cartGiftcardListRequestConfig(pageCursor: kotlin.String?, start: kotlin.Int?, count: kotlin.Int?, storeId: kotlin.String?, params: kotlin.String?, responseFields: kotlin.String?, exclude: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (pageCursor != null) {
                    put("page_cursor", listOf(pageCursor.toString()))
                }
                if (start != null) {
                    put("start", listOf(start.toString()))
                }
                if (count != null) {
                    put("count", listOf(count.toString()))
                }
                if (storeId != null) {
                    put("store_id", listOf(storeId.toString()))
                }
                if (params != null) {
                    put("params", listOf(params.toString()))
                }
                if (responseFields != null) {
                    put("response_fields", listOf(responseFields.toString()))
                }
                if (exclude != null) {
                    put("exclude", listOf(exclude.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/cart.giftcard.list.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * cart.info
     * This method allows you to get various information about the store, including a list of stores (in the case of a multistore configuration), a list of supported languages, currencies, carriers, warehouses, and many other information. This information contains data that is relatively stable and rarely changes, so API2Cart can cache certain data to reduce the load on the store and speed up the execution of the request. We also recommend that you cache the response of this method on your side to save requests. If you need to clear the cache for a specific store, then use the cart.validate method.
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "store_name,store_url,db_prefix")
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Store Id (optional)
     * @return CartInfo200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cartInfo(params: kotlin.String? = "store_name,store_url,db_prefix", responseFields: kotlin.String? = null, exclude: kotlin.String? = null, storeId: kotlin.String? = null) : CartInfo200Response {
        val localVarResponse = cartInfoWithHttpInfo(params = params, responseFields = responseFields, exclude = exclude, storeId = storeId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CartInfo200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * cart.info
     * This method allows you to get various information about the store, including a list of stores (in the case of a multistore configuration), a list of supported languages, currencies, carriers, warehouses, and many other information. This information contains data that is relatively stable and rarely changes, so API2Cart can cache certain data to reduce the load on the store and speed up the execution of the request. We also recommend that you cache the response of this method on your side to save requests. If you need to clear the cache for a specific store, then use the cart.validate method.
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "store_name,store_url,db_prefix")
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Store Id (optional)
     * @return ApiResponse<CartInfo200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cartInfoWithHttpInfo(params: kotlin.String?, responseFields: kotlin.String?, exclude: kotlin.String?, storeId: kotlin.String?) : ApiResponse<CartInfo200Response?> {
        val localVariableConfig = cartInfoRequestConfig(params = params, responseFields = responseFields, exclude = exclude, storeId = storeId)

        return request<Unit, CartInfo200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cartInfo
     *
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "store_name,store_url,db_prefix")
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Store Id (optional)
     * @return RequestConfig
     */
    fun cartInfoRequestConfig(params: kotlin.String?, responseFields: kotlin.String?, exclude: kotlin.String?, storeId: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (params != null) {
                    put("params", listOf(params.toString()))
                }
                if (responseFields != null) {
                    put("response_fields", listOf(responseFields.toString()))
                }
                if (exclude != null) {
                    put("exclude", listOf(exclude.toString()))
                }
                if (storeId != null) {
                    put("store_id", listOf(storeId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/cart.info.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * cart.list
     * Get list of supported carts
     * @return CartList200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun cartList() : CartList200Response {
        @Suppress("DEPRECATION")
        val localVarResponse = cartListWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CartList200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * cart.list
     * Get list of supported carts
     * @return ApiResponse<CartList200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun cartListWithHttpInfo() : ApiResponse<CartList200Response?> {
        @Suppress("DEPRECATION")
        val localVariableConfig = cartListRequestConfig()

        return request<Unit, CartList200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cartList
     *
     * @return RequestConfig
     */
    @Deprecated(message = "This operation is deprecated.")
    fun cartListRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/cart.list.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * cart.meta_data.list
     * Using this method, you can get a list of metadata for various entities (products, options, customers, orders). Usually this is data created by third-party plugins.
     * @param entityId Entity Id
     * @param entity Entity (optional, default to "product")
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param key Key (optional)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "key,value")
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ModelResponseCartMetaDataList
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cartMetaDataList(entityId: kotlin.String, entity: kotlin.String? = "product", storeId: kotlin.String? = null, langId: kotlin.String? = null, key: kotlin.String? = null, count: kotlin.Int? = 10, pageCursor: kotlin.String? = null, params: kotlin.String? = "key,value", responseFields: kotlin.String? = null, exclude: kotlin.String? = null) : ModelResponseCartMetaDataList {
        val localVarResponse = cartMetaDataListWithHttpInfo(entityId = entityId, entity = entity, storeId = storeId, langId = langId, key = key, count = count, pageCursor = pageCursor, params = params, responseFields = responseFields, exclude = exclude)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ModelResponseCartMetaDataList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * cart.meta_data.list
     * Using this method, you can get a list of metadata for various entities (products, options, customers, orders). Usually this is data created by third-party plugins.
     * @param entityId Entity Id
     * @param entity Entity (optional, default to "product")
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param key Key (optional)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "key,value")
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ApiResponse<ModelResponseCartMetaDataList?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cartMetaDataListWithHttpInfo(entityId: kotlin.String, entity: kotlin.String?, storeId: kotlin.String?, langId: kotlin.String?, key: kotlin.String?, count: kotlin.Int?, pageCursor: kotlin.String?, params: kotlin.String?, responseFields: kotlin.String?, exclude: kotlin.String?) : ApiResponse<ModelResponseCartMetaDataList?> {
        val localVariableConfig = cartMetaDataListRequestConfig(entityId = entityId, entity = entity, storeId = storeId, langId = langId, key = key, count = count, pageCursor = pageCursor, params = params, responseFields = responseFields, exclude = exclude)

        return request<Unit, ModelResponseCartMetaDataList>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cartMetaDataList
     *
     * @param entityId Entity Id
     * @param entity Entity (optional, default to "product")
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param key Key (optional)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "key,value")
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return RequestConfig
     */
    fun cartMetaDataListRequestConfig(entityId: kotlin.String, entity: kotlin.String?, storeId: kotlin.String?, langId: kotlin.String?, key: kotlin.String?, count: kotlin.Int?, pageCursor: kotlin.String?, params: kotlin.String?, responseFields: kotlin.String?, exclude: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("entity_id", listOf(entityId.toString()))
                if (entity != null) {
                    put("entity", listOf(entity.toString()))
                }
                if (storeId != null) {
                    put("store_id", listOf(storeId.toString()))
                }
                if (langId != null) {
                    put("lang_id", listOf(langId.toString()))
                }
                if (key != null) {
                    put("key", listOf(key.toString()))
                }
                if (count != null) {
                    put("count", listOf(count.toString()))
                }
                if (pageCursor != null) {
                    put("page_cursor", listOf(pageCursor.toString()))
                }
                if (params != null) {
                    put("params", listOf(params.toString()))
                }
                if (responseFields != null) {
                    put("response_fields", listOf(responseFields.toString()))
                }
                if (exclude != null) {
                    put("exclude", listOf(exclude.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/cart.meta_data.list.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * cart.meta_data.set
     * Set meta data for a specific entity
     * @param entityId Entity Id
     * @param key Key
     * @param `value` Value
     * @param namespace Metafield namespace
     * @param entity Entity (optional, default to "product")
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @return AttributeAdd200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cartMetaDataSet(entityId: kotlin.String, key: kotlin.String, `value`: kotlin.String, namespace: kotlin.String, entity: kotlin.String? = "product", storeId: kotlin.String? = null, langId: kotlin.String? = null) : AttributeAdd200Response {
        val localVarResponse = cartMetaDataSetWithHttpInfo(entityId = entityId, key = key, `value` = `value`, namespace = namespace, entity = entity, storeId = storeId, langId = langId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AttributeAdd200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * cart.meta_data.set
     * Set meta data for a specific entity
     * @param entityId Entity Id
     * @param key Key
     * @param `value` Value
     * @param namespace Metafield namespace
     * @param entity Entity (optional, default to "product")
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @return ApiResponse<AttributeAdd200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cartMetaDataSetWithHttpInfo(entityId: kotlin.String, key: kotlin.String, `value`: kotlin.String, namespace: kotlin.String, entity: kotlin.String?, storeId: kotlin.String?, langId: kotlin.String?) : ApiResponse<AttributeAdd200Response?> {
        val localVariableConfig = cartMetaDataSetRequestConfig(entityId = entityId, key = key, `value` = `value`, namespace = namespace, entity = entity, storeId = storeId, langId = langId)

        return request<Unit, AttributeAdd200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cartMetaDataSet
     *
     * @param entityId Entity Id
     * @param key Key
     * @param `value` Value
     * @param namespace Metafield namespace
     * @param entity Entity (optional, default to "product")
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @return RequestConfig
     */
    fun cartMetaDataSetRequestConfig(entityId: kotlin.String, key: kotlin.String, `value`: kotlin.String, namespace: kotlin.String, entity: kotlin.String?, storeId: kotlin.String?, langId: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("entity_id", listOf(entityId.toString()))
                if (entity != null) {
                    put("entity", listOf(entity.toString()))
                }
                if (storeId != null) {
                    put("store_id", listOf(storeId.toString()))
                }
                if (langId != null) {
                    put("lang_id", listOf(langId.toString()))
                }
                put("key", listOf(key.toString()))
                put("value", listOf(`value`.toString()))
                put("namespace", listOf(namespace.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/cart.meta_data.set.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * cart.meta_data.unset
     * Unset meta data for a specific entity
     * @param entityId Entity Id
     * @param key Key
     * @param id Entity id
     * @param entity Entity (optional, default to "product")
     * @param storeId Store Id (optional)
     * @return BasketLiveShippingServiceDelete200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cartMetaDataUnset(entityId: kotlin.String, key: kotlin.String, id: kotlin.String, entity: kotlin.String? = "product", storeId: kotlin.String? = null) : BasketLiveShippingServiceDelete200Response {
        val localVarResponse = cartMetaDataUnsetWithHttpInfo(entityId = entityId, key = key, id = id, entity = entity, storeId = storeId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BasketLiveShippingServiceDelete200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * cart.meta_data.unset
     * Unset meta data for a specific entity
     * @param entityId Entity Id
     * @param key Key
     * @param id Entity id
     * @param entity Entity (optional, default to "product")
     * @param storeId Store Id (optional)
     * @return ApiResponse<BasketLiveShippingServiceDelete200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cartMetaDataUnsetWithHttpInfo(entityId: kotlin.String, key: kotlin.String, id: kotlin.String, entity: kotlin.String?, storeId: kotlin.String?) : ApiResponse<BasketLiveShippingServiceDelete200Response?> {
        val localVariableConfig = cartMetaDataUnsetRequestConfig(entityId = entityId, key = key, id = id, entity = entity, storeId = storeId)

        return request<Unit, BasketLiveShippingServiceDelete200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cartMetaDataUnset
     *
     * @param entityId Entity Id
     * @param key Key
     * @param id Entity id
     * @param entity Entity (optional, default to "product")
     * @param storeId Store Id (optional)
     * @return RequestConfig
     */
    fun cartMetaDataUnsetRequestConfig(entityId: kotlin.String, key: kotlin.String, id: kotlin.String, entity: kotlin.String?, storeId: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("entity_id", listOf(entityId.toString()))
                if (entity != null) {
                    put("entity", listOf(entity.toString()))
                }
                if (storeId != null) {
                    put("store_id", listOf(storeId.toString()))
                }
                put("key", listOf(key.toString()))
                put("id", listOf(id.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/cart.meta_data.unset.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * cart.methods
     * Returns a list of supported API methods.
     * @return CartMethods200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cartMethods() : CartMethods200Response {
        val localVarResponse = cartMethodsWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CartMethods200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * cart.methods
     * Returns a list of supported API methods.
     * @return ApiResponse<CartMethods200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cartMethodsWithHttpInfo() : ApiResponse<CartMethods200Response?> {
        val localVariableConfig = cartMethodsRequestConfig()

        return request<Unit, CartMethods200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cartMethods
     *
     * @return RequestConfig
     */
    fun cartMethodsRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/cart.methods.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * cart.plugin.list
     * Get a list of third-party plugins installed on the store.
     * @param storeId Store Id (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @return CartPluginList200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cartPluginList(storeId: kotlin.String? = null, start: kotlin.Int? = 0, count: kotlin.Int? = 10) : CartPluginList200Response {
        val localVarResponse = cartPluginListWithHttpInfo(storeId = storeId, start = start, count = count)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CartPluginList200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * cart.plugin.list
     * Get a list of third-party plugins installed on the store.
     * @param storeId Store Id (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @return ApiResponse<CartPluginList200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cartPluginListWithHttpInfo(storeId: kotlin.String?, start: kotlin.Int?, count: kotlin.Int?) : ApiResponse<CartPluginList200Response?> {
        val localVariableConfig = cartPluginListRequestConfig(storeId = storeId, start = start, count = count)

        return request<Unit, CartPluginList200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cartPluginList
     *
     * @param storeId Store Id (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @return RequestConfig
     */
    fun cartPluginListRequestConfig(storeId: kotlin.String?, start: kotlin.Int?, count: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (storeId != null) {
                    put("store_id", listOf(storeId.toString()))
                }
                if (start != null) {
                    put("start", listOf(start.toString()))
                }
                if (count != null) {
                    put("count", listOf(count.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/cart.plugin.list.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * cart.script.add
     * Add new script to the storefront
     * @param name The user-friendly script name (optional)
     * @param description The user-friendly description (optional)
     * @param html An html string containing exactly one &#x60;script&#x60; tag. (optional)
     * @param src The URL of the remote script (optional)
     * @param loadMethod The load method to use for the script (optional)
     * @param scope The page or pages on the online store where the script should be included (optional, default to "storefront")
     * @param events Event for run scripts (optional)
     * @param storeId Store Id (optional)
     * @return CartScriptAdd200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cartScriptAdd(name: kotlin.String? = null, description: kotlin.String? = null, html: kotlin.String? = null, src: kotlin.String? = null, loadMethod: kotlin.String? = null, scope: kotlin.String? = "storefront", events: kotlin.String? = null, storeId: kotlin.String? = null) : CartScriptAdd200Response {
        val localVarResponse = cartScriptAddWithHttpInfo(name = name, description = description, html = html, src = src, loadMethod = loadMethod, scope = scope, events = events, storeId = storeId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CartScriptAdd200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * cart.script.add
     * Add new script to the storefront
     * @param name The user-friendly script name (optional)
     * @param description The user-friendly description (optional)
     * @param html An html string containing exactly one &#x60;script&#x60; tag. (optional)
     * @param src The URL of the remote script (optional)
     * @param loadMethod The load method to use for the script (optional)
     * @param scope The page or pages on the online store where the script should be included (optional, default to "storefront")
     * @param events Event for run scripts (optional)
     * @param storeId Store Id (optional)
     * @return ApiResponse<CartScriptAdd200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cartScriptAddWithHttpInfo(name: kotlin.String?, description: kotlin.String?, html: kotlin.String?, src: kotlin.String?, loadMethod: kotlin.String?, scope: kotlin.String?, events: kotlin.String?, storeId: kotlin.String?) : ApiResponse<CartScriptAdd200Response?> {
        val localVariableConfig = cartScriptAddRequestConfig(name = name, description = description, html = html, src = src, loadMethod = loadMethod, scope = scope, events = events, storeId = storeId)

        return request<Unit, CartScriptAdd200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cartScriptAdd
     *
     * @param name The user-friendly script name (optional)
     * @param description The user-friendly description (optional)
     * @param html An html string containing exactly one &#x60;script&#x60; tag. (optional)
     * @param src The URL of the remote script (optional)
     * @param loadMethod The load method to use for the script (optional)
     * @param scope The page or pages on the online store where the script should be included (optional, default to "storefront")
     * @param events Event for run scripts (optional)
     * @param storeId Store Id (optional)
     * @return RequestConfig
     */
    fun cartScriptAddRequestConfig(name: kotlin.String?, description: kotlin.String?, html: kotlin.String?, src: kotlin.String?, loadMethod: kotlin.String?, scope: kotlin.String?, events: kotlin.String?, storeId: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (name != null) {
                    put("name", listOf(name.toString()))
                }
                if (description != null) {
                    put("description", listOf(description.toString()))
                }
                if (html != null) {
                    put("html", listOf(html.toString()))
                }
                if (src != null) {
                    put("src", listOf(src.toString()))
                }
                if (loadMethod != null) {
                    put("load_method", listOf(loadMethod.toString()))
                }
                if (scope != null) {
                    put("scope", listOf(scope.toString()))
                }
                if (events != null) {
                    put("events", listOf(events.toString()))
                }
                if (storeId != null) {
                    put("store_id", listOf(storeId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/cart.script.add.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * cart.script.delete
     * Remove script from the storefront
     * @param id Entity id
     * @param storeId Store Id (optional)
     * @return AttributeDelete200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cartScriptDelete(id: kotlin.String, storeId: kotlin.String? = null) : AttributeDelete200Response {
        val localVarResponse = cartScriptDeleteWithHttpInfo(id = id, storeId = storeId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AttributeDelete200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * cart.script.delete
     * Remove script from the storefront
     * @param id Entity id
     * @param storeId Store Id (optional)
     * @return ApiResponse<AttributeDelete200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cartScriptDeleteWithHttpInfo(id: kotlin.String, storeId: kotlin.String?) : ApiResponse<AttributeDelete200Response?> {
        val localVariableConfig = cartScriptDeleteRequestConfig(id = id, storeId = storeId)

        return request<Unit, AttributeDelete200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cartScriptDelete
     *
     * @param id Entity id
     * @param storeId Store Id (optional)
     * @return RequestConfig
     */
    fun cartScriptDeleteRequestConfig(id: kotlin.String, storeId: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("id", listOf(id.toString()))
                if (storeId != null) {
                    put("store_id", listOf(storeId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/cart.script.delete.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * cart.script.list
     * Get scripts installed to the storefront
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param scriptIds Retrieves only scripts with specific ids (optional)
     * @param storeId Store Id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,name,description")
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ModelResponseCartScriptList
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cartScriptList(pageCursor: kotlin.String? = null, start: kotlin.Int? = 0, count: kotlin.Int? = 10, createdFrom: kotlin.String? = null, createdTo: kotlin.String? = null, modifiedFrom: kotlin.String? = null, modifiedTo: kotlin.String? = null, scriptIds: kotlin.String? = null, storeId: kotlin.String? = null, params: kotlin.String? = "id,name,description", responseFields: kotlin.String? = null, exclude: kotlin.String? = null) : ModelResponseCartScriptList {
        val localVarResponse = cartScriptListWithHttpInfo(pageCursor = pageCursor, start = start, count = count, createdFrom = createdFrom, createdTo = createdTo, modifiedFrom = modifiedFrom, modifiedTo = modifiedTo, scriptIds = scriptIds, storeId = storeId, params = params, responseFields = responseFields, exclude = exclude)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ModelResponseCartScriptList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * cart.script.list
     * Get scripts installed to the storefront
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param scriptIds Retrieves only scripts with specific ids (optional)
     * @param storeId Store Id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,name,description")
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ApiResponse<ModelResponseCartScriptList?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cartScriptListWithHttpInfo(pageCursor: kotlin.String?, start: kotlin.Int?, count: kotlin.Int?, createdFrom: kotlin.String?, createdTo: kotlin.String?, modifiedFrom: kotlin.String?, modifiedTo: kotlin.String?, scriptIds: kotlin.String?, storeId: kotlin.String?, params: kotlin.String?, responseFields: kotlin.String?, exclude: kotlin.String?) : ApiResponse<ModelResponseCartScriptList?> {
        val localVariableConfig = cartScriptListRequestConfig(pageCursor = pageCursor, start = start, count = count, createdFrom = createdFrom, createdTo = createdTo, modifiedFrom = modifiedFrom, modifiedTo = modifiedTo, scriptIds = scriptIds, storeId = storeId, params = params, responseFields = responseFields, exclude = exclude)

        return request<Unit, ModelResponseCartScriptList>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cartScriptList
     *
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param scriptIds Retrieves only scripts with specific ids (optional)
     * @param storeId Store Id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,name,description")
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return RequestConfig
     */
    fun cartScriptListRequestConfig(pageCursor: kotlin.String?, start: kotlin.Int?, count: kotlin.Int?, createdFrom: kotlin.String?, createdTo: kotlin.String?, modifiedFrom: kotlin.String?, modifiedTo: kotlin.String?, scriptIds: kotlin.String?, storeId: kotlin.String?, params: kotlin.String?, responseFields: kotlin.String?, exclude: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (pageCursor != null) {
                    put("page_cursor", listOf(pageCursor.toString()))
                }
                if (start != null) {
                    put("start", listOf(start.toString()))
                }
                if (count != null) {
                    put("count", listOf(count.toString()))
                }
                if (createdFrom != null) {
                    put("created_from", listOf(createdFrom.toString()))
                }
                if (createdTo != null) {
                    put("created_to", listOf(createdTo.toString()))
                }
                if (modifiedFrom != null) {
                    put("modified_from", listOf(modifiedFrom.toString()))
                }
                if (modifiedTo != null) {
                    put("modified_to", listOf(modifiedTo.toString()))
                }
                if (scriptIds != null) {
                    put("script_ids", listOf(scriptIds.toString()))
                }
                if (storeId != null) {
                    put("store_id", listOf(storeId.toString()))
                }
                if (params != null) {
                    put("params", listOf(params.toString()))
                }
                if (responseFields != null) {
                    put("response_fields", listOf(responseFields.toString()))
                }
                if (exclude != null) {
                    put("exclude", listOf(exclude.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/cart.script.list.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * cart.shipping_zones.list
     * Get list of shipping zones
     * @param storeId Store Id (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,name,enabled")
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ModelResponseCartShippingZonesList
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cartShippingZonesList(storeId: kotlin.String? = null, start: kotlin.Int? = 0, count: kotlin.Int? = 10, params: kotlin.String? = "id,name,enabled", responseFields: kotlin.String? = null, exclude: kotlin.String? = null) : ModelResponseCartShippingZonesList {
        val localVarResponse = cartShippingZonesListWithHttpInfo(storeId = storeId, start = start, count = count, params = params, responseFields = responseFields, exclude = exclude)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ModelResponseCartShippingZonesList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * cart.shipping_zones.list
     * Get list of shipping zones
     * @param storeId Store Id (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,name,enabled")
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ApiResponse<ModelResponseCartShippingZonesList?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cartShippingZonesListWithHttpInfo(storeId: kotlin.String?, start: kotlin.Int?, count: kotlin.Int?, params: kotlin.String?, responseFields: kotlin.String?, exclude: kotlin.String?) : ApiResponse<ModelResponseCartShippingZonesList?> {
        val localVariableConfig = cartShippingZonesListRequestConfig(storeId = storeId, start = start, count = count, params = params, responseFields = responseFields, exclude = exclude)

        return request<Unit, ModelResponseCartShippingZonesList>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cartShippingZonesList
     *
     * @param storeId Store Id (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,name,enabled")
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return RequestConfig
     */
    fun cartShippingZonesListRequestConfig(storeId: kotlin.String?, start: kotlin.Int?, count: kotlin.Int?, params: kotlin.String?, responseFields: kotlin.String?, exclude: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (storeId != null) {
                    put("store_id", listOf(storeId.toString()))
                }
                if (start != null) {
                    put("start", listOf(start.toString()))
                }
                if (count != null) {
                    put("count", listOf(count.toString()))
                }
                if (params != null) {
                    put("params", listOf(params.toString()))
                }
                if (responseFields != null) {
                    put("response_fields", listOf(responseFields.toString()))
                }
                if (exclude != null) {
                    put("exclude", listOf(exclude.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/cart.shipping_zones.list.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * cart.validate
     * This method clears the cache in API2Cart for a particular store and checks whether the connection to the store is available. Use this method if there have been any changes in the settings on the storе, for example, if a new plugin has been installed or removed.
     * @param validateVersion Specify if api2cart should validate cart version (optional, default to false)
     * @return CartValidate200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cartValidate(validateVersion: kotlin.Boolean? = false) : CartValidate200Response {
        val localVarResponse = cartValidateWithHttpInfo(validateVersion = validateVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CartValidate200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * cart.validate
     * This method clears the cache in API2Cart for a particular store and checks whether the connection to the store is available. Use this method if there have been any changes in the settings on the storе, for example, if a new plugin has been installed or removed.
     * @param validateVersion Specify if api2cart should validate cart version (optional, default to false)
     * @return ApiResponse<CartValidate200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cartValidateWithHttpInfo(validateVersion: kotlin.Boolean?) : ApiResponse<CartValidate200Response?> {
        val localVariableConfig = cartValidateRequestConfig(validateVersion = validateVersion)

        return request<Unit, CartValidate200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cartValidate
     *
     * @param validateVersion Specify if api2cart should validate cart version (optional, default to false)
     * @return RequestConfig
     */
    fun cartValidateRequestConfig(validateVersion: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (validateVersion != null) {
                    put("validate_version", listOf(validateVersion.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/cart.validate.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
