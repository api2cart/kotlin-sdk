/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.ModelResponseMarketplaceProductFind

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class MarketplaceApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.api2cart.local.com/v1.1")
        }
    }

    /**
     * marketplace.product.find
     * Search product in global catalog.
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param keyword Defines search keyword (optional)
     * @param categoriesIds Defines product add that is specified by comma-separated categories id (optional)
     * @param storeId Store Id (optional)
     * @param asin Amazon Standard Identification Number. (optional)
     * @param ean European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products. (optional)
     * @param gtin Global Trade Item Number. An GTIN is an identifier for trade items. (optional)
     * @param upc Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products. (optional)
     * @param mpn Manufacturer Part Number. A MPN is an identifier of a particular part design or material used. (optional)
     * @param isbn International Standard Book Number. An ISBN is a unique identifier for books. (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "force_all")
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ModelResponseMarketplaceProductFind
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun marketplaceProductFind(count: kotlin.Int? = 10, pageCursor: kotlin.String? = null, keyword: kotlin.String? = null, categoriesIds: kotlin.String? = null, storeId: kotlin.String? = null, asin: kotlin.String? = null, ean: kotlin.String? = null, gtin: kotlin.String? = null, upc: kotlin.String? = null, mpn: kotlin.String? = null, isbn: kotlin.String? = null, responseFields: kotlin.String? = null, params: kotlin.String? = "force_all", exclude: kotlin.String? = null) : ModelResponseMarketplaceProductFind {
        val localVarResponse = marketplaceProductFindWithHttpInfo(count = count, pageCursor = pageCursor, keyword = keyword, categoriesIds = categoriesIds, storeId = storeId, asin = asin, ean = ean, gtin = gtin, upc = upc, mpn = mpn, isbn = isbn, responseFields = responseFields, params = params, exclude = exclude)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ModelResponseMarketplaceProductFind
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * marketplace.product.find
     * Search product in global catalog.
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param keyword Defines search keyword (optional)
     * @param categoriesIds Defines product add that is specified by comma-separated categories id (optional)
     * @param storeId Store Id (optional)
     * @param asin Amazon Standard Identification Number. (optional)
     * @param ean European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products. (optional)
     * @param gtin Global Trade Item Number. An GTIN is an identifier for trade items. (optional)
     * @param upc Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products. (optional)
     * @param mpn Manufacturer Part Number. A MPN is an identifier of a particular part design or material used. (optional)
     * @param isbn International Standard Book Number. An ISBN is a unique identifier for books. (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "force_all")
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ApiResponse<ModelResponseMarketplaceProductFind?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun marketplaceProductFindWithHttpInfo(count: kotlin.Int?, pageCursor: kotlin.String?, keyword: kotlin.String?, categoriesIds: kotlin.String?, storeId: kotlin.String?, asin: kotlin.String?, ean: kotlin.String?, gtin: kotlin.String?, upc: kotlin.String?, mpn: kotlin.String?, isbn: kotlin.String?, responseFields: kotlin.String?, params: kotlin.String?, exclude: kotlin.String?) : ApiResponse<ModelResponseMarketplaceProductFind?> {
        val localVariableConfig = marketplaceProductFindRequestConfig(count = count, pageCursor = pageCursor, keyword = keyword, categoriesIds = categoriesIds, storeId = storeId, asin = asin, ean = ean, gtin = gtin, upc = upc, mpn = mpn, isbn = isbn, responseFields = responseFields, params = params, exclude = exclude)

        return request<Unit, ModelResponseMarketplaceProductFind>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation marketplaceProductFind
     *
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param keyword Defines search keyword (optional)
     * @param categoriesIds Defines product add that is specified by comma-separated categories id (optional)
     * @param storeId Store Id (optional)
     * @param asin Amazon Standard Identification Number. (optional)
     * @param ean European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products. (optional)
     * @param gtin Global Trade Item Number. An GTIN is an identifier for trade items. (optional)
     * @param upc Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products. (optional)
     * @param mpn Manufacturer Part Number. A MPN is an identifier of a particular part design or material used. (optional)
     * @param isbn International Standard Book Number. An ISBN is a unique identifier for books. (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "force_all")
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return RequestConfig
     */
    fun marketplaceProductFindRequestConfig(count: kotlin.Int?, pageCursor: kotlin.String?, keyword: kotlin.String?, categoriesIds: kotlin.String?, storeId: kotlin.String?, asin: kotlin.String?, ean: kotlin.String?, gtin: kotlin.String?, upc: kotlin.String?, mpn: kotlin.String?, isbn: kotlin.String?, responseFields: kotlin.String?, params: kotlin.String?, exclude: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (count != null) {
                    put("count", listOf(count.toString()))
                }
                if (pageCursor != null) {
                    put("page_cursor", listOf(pageCursor.toString()))
                }
                if (keyword != null) {
                    put("keyword", listOf(keyword.toString()))
                }
                if (categoriesIds != null) {
                    put("categories_ids", listOf(categoriesIds.toString()))
                }
                if (storeId != null) {
                    put("store_id", listOf(storeId.toString()))
                }
                if (asin != null) {
                    put("asin", listOf(asin.toString()))
                }
                if (ean != null) {
                    put("ean", listOf(ean.toString()))
                }
                if (gtin != null) {
                    put("gtin", listOf(gtin.toString()))
                }
                if (upc != null) {
                    put("upc", listOf(upc.toString()))
                }
                if (mpn != null) {
                    put("mpn", listOf(mpn.toString()))
                }
                if (isbn != null) {
                    put("isbn", listOf(isbn.toString()))
                }
                if (responseFields != null) {
                    put("response_fields", listOf(responseFields.toString()))
                }
                if (params != null) {
                    put("params", listOf(params.toString()))
                }
                if (exclude != null) {
                    put("exclude", listOf(exclude.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/marketplace.product.find.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
