/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.ModelResponseReturnList
import org.openapitools.client.models.ReturnActionList200Response
import org.openapitools.client.models.ReturnCount200Response
import org.openapitools.client.models.ReturnInfo200Response
import org.openapitools.client.models.ReturnReasonList200Response
import org.openapitools.client.models.ReturnStatusList200Response

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class ReturnApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.api2cart.com/v1.1")
        }
    }

    /**
     * return.action.list
     * Retrieve list of return actions
     * @return ReturnActionList200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun returnActionList() : ReturnActionList200Response {
        val localVarResponse = returnActionListWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ReturnActionList200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * return.action.list
     * Retrieve list of return actions
     * @return ApiResponse<ReturnActionList200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun returnActionListWithHttpInfo() : ApiResponse<ReturnActionList200Response?> {
        val localVariableConfig = returnActionListRequestConfig()

        return request<Unit, ReturnActionList200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation returnActionList
     *
     * @return RequestConfig
     */
    fun returnActionListRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/return.action.list.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * return.count
     * Count returns in store
     * @param orderIds Counts return requests specified by order ids (optional)
     * @param customerId Counts return requests quantity specified by customer id (optional)
     * @param storeId Store Id (optional)
     * @param status Defines status (optional)
     * @param returnType Retrieves returns specified by return type (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param reportRequestId Report request id (optional)
     * @param disableReportCache Disable report cache for current request (optional, default to false)
     * @return ReturnCount200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun returnCount(orderIds: kotlin.String? = null, customerId: kotlin.String? = null, storeId: kotlin.String? = null, status: kotlin.String? = null, returnType: kotlin.String? = null, createdFrom: kotlin.String? = null, createdTo: kotlin.String? = null, modifiedFrom: kotlin.String? = null, modifiedTo: kotlin.String? = null, reportRequestId: kotlin.String? = null, disableReportCache: kotlin.Boolean? = false) : ReturnCount200Response {
        val localVarResponse = returnCountWithHttpInfo(orderIds = orderIds, customerId = customerId, storeId = storeId, status = status, returnType = returnType, createdFrom = createdFrom, createdTo = createdTo, modifiedFrom = modifiedFrom, modifiedTo = modifiedTo, reportRequestId = reportRequestId, disableReportCache = disableReportCache)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ReturnCount200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * return.count
     * Count returns in store
     * @param orderIds Counts return requests specified by order ids (optional)
     * @param customerId Counts return requests quantity specified by customer id (optional)
     * @param storeId Store Id (optional)
     * @param status Defines status (optional)
     * @param returnType Retrieves returns specified by return type (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param reportRequestId Report request id (optional)
     * @param disableReportCache Disable report cache for current request (optional, default to false)
     * @return ApiResponse<ReturnCount200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun returnCountWithHttpInfo(orderIds: kotlin.String?, customerId: kotlin.String?, storeId: kotlin.String?, status: kotlin.String?, returnType: kotlin.String?, createdFrom: kotlin.String?, createdTo: kotlin.String?, modifiedFrom: kotlin.String?, modifiedTo: kotlin.String?, reportRequestId: kotlin.String?, disableReportCache: kotlin.Boolean?) : ApiResponse<ReturnCount200Response?> {
        val localVariableConfig = returnCountRequestConfig(orderIds = orderIds, customerId = customerId, storeId = storeId, status = status, returnType = returnType, createdFrom = createdFrom, createdTo = createdTo, modifiedFrom = modifiedFrom, modifiedTo = modifiedTo, reportRequestId = reportRequestId, disableReportCache = disableReportCache)

        return request<Unit, ReturnCount200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation returnCount
     *
     * @param orderIds Counts return requests specified by order ids (optional)
     * @param customerId Counts return requests quantity specified by customer id (optional)
     * @param storeId Store Id (optional)
     * @param status Defines status (optional)
     * @param returnType Retrieves returns specified by return type (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param reportRequestId Report request id (optional)
     * @param disableReportCache Disable report cache for current request (optional, default to false)
     * @return RequestConfig
     */
    fun returnCountRequestConfig(orderIds: kotlin.String?, customerId: kotlin.String?, storeId: kotlin.String?, status: kotlin.String?, returnType: kotlin.String?, createdFrom: kotlin.String?, createdTo: kotlin.String?, modifiedFrom: kotlin.String?, modifiedTo: kotlin.String?, reportRequestId: kotlin.String?, disableReportCache: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (orderIds != null) {
                    put("order_ids", listOf(orderIds.toString()))
                }
                if (customerId != null) {
                    put("customer_id", listOf(customerId.toString()))
                }
                if (storeId != null) {
                    put("store_id", listOf(storeId.toString()))
                }
                if (status != null) {
                    put("status", listOf(status.toString()))
                }
                if (returnType != null) {
                    put("return_type", listOf(returnType.toString()))
                }
                if (createdFrom != null) {
                    put("created_from", listOf(createdFrom.toString()))
                }
                if (createdTo != null) {
                    put("created_to", listOf(createdTo.toString()))
                }
                if (modifiedFrom != null) {
                    put("modified_from", listOf(modifiedFrom.toString()))
                }
                if (modifiedTo != null) {
                    put("modified_to", listOf(modifiedTo.toString()))
                }
                if (reportRequestId != null) {
                    put("report_request_id", listOf(reportRequestId.toString()))
                }
                if (disableReportCache != null) {
                    put("disable_report_cache", listOf(disableReportCache.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/return.count.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * return.info
     * Retrieve return information.
     * @param id Entity id
     * @param orderId Defines the order id (optional)
     * @param storeId Store Id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,order_products")
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @return ReturnInfo200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun returnInfo(id: kotlin.String, orderId: kotlin.String? = null, storeId: kotlin.String? = null, params: kotlin.String? = "id,order_products", exclude: kotlin.String? = null, responseFields: kotlin.String? = null) : ReturnInfo200Response {
        val localVarResponse = returnInfoWithHttpInfo(id = id, orderId = orderId, storeId = storeId, params = params, exclude = exclude, responseFields = responseFields)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ReturnInfo200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * return.info
     * Retrieve return information.
     * @param id Entity id
     * @param orderId Defines the order id (optional)
     * @param storeId Store Id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,order_products")
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @return ApiResponse<ReturnInfo200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun returnInfoWithHttpInfo(id: kotlin.String, orderId: kotlin.String?, storeId: kotlin.String?, params: kotlin.String?, exclude: kotlin.String?, responseFields: kotlin.String?) : ApiResponse<ReturnInfo200Response?> {
        val localVariableConfig = returnInfoRequestConfig(id = id, orderId = orderId, storeId = storeId, params = params, exclude = exclude, responseFields = responseFields)

        return request<Unit, ReturnInfo200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation returnInfo
     *
     * @param id Entity id
     * @param orderId Defines the order id (optional)
     * @param storeId Store Id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,order_products")
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @return RequestConfig
     */
    fun returnInfoRequestConfig(id: kotlin.String, orderId: kotlin.String?, storeId: kotlin.String?, params: kotlin.String?, exclude: kotlin.String?, responseFields: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("id", listOf(id.toString()))
                if (orderId != null) {
                    put("order_id", listOf(orderId.toString()))
                }
                if (storeId != null) {
                    put("store_id", listOf(storeId.toString()))
                }
                if (params != null) {
                    put("params", listOf(params.toString()))
                }
                if (exclude != null) {
                    put("exclude", listOf(exclude.toString()))
                }
                if (responseFields != null) {
                    put("response_fields", listOf(responseFields.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/return.info.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * return.list
     * Get list of return requests from store.
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,order_products")
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param orderId Defines the order id (optional)
     * @param orderIds Retrieves return requests specified by order ids (optional)
     * @param customerId Retrieves return requests specified by customer id (optional)
     * @param storeId Store Id (optional)
     * @param status Defines status (optional)
     * @param returnType Retrieves returns specified by return type (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param reportRequestId Report request id (optional)
     * @param disableReportCache Disable report cache for current request (optional, default to false)
     * @return ModelResponseReturnList
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun returnList(start: kotlin.Int? = 0, count: kotlin.Int? = 10, pageCursor: kotlin.String? = null, params: kotlin.String? = "id,order_products", exclude: kotlin.String? = null, responseFields: kotlin.String? = null, orderId: kotlin.String? = null, orderIds: kotlin.String? = null, customerId: kotlin.String? = null, storeId: kotlin.String? = null, status: kotlin.String? = null, returnType: kotlin.String? = null, createdFrom: kotlin.String? = null, createdTo: kotlin.String? = null, modifiedFrom: kotlin.String? = null, modifiedTo: kotlin.String? = null, reportRequestId: kotlin.String? = null, disableReportCache: kotlin.Boolean? = false) : ModelResponseReturnList {
        val localVarResponse = returnListWithHttpInfo(start = start, count = count, pageCursor = pageCursor, params = params, exclude = exclude, responseFields = responseFields, orderId = orderId, orderIds = orderIds, customerId = customerId, storeId = storeId, status = status, returnType = returnType, createdFrom = createdFrom, createdTo = createdTo, modifiedFrom = modifiedFrom, modifiedTo = modifiedTo, reportRequestId = reportRequestId, disableReportCache = disableReportCache)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ModelResponseReturnList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * return.list
     * Get list of return requests from store.
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,order_products")
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param orderId Defines the order id (optional)
     * @param orderIds Retrieves return requests specified by order ids (optional)
     * @param customerId Retrieves return requests specified by customer id (optional)
     * @param storeId Store Id (optional)
     * @param status Defines status (optional)
     * @param returnType Retrieves returns specified by return type (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param reportRequestId Report request id (optional)
     * @param disableReportCache Disable report cache for current request (optional, default to false)
     * @return ApiResponse<ModelResponseReturnList?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun returnListWithHttpInfo(start: kotlin.Int?, count: kotlin.Int?, pageCursor: kotlin.String?, params: kotlin.String?, exclude: kotlin.String?, responseFields: kotlin.String?, orderId: kotlin.String?, orderIds: kotlin.String?, customerId: kotlin.String?, storeId: kotlin.String?, status: kotlin.String?, returnType: kotlin.String?, createdFrom: kotlin.String?, createdTo: kotlin.String?, modifiedFrom: kotlin.String?, modifiedTo: kotlin.String?, reportRequestId: kotlin.String?, disableReportCache: kotlin.Boolean?) : ApiResponse<ModelResponseReturnList?> {
        val localVariableConfig = returnListRequestConfig(start = start, count = count, pageCursor = pageCursor, params = params, exclude = exclude, responseFields = responseFields, orderId = orderId, orderIds = orderIds, customerId = customerId, storeId = storeId, status = status, returnType = returnType, createdFrom = createdFrom, createdTo = createdTo, modifiedFrom = modifiedFrom, modifiedTo = modifiedTo, reportRequestId = reportRequestId, disableReportCache = disableReportCache)

        return request<Unit, ModelResponseReturnList>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation returnList
     *
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,order_products")
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param orderId Defines the order id (optional)
     * @param orderIds Retrieves return requests specified by order ids (optional)
     * @param customerId Retrieves return requests specified by customer id (optional)
     * @param storeId Store Id (optional)
     * @param status Defines status (optional)
     * @param returnType Retrieves returns specified by return type (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param reportRequestId Report request id (optional)
     * @param disableReportCache Disable report cache for current request (optional, default to false)
     * @return RequestConfig
     */
    fun returnListRequestConfig(start: kotlin.Int?, count: kotlin.Int?, pageCursor: kotlin.String?, params: kotlin.String?, exclude: kotlin.String?, responseFields: kotlin.String?, orderId: kotlin.String?, orderIds: kotlin.String?, customerId: kotlin.String?, storeId: kotlin.String?, status: kotlin.String?, returnType: kotlin.String?, createdFrom: kotlin.String?, createdTo: kotlin.String?, modifiedFrom: kotlin.String?, modifiedTo: kotlin.String?, reportRequestId: kotlin.String?, disableReportCache: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (start != null) {
                    put("start", listOf(start.toString()))
                }
                if (count != null) {
                    put("count", listOf(count.toString()))
                }
                if (pageCursor != null) {
                    put("page_cursor", listOf(pageCursor.toString()))
                }
                if (params != null) {
                    put("params", listOf(params.toString()))
                }
                if (exclude != null) {
                    put("exclude", listOf(exclude.toString()))
                }
                if (responseFields != null) {
                    put("response_fields", listOf(responseFields.toString()))
                }
                if (orderId != null) {
                    put("order_id", listOf(orderId.toString()))
                }
                if (orderIds != null) {
                    put("order_ids", listOf(orderIds.toString()))
                }
                if (customerId != null) {
                    put("customer_id", listOf(customerId.toString()))
                }
                if (storeId != null) {
                    put("store_id", listOf(storeId.toString()))
                }
                if (status != null) {
                    put("status", listOf(status.toString()))
                }
                if (returnType != null) {
                    put("return_type", listOf(returnType.toString()))
                }
                if (createdFrom != null) {
                    put("created_from", listOf(createdFrom.toString()))
                }
                if (createdTo != null) {
                    put("created_to", listOf(createdTo.toString()))
                }
                if (modifiedFrom != null) {
                    put("modified_from", listOf(modifiedFrom.toString()))
                }
                if (modifiedTo != null) {
                    put("modified_to", listOf(modifiedTo.toString()))
                }
                if (reportRequestId != null) {
                    put("report_request_id", listOf(reportRequestId.toString()))
                }
                if (disableReportCache != null) {
                    put("disable_report_cache", listOf(disableReportCache.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/return.list.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * return.reason.list
     * Retrieve list of return reasons
     * @param storeId Store Id (optional)
     * @return ReturnReasonList200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun returnReasonList(storeId: kotlin.String? = null) : ReturnReasonList200Response {
        val localVarResponse = returnReasonListWithHttpInfo(storeId = storeId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ReturnReasonList200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * return.reason.list
     * Retrieve list of return reasons
     * @param storeId Store Id (optional)
     * @return ApiResponse<ReturnReasonList200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun returnReasonListWithHttpInfo(storeId: kotlin.String?) : ApiResponse<ReturnReasonList200Response?> {
        val localVariableConfig = returnReasonListRequestConfig(storeId = storeId)

        return request<Unit, ReturnReasonList200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation returnReasonList
     *
     * @param storeId Store Id (optional)
     * @return RequestConfig
     */
    fun returnReasonListRequestConfig(storeId: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (storeId != null) {
                    put("store_id", listOf(storeId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/return.reason.list.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * return.status.list
     * Retrieve list of statuses
     * @return ReturnStatusList200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun returnStatusList() : ReturnStatusList200Response {
        val localVarResponse = returnStatusListWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ReturnStatusList200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * return.status.list
     * Retrieve list of statuses
     * @return ApiResponse<ReturnStatusList200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun returnStatusListWithHttpInfo() : ApiResponse<ReturnStatusList200Response?> {
        val localVariableConfig = returnStatusListRequestConfig()

        return request<Unit, ReturnStatusList200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation returnStatusList
     *
     * @return RequestConfig
     */
    fun returnStatusListRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/return.status.list.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
