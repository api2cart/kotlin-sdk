/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.AttributeDelete200Response
import org.openapitools.client.models.BasketLiveShippingServiceCreate200Response
import org.openapitools.client.models.ProductImageUpdate200Response
import org.openapitools.client.models.WebhookCount200Response
import org.openapitools.client.models.WebhookEvents200Response
import org.openapitools.client.models.WebhookList200Response

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class WebhookApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.api2cart.com/v1.1")
        }
    }

    /**
     * webhook.count
     * Count registered webhooks on the store.
     * @param entity The entity you want to filter webhooks by (e.g. order or product) (optional)
     * @param action The action you want to filter webhooks by (e.g. order or product) (optional)
     * @param active The webhook status you want to filter webhooks by (optional)
     * @return WebhookCount200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun webhookCount(entity: kotlin.String? = null, action: kotlin.String? = null, active: kotlin.Boolean? = null) : WebhookCount200Response {
        val localVarResponse = webhookCountWithHttpInfo(entity = entity, action = action, active = active)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as WebhookCount200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * webhook.count
     * Count registered webhooks on the store.
     * @param entity The entity you want to filter webhooks by (e.g. order or product) (optional)
     * @param action The action you want to filter webhooks by (e.g. order or product) (optional)
     * @param active The webhook status you want to filter webhooks by (optional)
     * @return ApiResponse<WebhookCount200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun webhookCountWithHttpInfo(entity: kotlin.String?, action: kotlin.String?, active: kotlin.Boolean?) : ApiResponse<WebhookCount200Response?> {
        val localVariableConfig = webhookCountRequestConfig(entity = entity, action = action, active = active)

        return request<Unit, WebhookCount200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation webhookCount
     *
     * @param entity The entity you want to filter webhooks by (e.g. order or product) (optional)
     * @param action The action you want to filter webhooks by (e.g. order or product) (optional)
     * @param active The webhook status you want to filter webhooks by (optional)
     * @return RequestConfig
     */
    fun webhookCountRequestConfig(entity: kotlin.String?, action: kotlin.String?, active: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (entity != null) {
                    put("entity", listOf(entity.toString()))
                }
                if (action != null) {
                    put("action", listOf(action.toString()))
                }
                if (active != null) {
                    put("active", listOf(active.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/webhook.count.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * webhook.create
     * Create webhook on the store and subscribe to it.
     * @param entity Specify the entity that you want to enable webhooks for (e.g product, order, customer, category)
     * @param action Specify what action (event) will trigger the webhook (e.g add, delete, or update)
     * @param paramCallback Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)
     * @param label The name you give to the webhook (optional)
     * @param fields Fields the webhook should send (optional, default to "force_all")
     * @param active Webhook status (optional, default to true)
     * @param storeId Defines store id where the webhook should be assigned (optional)
     * @return BasketLiveShippingServiceCreate200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun webhookCreate(entity: kotlin.String, action: kotlin.String, paramCallback: kotlin.String? = null, label: kotlin.String? = null, fields: kotlin.String? = "force_all", active: kotlin.Boolean? = true, storeId: kotlin.String? = null) : BasketLiveShippingServiceCreate200Response {
        val localVarResponse = webhookCreateWithHttpInfo(entity = entity, action = action, paramCallback = paramCallback, label = label, fields = fields, active = active, storeId = storeId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BasketLiveShippingServiceCreate200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * webhook.create
     * Create webhook on the store and subscribe to it.
     * @param entity Specify the entity that you want to enable webhooks for (e.g product, order, customer, category)
     * @param action Specify what action (event) will trigger the webhook (e.g add, delete, or update)
     * @param paramCallback Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)
     * @param label The name you give to the webhook (optional)
     * @param fields Fields the webhook should send (optional, default to "force_all")
     * @param active Webhook status (optional, default to true)
     * @param storeId Defines store id where the webhook should be assigned (optional)
     * @return ApiResponse<BasketLiveShippingServiceCreate200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun webhookCreateWithHttpInfo(entity: kotlin.String, action: kotlin.String, paramCallback: kotlin.String?, label: kotlin.String?, fields: kotlin.String?, active: kotlin.Boolean?, storeId: kotlin.String?) : ApiResponse<BasketLiveShippingServiceCreate200Response?> {
        val localVariableConfig = webhookCreateRequestConfig(entity = entity, action = action, paramCallback = paramCallback, label = label, fields = fields, active = active, storeId = storeId)

        return request<Unit, BasketLiveShippingServiceCreate200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation webhookCreate
     *
     * @param entity Specify the entity that you want to enable webhooks for (e.g product, order, customer, category)
     * @param action Specify what action (event) will trigger the webhook (e.g add, delete, or update)
     * @param paramCallback Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)
     * @param label The name you give to the webhook (optional)
     * @param fields Fields the webhook should send (optional, default to "force_all")
     * @param active Webhook status (optional, default to true)
     * @param storeId Defines store id where the webhook should be assigned (optional)
     * @return RequestConfig
     */
    fun webhookCreateRequestConfig(entity: kotlin.String, action: kotlin.String, paramCallback: kotlin.String?, label: kotlin.String?, fields: kotlin.String?, active: kotlin.Boolean?, storeId: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("entity", listOf(entity.toString()))
                put("action", listOf(action.toString()))
                if (paramCallback != null) {
                    put("callback", listOf(paramCallback.toString()))
                }
                if (label != null) {
                    put("label", listOf(label.toString()))
                }
                if (fields != null) {
                    put("fields", listOf(fields.toString()))
                }
                if (active != null) {
                    put("active", listOf(active.toString()))
                }
                if (storeId != null) {
                    put("store_id", listOf(storeId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/webhook.create.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * webhook.delete
     * Delete registered webhook on the store.
     * @param id Webhook id
     * @return AttributeDelete200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun webhookDelete(id: kotlin.String) : AttributeDelete200Response {
        val localVarResponse = webhookDeleteWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AttributeDelete200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * webhook.delete
     * Delete registered webhook on the store.
     * @param id Webhook id
     * @return ApiResponse<AttributeDelete200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun webhookDeleteWithHttpInfo(id: kotlin.String) : ApiResponse<AttributeDelete200Response?> {
        val localVariableConfig = webhookDeleteRequestConfig(id = id)

        return request<Unit, AttributeDelete200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation webhookDelete
     *
     * @param id Webhook id
     * @return RequestConfig
     */
    fun webhookDeleteRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("id", listOf(id.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/webhook.delete.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * webhook.events
     * List all Webhooks that are available on this store.
     * @return WebhookEvents200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun webhookEvents() : WebhookEvents200Response {
        val localVarResponse = webhookEventsWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as WebhookEvents200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * webhook.events
     * List all Webhooks that are available on this store.
     * @return ApiResponse<WebhookEvents200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun webhookEventsWithHttpInfo() : ApiResponse<WebhookEvents200Response?> {
        val localVariableConfig = webhookEventsRequestConfig()

        return request<Unit, WebhookEvents200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation webhookEvents
     *
     * @return RequestConfig
     */
    fun webhookEventsRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/webhook.events.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * webhook.list
     * List registered webhook on the store.
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,entity,action,callback")
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param entity The entity you want to filter webhooks by (e.g. order or product) (optional)
     * @param action The action you want to filter webhooks by (e.g. add, update, or delete) (optional)
     * @param active The webhook status you want to filter webhooks by (optional)
     * @param ids List of сomma-separated webhook ids (optional)
     * @return WebhookList200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun webhookList(params: kotlin.String? = "id,entity,action,callback", start: kotlin.Int? = 0, count: kotlin.Int? = 10, entity: kotlin.String? = null, action: kotlin.String? = null, active: kotlin.Boolean? = null, ids: kotlin.String? = null) : WebhookList200Response {
        val localVarResponse = webhookListWithHttpInfo(params = params, start = start, count = count, entity = entity, action = action, active = active, ids = ids)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as WebhookList200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * webhook.list
     * List registered webhook on the store.
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,entity,action,callback")
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param entity The entity you want to filter webhooks by (e.g. order or product) (optional)
     * @param action The action you want to filter webhooks by (e.g. add, update, or delete) (optional)
     * @param active The webhook status you want to filter webhooks by (optional)
     * @param ids List of сomma-separated webhook ids (optional)
     * @return ApiResponse<WebhookList200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun webhookListWithHttpInfo(params: kotlin.String?, start: kotlin.Int?, count: kotlin.Int?, entity: kotlin.String?, action: kotlin.String?, active: kotlin.Boolean?, ids: kotlin.String?) : ApiResponse<WebhookList200Response?> {
        val localVariableConfig = webhookListRequestConfig(params = params, start = start, count = count, entity = entity, action = action, active = active, ids = ids)

        return request<Unit, WebhookList200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation webhookList
     *
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,entity,action,callback")
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param entity The entity you want to filter webhooks by (e.g. order or product) (optional)
     * @param action The action you want to filter webhooks by (e.g. add, update, or delete) (optional)
     * @param active The webhook status you want to filter webhooks by (optional)
     * @param ids List of сomma-separated webhook ids (optional)
     * @return RequestConfig
     */
    fun webhookListRequestConfig(params: kotlin.String?, start: kotlin.Int?, count: kotlin.Int?, entity: kotlin.String?, action: kotlin.String?, active: kotlin.Boolean?, ids: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (params != null) {
                    put("params", listOf(params.toString()))
                }
                if (start != null) {
                    put("start", listOf(start.toString()))
                }
                if (count != null) {
                    put("count", listOf(count.toString()))
                }
                if (entity != null) {
                    put("entity", listOf(entity.toString()))
                }
                if (action != null) {
                    put("action", listOf(action.toString()))
                }
                if (active != null) {
                    put("active", listOf(active.toString()))
                }
                if (ids != null) {
                    put("ids", listOf(ids.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/webhook.list.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * webhook.update
     * Update Webhooks parameters.
     * @param id Webhook id
     * @param paramCallback Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)
     * @param label The name you give to the webhook (optional)
     * @param fields Fields the webhook should send (optional)
     * @param active Webhook status (optional)
     * @return ProductImageUpdate200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun webhookUpdate(id: kotlin.String, paramCallback: kotlin.String? = null, label: kotlin.String? = null, fields: kotlin.String? = null, active: kotlin.Boolean? = null) : ProductImageUpdate200Response {
        val localVarResponse = webhookUpdateWithHttpInfo(id = id, paramCallback = paramCallback, label = label, fields = fields, active = active)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ProductImageUpdate200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * webhook.update
     * Update Webhooks parameters.
     * @param id Webhook id
     * @param paramCallback Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)
     * @param label The name you give to the webhook (optional)
     * @param fields Fields the webhook should send (optional)
     * @param active Webhook status (optional)
     * @return ApiResponse<ProductImageUpdate200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun webhookUpdateWithHttpInfo(id: kotlin.String, paramCallback: kotlin.String?, label: kotlin.String?, fields: kotlin.String?, active: kotlin.Boolean?) : ApiResponse<ProductImageUpdate200Response?> {
        val localVariableConfig = webhookUpdateRequestConfig(id = id, paramCallback = paramCallback, label = label, fields = fields, active = active)

        return request<Unit, ProductImageUpdate200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation webhookUpdate
     *
     * @param id Webhook id
     * @param paramCallback Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)
     * @param label The name you give to the webhook (optional)
     * @param fields Fields the webhook should send (optional)
     * @param active Webhook status (optional)
     * @return RequestConfig
     */
    fun webhookUpdateRequestConfig(id: kotlin.String, paramCallback: kotlin.String?, label: kotlin.String?, fields: kotlin.String?, active: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("id", listOf(id.toString()))
                if (paramCallback != null) {
                    put("callback", listOf(paramCallback.toString()))
                }
                if (label != null) {
                    put("label", listOf(label.toString()))
                }
                if (fields != null) {
                    put("fields", listOf(fields.toString()))
                }
                if (active != null) {
                    put("active", listOf(active.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/webhook.update.json",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
